package cn.thd.action.se;


import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import cn.thd.bean.EasyUiTreeBean;
import cn.thd.bean.LoginUserInfo;
import cn.thd.bean.Option;
import cn.thd.bean.StaticVar;
import cn.thd.pojo.se.SeProjectInfo;
import cn.thd.pojo.se.SeRequirementTrace;
import cn.thd.service.plan.PlanService;
import cn.thd.service.se.SeRequirementTraceService;
import cn.thd.service.se.SeService;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.ibm.icu.util.Calendar;
import com.thd.core.action.PubAction;
import com.thd.util.MyDateUtils;
import com.thd.util.MyStringUtils;
import com.thd.util.StringUtil;


/**
 * 项目日志相关
 * file autogenerated by ThirdteenDevils's CodeGenUtil 
 */
public class SeRequirementTraceAction extends PubAction {
	
	@Resource
	private SeRequirementTraceService seRequirementTraceService;
	@Resource
	private SeService seService;
	@Resource
	private PlanService planService;
	//需求矩阵树
	private SeRequirementTrace  seRequirementTrace = new SeRequirementTrace();
	
	private String id;
	//移动节点-目标节点
	private String targetId;
	//移动节点-源节点
	private String sourceId;
	//移动节点-位置
	private String point;
	
	private String ajaxMethod;
	
	private String projectId;
	
	
	
	
	/**
	 * 需求矩阵树
	 * url:/se/seRequirementTrace!seRequirementTraceIndex.do?seRequirementTrace.projectId=xxx
	 */
	public String seRequirementTraceIndex(){
		try{
			this.logger.info("seRequirementTraceForm()");
			
			this.initStaticVarObj();
			
			if(StringUtil.isEmpty(seRequirementTrace.getProjectId())){
				throw new Exception("PROJECT ID WAS NOT FOUND !");
			}
			String currentDate = MyDateUtils.toString(new Date());
			SeProjectInfo projectInfo = (SeProjectInfo)this.seRequirementTraceService.findById(SeProjectInfo.class, seRequirementTrace.getProjectId());
			
			this.setProjectId(seRequirementTrace.getProjectId());
			
			this.getRequest().put("currentDate", currentDate);
			this.getRequest().put("projectInfo", projectInfo);
			
			
			
			Calendar c = Calendar.getInstance();
			int currentWeek = MyDateUtils.getWeekOfYear(MyDateUtils.toString(c.getTime()));
			int currentYear = c.get(Calendar.YEAR);
			int currentMonth = (c.get(Calendar.MONTH) + 1);
			int dayOfWeek = MyDateUtils.getDayOfWeek(c.get(Calendar.YEAR) + "-01-01");
			if(dayOfWeek != 1){
				currentWeek--;
			}
			
			//当天所属周计划CODE
			String planCode = planService.queryPlanInfo(currentYear, currentWeek, StaticVar.PLAN_WEEK);
			this.logger.info(currentYear + "|" + currentWeek + "|" + StaticVar.PLAN_MONTH);
			this.getRequest().put("planCode", planCode);
			
			//查询登录人权限
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			Map authMap = this.seService.queryAuth(lui.getUserId(), seRequirementTrace.getProjectId());
			this.getRequest().put("authMap", authMap);
			
			this.setForwardPage("/pages/se/seRequirementTraceIndex.jsp");
			return this.SUCCESS;
			
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
			return this.err(e);
		}
	}
	
	/**
	 * 任务选择器
	 * url:/se/seRequirementTrace!seRequirementTraceTaskSelect.do
	 */
	public String seRequirementTraceTaskSelect(){
		try{
			this.logger.info("seRequirementTraceTaskSelect()");
			this.setForwardPage("/pages/se/seRequirementTraceTaskSelect.jsp");
			return this.SUCCESS;
			
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
			return this.err(e);
		}
	}
	
	
	/**
	 * 任务选择器
	 * url:/se/seRequirementTrace!seRequirementTraceTaskSelectBatch.do
	 */
	public String seRequirementTraceTaskSelectBatch(){
		try{
			this.logger.info("seRequirementTraceTaskSelectBatch()");
			this.setForwardPage("/pages/se/seRequirementTraceTaskSelectBatch.jsp");
			return this.SUCCESS;
			
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
			return this.err(e);
		}
	}
	
	
	/**
	 * 获取需求矩阵全部信息
	 * url:/se/seRequirementTrace!queryTraceTreeData.do
	 */
	public String queryTraceTreeData(){
		try{
			this.logger.info("queryTraceTreeData()");
			/*if(StringUtil.isEmpty(seRequirementTrace.getProjectId())){
				throw new Exception("PROJECT ID WAS NOT FOUND !");
			}*/
			List<EasyUiTreeBean>  datas = new ArrayList<EasyUiTreeBean>();
			if(MyStringUtils.isNotEmpty(this.getId())){
				//获取子节点
				//datas = this.seRequirementTraceService.queryNextNodeById(this.getId());
				
				//获取所有子节点(递归查询)
				SeRequirementTrace node = this.seRequirementTraceService.querySeRequirementTraceById(this.getId());
				datas = this.seRequirementTraceService.queryTraceTreeData(seRequirementTrace.getProjectId(),node.getTreeCode());
			}else{
				datas = this.seRequirementTraceService.queryTraceTreeData(seRequirementTrace.getProjectId(),null);
			}
			
			
			
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			this.setMsg(gson.toJson(datas));
			return "ajax";
			
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
			return this.err(e);
		}
	}
	
	/**
	 * 获取需求矩阵全部信息
	 * url:/se/seRequirementTrace!getTraceTreeData.do
	 */
	public String getTraceTreeData(){
		try{
			this.logger.info("getTraceTreeData()");
			/*if(StringUtil.isEmpty(seRequirementTrace.getProjectId())){
				throw new Exception("PROJECT ID WAS NOT FOUND !");
			}*/
			if(StringUtil.isNotEmpty(this.getId())){
				this.setMsg(this.seRequirementTraceService.queryNextNodeJsonById(this.getId()));
			}else{
				this.setMsg(this.seRequirementTraceService.queryRootJson(seRequirementTrace.getProjectId())); 
			}
			return "ajax";
			
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
			return this.err(e);
		}
	}
	
	
	/**
	 * 获取下级节点
	 * url:/se/seRequirementTrace!getNextData.do
	 */
	public String getNextData(){
		try{
			this.logger.info("getSeRequirementTraceTreeData()");
			/*if(StringUtil.isEmpty(seRequirementTrace.getProjectId())){
				throw new Exception("PROJECT ID WAS NOT FOUND !");
			}*/
			if(StringUtil.isNotEmpty(this.getId())){
				this.setMsg(this.seRequirementTraceService.queryNextNodeJsonById(this.getId()));
			}else{
				this.setMsg(this.seRequirementTraceService.queryRootJson(seRequirementTrace.getProjectId())); 
			}
			return "ajax";
			
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
			return this.err(e);
		}
	}
	
	/**
	 * 保存或更新跟踪矩阵树提交操作
	 * url:/se/seRequirementTrace!seRequirementTraceFormSubmit.do
	 */
	public String seRequirementTraceFormSubmit(){
		try{
			this.logger.info("seRequirementTraceEditSubmit()");
			if("save".equals(this.getOperate())){
				this.seRequirementTraceService.saveSeRequirementTrace(this.seRequirementTrace);
			}else{
				this.seRequirementTraceService.updateSeRequirementTrace(this.seRequirementTrace);
			}			
			this.setScriptContent("parent.message('保存成功');parent.updateNode('" + this.seRequirementTrace.getTraceId() + "','" + this.seRequirementTrace.getTraceName() + "');parent.focusNode('" + this.seRequirementTrace.getTraceId() + "');parent.clw()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 右键新增矩阵节点
	 * url:/se/seRequirementTrace!createNewRequirementTrace.do
	 */
	public String createNewRequirementTrace(){
		try{
			this.logger.info("createNewRequirementTrace()");
			if(StringUtil.isEmpty(this.getId())){
				throw new Exception("未知的父节点ID");
			}
			seRequirementTrace = this.seRequirementTraceService.createNewNode(this.getId());
			//this.seRequirementTraceService.saveNode(this.getId(), seRequirementTrace);
			//this.setForwardPage("/pages/se/seRequirementTraceForm.jsp");
			this.setScriptContent("parent.addNode('" + this.getId() + "','" + seRequirementTrace.getTraceId() + "')");
			//easy ui 风格
			//this.setUrl("seRequirementTrace!seRequirementTraceForm.do?id=" + seRequirementTrace.getTraceId());
			//Bootstrap 风格
			this.setUrl("se/seRequirementTrace!seRequirementTraceFormBootstrap.do?id=" + seRequirementTrace.getTraceId());
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑跟踪矩阵树界面  easyui风格FORM编辑界面
	 * url:/se/seRequirementTrace!seRequirementTraceForm.do
	 */
	public String seRequirementTraceForm(){
		try{
			this.logger.info("seRequirementTraceForm()");
			if(StringUtil.isNotEmpty(this.getId())){
				seRequirementTrace = this.seRequirementTraceService.querySeRequirementTraceById(this.getId());				
				this.setOperate("update");
			}else{
				throw new Exception("未找到矩阵ID");
			}
			this.setForwardPage("/pages/se/seRequirementTraceForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 新增/编辑跟踪矩阵树界面 bootstrap风格FORM编辑界面
	 * url:/se/seRequirementTrace!seRequirementTraceFormBootstrap.do
	 */
	public String seRequirementTraceFormBootstrap(){
		try{
			this.logger.info("seRequirementTraceFormBootstrap()");
			if(StringUtil.isNotEmpty(this.getId())){
				seRequirementTrace = this.seRequirementTraceService.querySeRequirementTraceById(this.getId());				
				this.setOperate("update");
			}else{
				throw new Exception("未找到矩阵ID");
			}
			
			List<Option> projectList = seService.querySeProjectOptions();
			this.getRequest().put("projectList", projectList);
			this.setForwardPage("/pages/se/seRequirementTraceFormBootstrap.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	/**
	 * 矩阵任务概览界面
	 * url:/se/seRequirementTrace!seRequirementTraceTaskUnion.do
	 */
	public String seRequirementTraceTaskUnion(){
		try{
			this.logger.info("seRequirementTraceTaskUnion()");
			if(StringUtil.isEmpty(this.getProjectId())){
				throw new Exception("请指定项目");
			}
			this.setForwardPage("/pages/se/seRequirementTraceTaskUnion.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 矩阵任务概览界面
	 * url:/se/seRequirementTrace!seRequirementTraceTaskUnionGetData.do
	 */
	public String seRequirementTraceTaskUnionGetData(){
		try{
			this.logger.info("seRequirementTraceTaskUnionGetData()");
			if(StringUtil.isEmpty(this.getProjectId())){
				throw new Exception("请指定项目");
			}
			List l = this.seRequirementTraceService.querySeRequirementTraceTaskUnion(this.getProjectId());
			
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + l.size() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			System.out.println(json.toString());
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 矩阵任务概览界面查询
	 * url:/se/seRequirementTrace!seRequirementTraceTaskUnionSearch.do
	 */
	public String seRequirementTraceTaskUnionSearch(){
		try{
			this.logger.info("seRequirementTraceTaskUnionSearch()");
			
			List l = this.seRequirementTraceService.seRequirementTraceTaskUnionSearch(this.getId(),this.getProjectId());
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			String listStr = gson.toJson(l);
			System.out.println(json.toString());
			this.setMsg(listStr);
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个跟踪矩阵树对象操作
	 * url:/se/seRequirementTrace!deleteSeRequirementTraceById.do?seRequirementTrace.traceId=xxx
	 */
	public String deleteSeRequirementTraceById(){
		try{
			this.logger.info("deleteSeRequirementTraceById()");
			this.seRequirementTraceService.deleteSeRequirementTraceById(seRequirementTrace.getTraceId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	/**
	 * ajax方法
	 * url:/se/seRequirementTrace!ajax.do
	 */
	public String ajax(){
		try{
			this.logger.info("ajax()");
			
			//url:/se/seRequirementTrace!ajax.do?ajaxMethod=moveNode&targetId=xxx&sourceId=xxx&point=xxx
			if("moveNode".equals(this.getAjaxMethod())){
				String result = this.seRequirementTraceService.moveNode(this.getTargetId(),this.getSourceId(), this.getPoint());
				this.setMsg(result);
			}
			return "ajax";
			
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
			return this.err(e);
		}
	}
	
	/**
	 * ajax方法
	 * url:/se/seRequirementTrace!seRequirementTraceSelect.do
	 */
	public String seRequirementTraceSelect(){
		try{
			this.logger.info("seRequirementTraceSelect()");
			this.setForwardPage("/pages/se/seRequirementTraceSelect.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
			return this.err(e);
		}
	}
	public SeRequirementTrace getSeRequirementTrace() {
		return seRequirementTrace;
	}
	public void setSeRequirementTrace(SeRequirementTrace seRequirementTrace) {
		this.seRequirementTrace = seRequirementTrace;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getAjaxMethod() {
		return ajaxMethod;
	}

	public void setAjaxMethod(String ajaxMethod) {
		this.ajaxMethod = ajaxMethod;
	}

	public String getTargetId() {
		return targetId;
	}

	public void setTargetId(String targetId) {
		this.targetId = targetId;
	}

	public String getSourceId() {
		return sourceId;
	}

	public void setSourceId(String sourceId) {
		this.sourceId = sourceId;
	}

	public String getPoint() {
		return point;
	}

	public void setPoint(String point) {
		this.point = point;
	}

	public String getProjectId() {
		return projectId;
	}

	public void setProjectId(String projectId) {
		this.projectId = projectId;
	}
	
}
