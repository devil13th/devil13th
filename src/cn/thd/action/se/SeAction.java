package cn.thd.action.se;


import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.activiti.engine.ProcessEngine;

import cn.thd.bean.DataGrid;
import cn.thd.bean.LoginUserInfo;
import cn.thd.bean.Option;
import cn.thd.bean.StaticVar;
import cn.thd.dto.AjaxReturnBean;
import cn.thd.dto.DataTableBean;
import cn.thd.pojo.common.SeAttach;
import cn.thd.pojo.plan.PlanInfo;
import cn.thd.pojo.se.SeAuth;
import cn.thd.pojo.se.SeDayNote;
import cn.thd.pojo.se.SeDayPlan;
import cn.thd.pojo.se.SeMapProjectUser;
import cn.thd.pojo.se.SeMapUser;
import cn.thd.pojo.se.SeMapUserRole;
import cn.thd.pojo.se.SeMeeting;
import cn.thd.pojo.se.SeMeetingRecord;
import cn.thd.pojo.se.SeMenu;
import cn.thd.pojo.se.SePersonLog;
import cn.thd.pojo.se.SeProjectDoc;
import cn.thd.pojo.se.SeProjectInfo;
import cn.thd.pojo.se.SePubModule;
import cn.thd.pojo.se.SeRequirementTrace;
import cn.thd.pojo.se.SeRisk;
import cn.thd.pojo.se.SeRole;
import cn.thd.pojo.se.SeTraceDefect;
import cn.thd.pojo.se.SeTraceDefectRepair;
import cn.thd.pojo.se.SeTraceKey;
import cn.thd.pojo.se.SeTraceNote;
import cn.thd.pojo.se.SeTraceTask;
import cn.thd.pojo.se.SeUser;
import cn.thd.pojo.se.SeUserRewardAmerce;
import cn.thd.service.common.CommonService;
import cn.thd.service.plan.PlanService;
import cn.thd.service.se.SeService;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.ibm.icu.util.Calendar;
import com.thd.core.action.PubAction;
import com.thd.util.JsonObject;
import com.thd.util.MyActivitiUtil;
import com.thd.util.MyDateUtils;
import com.thd.util.MyFile;
import com.thd.util.MyStringUtils;
import com.thd.util.StringUtil;
import com.thd.util.TreeUtil;


/**
 * 项目日志相关
 * file autogenerated by ThirdteenDevils's CodeGenUtil 
 */
public class SeAction extends PubAction {
	@Resource
	private MyActivitiUtil myActivitiUtil;
	@Resource
	private SeService seService;
	@Resource
	private CommonService commonService;
	@Resource
	private ProcessEngine pe;
	@Resource
	private PlanService planService;
	
	private SeTraceDefect  seTraceDefect = new SeTraceDefect();
	private SeTraceTask  seTraceTask = new SeTraceTask();
	//项目大事记
	private SeDayNote  seDayNote = new SeDayNote();
	//会议纪要条目
	private SeMeetingRecord  seMeetingRecord = new SeMeetingRecord();
	//需求矩阵树
	private SeRequirementTrace  seRequirementTrace = new SeRequirementTrace();
	//矩阵属性
	private SeTraceKey  seTraceKey = new SeTraceKey();
	//矩阵记事
	private SeTraceNote  seTraceNote = new SeTraceNote();
	//项目风险
	private SeRisk  seRisk = new SeRisk();
	//项目人员信息
	private SeMapProjectUser  seMapProjectUser = new SeMapProjectUser();
	//公共方法
	private SePubModule  sePubModule = new SePubModule();
	//组员奖惩记录
	private SeUserRewardAmerce  seUserRewardAmerce = new SeUserRewardAmerce();
	//附件
	private File imgFile;
	//附件名称
	private String imgFileFileName;
	//html内容
	private String content;
	//用户
	private SeUser  seUser = new SeUser();
	//项目信息
	private SeProjectInfo  seProjectInfo = new SeProjectInfo();
	//用户日志
	private SePersonLog sePersonLog = new SePersonLog();
	//接收的json数据
	private String acceptJson;
	//缺陷状态历史
	private SeTraceDefectRepair seTraceDefectRepair = new SeTraceDefectRepair();
	//用户业务关系
	private SeMapUser seMapUser = new SeMapUser();
	//项目文档
	private SeProjectDoc  seProjectDoc = new SeProjectDoc();
	
	//源矩阵节点ID 拷贝矩阵属性使用 
	private String sourceTraceId;
	//目标矩阵节点ID 拷贝矩阵属性使用
	private String targetTraceId;
	//拷贝属性类型  U:向上继承  D:向下覆盖
	private String copyType;
	//项目ID
	private String projectId; 
	//
	private String canEdit;
	//系统角色
	private SeRole  seRole = new SeRole();
	//用户角色
	private SeMapUserRole seMapUserRole = new SeMapUserRole();
	//系统菜单
	private SeMenu seMenu = new SeMenu();
	//系统权限
	private SeAuth  seAuth = new SeAuth();
	//会议
	private SeMeeting  seMeeting = new SeMeeting();
	//个人天计划
	private SeDayPlan  seDayPlan = new SeDayPlan();
	
	
	
	//上传图片
	public String uploadFile(){
		try{
			this.getLog().info("uploadFile...");
			if(imgFile != null){
				HttpServletRequest req = this.getReq();
				String saveURL = req.getContextPath() + "/attached/image/";
				String savePath = req.getSession().getServletContext().getRealPath("/") + "/attached/image/";
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				String ymd = sdf.format(new Date());
				savePath += (ymd+ "/");
				saveURL += (ymd+ "/");
				File uploadDir = new File(savePath);
				if(!uploadDir.exists()){
					uploadDir.mkdirs();
				}
				String fix = MyFile.getFix(this.getImgFileFileName());
				System.out.println(savePath);
				String fileName = new Date().getTime() +"-img"+fix;
				try{
					MyFile.copy(imgFile, new File(savePath+fileName));
				}catch(Exception e){
					
				}
				
				
				
				String imgUrl = req.getContextPath()+ "/attached/image/" + ymd+"/" + fileName;
				
				String str = "{\"state\":\"SUCCESS\",\"url\":\"" + imgUrl + "\",\"title\":\"" + this.getImgFileFileName() + "\",\"original\":\"" + this.getImgFileFileName() + "\"}";
				
				
				System.out.println(str);
				this.getRequest().put("msg",str);
				System.out.println("上传完成");
			}else{
				this.setMsg("{\"state\":\"SUCCESS\",\"url\":\"aaa.jpg\",\"title\":\"xxx\",\"original\":\"xxx\"}");
			}
		}catch(Exception e){
			e.printStackTrace();
			this.getRequest().put("msg","");
		}
		return "ajax";
	}
		
		
	/**
	 *  项目日志列表展示界面
	 *  url:/se/se!seDayNoteList.do
	 */
	public String seDayNoteList(){
		try{
			this.logger.info("seDayNoteList()");
			
			List<Option> noteTypeList = commonService.queryDicForOption("note_type");
			this.getRequest().put("noteTypeList", noteTypeList);
			
			this.setForwardPage("/pages/se/seDayNoteList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取项目日志列表数据
	 * url:/se/se!seDayNoteListGetDate.do
	 */
	public String seDayNoteListGetDate(){
		try{
			this.logger.info("seDayNoteListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("NOTE_ID", this.getReq().getParameter("NOTE_ID"));
			//项目id
			map.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			//记事类型
			map.put("NOTE_TYPE", this.getReq().getParameter("NOTE_TYPE"));
			//日记日期
			map.put("NOTE_DATE", this.getReq().getParameter("NOTE_DATE"));
			//日记标题
			map.put("NOTE_TITLE", this.getReq().getParameter("NOTE_TITLE"));
			//日记内容
			map.put("NOTE_CONTENT", this.getReq().getParameter("NOTE_CONTENT"));
			//是否有效
			map.put("IS_VALID", this.getReq().getParameter("IS_VALID"));
			//是否删除 
			map.put("IS_DELETE", this.getReq().getParameter("IS_DELETE"));
			//创建时间
			map.put("CREATE_TIME", this.getReq().getParameter("CREATE_TIME"));
			//修改时间
			map.put("UPDATE_TIME", this.getReq().getParameter("UPDATE_TIME"));
			
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			
			List l = this.seService.querySeDayNote(this.map, this.p);
			
			String listStr = gson.toJson(l);
			
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 项目时间轴记事
	 * url:/se/se!seDayNoteTimeLine.do
	 */
	public String seDayNoteTimeLine(){
		try{
			this.logger.info("seDayNoteTimeLine()");
			
			List<Option> projectList = seService.querySeProjectOptions();
			this.getRequest().put("projectList", projectList);
			
			List<Option> noteTypeList = commonService.queryDicForOption("note_type");
			this.getRequest().put("noteTypeList", noteTypeList);
			
			
			this.setForwardPage("/pages/se/seDayNoteTimeLine.jsp");
			return this.SUCCESS;
			
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * ajax获取项目日志列表数据-时间轴
	 * url:/se/se!seDayNoteTimeLineGetDate.do
	 */
	public String seDayNoteTimeLineGetDate(){
		try{
			this.logger.info("seDayNoteTimeLineGetDate()");
			Map m = new HashMap();
			m.put("sort", "note_date");
			m.put("order", "desc");
			m.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			m.put("NOTE_TYPE", this.getReq().getParameter("NOTE_TYPE"));
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			
			List l = this.seService.querySeDayNote(m, null);
			this.setMsg(gson.toJson(l));
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新项目日志提交操作
	 * url:/se/se!seDayNoteFormSubmit.do
	 */
	public String seDayNoteFormSubmit(){
		try{
			this.logger.info("seDayNoteEditSubmit()");
			
		
			
			if("save".equals(this.getOperate())){
				this.seService.saveSeDayNote(this.seDayNote);
			}else{
				this.seService.updateSeDayNote(this.seDayNote);
			}
			this.setMsg(StaticVar.STATUS_SUCCESS);
//			this.setScriptContent("alert('操作成功');getParent().reloadDg();window.close()");
//			return "msg";
			
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
		
			
	}
	/**
	 * 新增/编辑项目日志界面
	 * url:/se/se!seDayNoteForm.do
	 */
	public String seDayNoteForm(){
		try{
			this.logger.info("seDayNoteForm()");
			
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			List projectList = this.seService.queryMyProject(lui.getUserId());
			this.getRequest().put("projectList", projectList);
			
			List<Option> noteTypeList = commonService.queryDicForOption("note_type");
			this.getRequest().put("noteTypeList", noteTypeList);
			
			if(this.seDayNote.getNoteId()!=null){
				seDayNote = this.seService.querySeDayNoteById(seDayNote.getNoteId());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			this.setForwardPage("/pages/se/seDayNoteForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个项目日志对象操作
	 * url:/se/se!deleteSeDayNoteById.do?seDayNote.noteId=xxx
	 */
	public String deleteSeDayNoteById(){
		try{
			this.logger.info("deleteSeDayNoteById()");
			this.seService.deleteSeDayNoteById(seDayNote.getNoteId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除项目日志对象操作
	 * url:/se/se!deleteSeDayNoteByIds.do?$ids=xxx
	 */
	public String deleteSeDayNoteByIds(){
		try{
			this.logger.info("deleteSeDayNoteByIds()");
			this.seService.deleteSeDayNoteByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	
	/**
	 *  矩阵属性列表展示界面
	 *  url:/se/se!seTraceKeyList.do
	 */
	public String seTraceKeyList(){
		try{
			this.logger.info("seTraceKeyList()");
			this.setForwardPage("/pages/se/seTraceKeyList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取矩阵属性列表数据
	 * url:/se/se!seTraceKeyListGetDate.do
	 */
	public String seTraceKeyListGetDate(){
		try{
			this.logger.info("seTraceKeyListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("KID", this.getReq().getParameter("KID"));
			
			//矩阵id
			map.put("TRACE_ID", this.getReq().getParameter("TRACE_ID"));
			//属性名称
			map.put("KNAME", this.getReq().getParameter("KNAME"));
			//属性代码(小写英文字母)
			map.put("KCODE", this.getReq().getParameter("KCODE"));
			//属性类型 STRING:字符串 CLOB:大文本 DIC:字典  INT:整数  FLOAT:小数  DATE:日期
			map.put("KTYPE", this.getReq().getParameter("KTYPE"));
			//属性备注
			map.put("KDESC", this.getReq().getParameter("KDESC"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			
			List l = this.seService.querySeTraceKey(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新矩阵属性提交操作
	 * url:/se/se!seTraceKeyFormSubmit.do
	 */
	public String seTraceKeyFormSubmit(){
		try{
			this.logger.info("seTraceKeyEditSubmit()");
			if("save".equals(this.getOperate())){
				this.seService.saveSeTraceKey(this.seTraceKey);
			}else{
				this.seService.updateSeTraceKey(this.seTraceKey);
			}			
			this.setScriptContent("alert('操作成功');getParent().reloadDg();window.close()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑矩阵属性界面
	 * url:/se/se!seTraceKeyForm.do
	 */
	public String seTraceKeyForm(){
		try{
			this.logger.info("seTraceKeyForm()");
			if(this.seTraceKey.getKid()!=null){
				seTraceKey = this.seService.querySeTraceKeyById(seTraceKey.getKid());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			this.setForwardPage("/pages/se/seTraceKeyForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个矩阵属性对象操作
	 * url:/se/se!deleteSeTraceKeyById.do?seTraceKey.kid=xxx
	 */
	public String deleteSeTraceKeyById(){
		try{
			this.logger.info("deleteSeTraceKeyById()");
			this.seService.deleteSeTraceKeyById(seTraceKey.getKid());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除矩阵属性对象操作
	 * url:/se/se!deleteSeTraceKeyByIds.do?$ids=xxx
	 */
	public String deleteSeTraceKeyByIds(){
		try{
			this.logger.info("deleteSeTraceKeyByIds()");
			this.seService.deleteSeTraceKeyByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 矩阵属性列表
	 * url:/se/se!traceProList.do
	 */
	public String traceProList(){
		try{
			this.logger.info("traceProList()");
			this.setForwardPage("/pages/se/traceProList.jsp");
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 矩阵属性内容输入
	 * url:/se/se!traceValueInput.do?seRequirementTrace.traceId=xxx
	 */
	public String traceValueInput(){
		try{
			this.logger.info("traceValueInput()");
			
			if(StringUtil.isEmpty(this.getSeRequirementTrace().getTraceId())){
				throw new Exception("请选择矩阵节点");
			}
			
			List stringProList = seService.queryTracePros(this.getSeRequirementTrace().getTraceId(),"STRING");
			List clobProList = seService.queryTracePros(this.getSeRequirementTrace().getTraceId(),"CLOB");
			this.getRequest().put("stringProList", stringProList);
			this.getRequest().put("clobProList", clobProList);
			this.setForwardPage("/pages/se/traceValueInput.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 矩阵属性值输入保存/修改
	 * url:/se/se!traceValueInput.do?seRequirementTrace.traceId=xxx
	 */
	public String traceValueInputSubmit(){
		try{
			this.logger.info("traceValueInputSubmit()");
			
			if(StringUtil.isEmpty(this.getSeRequirementTrace().getTraceId())){
				throw new Exception("请选择矩阵节点");
			}
			
			String paramJsonStr = this.getReq().getParameter("v");
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.create();
			
			List<Map<String,String>> paramList = gson.fromJson(paramJsonStr, List.class);
			this.seService.saveTracePros(this.getSeRequirementTrace().getTraceId(), paramList);
			
			this.setForwardPage("/pages/se/traceValueInput.jsp");
			this.setMsg("success");
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 复制矩阵属性
	 * url:/se/se!copyTracePro.do?sourceTraceId=xxx&copyType=xxx
	 */
	public String copyTracePro(){
		try{
			this.logger.info("copyTracePro()");
			this.seService.traceProExtend(this.getSourceTraceId(),this.getCopyType());
			this.setMsg("success");
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 *  矩阵记事列表展示界面
	 *  url:/se/se!seTraceNoteList.do
	 */
	public String seTraceNoteList(){
		try{
			this.logger.info("seTraceNoteList()");
			this.setForwardPage("/pages/se/seTraceNoteList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取矩阵记事列表数据
	 * url:/se/se!seTraceNoteListGetDate.do
	 */
	public String seTraceNoteListGetDate(){
		try{
			this.logger.info("seTraceNoteListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("NOTE_ID", this.getReq().getParameter("NOTE_ID"));
			
			//记事种类  遗留 备忘 缺陷
			map.put("NOTE_TYPE", this.getReq().getParameter("NOTE_TYPE"));
			//遗留备忘标题
			map.put("NOTE_TITLE", this.getReq().getParameter("NOTE_TITLE"));
			//遗留备忘内容
			map.put("NOTE_CONTENT", this.getReq().getParameter("NOTE_CONTENT"));
			//遗留备忘状态
			map.put("NOTE_STATUS", this.getReq().getParameter("NOTE_STATUS"));
			//矩阵ID
			map.put("TRACE_ID", this.getReq().getParameter("TRACE_ID"));
			//提醒日期
			map.put("ALARM_DATE", this.getReq().getParameter("ALARM_DATE"));
			//预警天数
			map.put("ALARM_DAYS", this.getReq().getParameter("ALARM_DAYS"));
			//是否有效 
			map.put("IS_VALID", this.getReq().getParameter("IS_VALID"));
			//是否删除
			map.put("IS_DELETE", this.getReq().getParameter("IS_DELETE"));
			//创建时间
			map.put("CREATE_TIME", this.getReq().getParameter("CREATE_TIME"));
			//修改时间
			map.put("UPDATE_TIME", this.getReq().getParameter("UPDATE_TIME"));
			//
			map.put("VID", this.getReq().getParameter("VID"));
			//
			map.put("KCODE", this.getReq().getParameter("KCODE"));
			//
			map.put("KTYPE", this.getReq().getParameter("KTYPE"));
			map.put("USER_ID", this.getReq().getParameter("userId"));
			map.put("ISSUE_USER", this.getReq().getParameter("ISSUE_USER"));
			//
			map.put("V", this.getReq().getParameter("V"));
			
			map.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			this.p.setCurrentPage(Integer.parseInt(getReq().getParameter("page")));
			this.p.setPageSize(Integer.parseInt(getReq().getParameter("rows")));
			List l = this.seService.querySeTraceNote(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新矩阵记事提交操作
	 * url:/se/se!seTraceNoteFormSubmit.do
	 */
	public String seTraceNoteFormSubmit(){
		try{
			this.logger.info("seTraceNoteEditSubmit()");
			
			LoginUserInfo lui = this.getLoginUserInfo();
			
			if("save".equals(this.getOperate())){
				this.seTraceNote.setCreator(lui.getUserId());
				this.seService.saveSeTraceNote(this.seTraceNote);
			}else{
				this.seTraceNote.setModifier(lui.getUserId());
				this.seService.updateSeTraceNote(this.seTraceNote);
			}			
			this.setScriptContent("alert('操作成功');try{getParent().reloadTraceNoteDg();window.close();}catch(e){parent.reloadTraceDefectTab();parent.closeLayer(1);}");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 根据遗留备忘ID查询遗留备忘具体描述内容
	 * url:/se/se!queryContentOfTraceNote.do?id=xxx
	 */
	public String queryContentOfTraceNote(){
		try{
			this.logger.info("queryContentOfTraceNote()");
			
			String content = seService.queryContentOfTraceNote(this.getId());
			this.setMsg(content);
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 新增/编辑矩阵记事界面
	 * url:/se/se!seTraceNoteForm.do
	 */
	public String seTraceNoteForm(){
		try{
			this.logger.info("seTraceNoteForm()");
			if(this.seTraceNote.getNoteId()!=null){
				seTraceNote = this.seService.querySeTraceNoteById(seTraceNote.getNoteId());		
				if(MyStringUtils.isNotEmpty(seTraceNote.getTraceId())){
					seRequirementTrace = (SeRequirementTrace)this.seService.findById(SeRequirementTrace.class,seTraceNote.getTraceId());
				}
			}else{
				if(MyStringUtils.isNotEmpty(seTraceNote.getTraceId())){
					seRequirementTrace = (SeRequirementTrace)this.seService.findById(SeRequirementTrace.class,seTraceNote.getTraceId() );
				}
				seTraceNote.setNoteStatus("未落实");
				seTraceNote.setNoteType("遗留");
				seTraceNote.setAlarmDays(3);
				this.setOperate("update");
				this.setOperate("save");
			}
			this.projectId = seRequirementTrace.getProjectId();
			List<Option> userList = commonService.queryUserForOptionKV(this.getProjectId());
			this.getRequest().put("userList", userList);
			this.setForwardPage("/pages/se/seTraceNoteForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个矩阵记事对象操作
	 * url:/se/se!deleteSeTraceNoteById.do?seTraceNote.noteId=xxx
	 */
	public String deleteSeTraceNoteById(){
		try{
			this.logger.info("deleteSeTraceNoteById()");
			this.seService.deleteSeTraceNoteById(seTraceNote.getNoteId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除矩阵记事对象操作
	 * url:/se/se!deleteSeTraceNoteByIds.do?$ids=xxx
	 */
	public String deleteSeTraceNoteByIds(){
		try{
			this.logger.info("deleteSeTraceNoteByIds()");
			this.seService.deleteSeTraceNoteByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	/**
	 * 保存并落实遗留备忘
	 * url:/se/se!saveSeTraceNoteContent.do?seTraceNote.noteId=xxx&seTraceNote.noteContent=xxx&seTraceNote.noteStatus=xxx
	 */
	public String saveSeTraceNoteContent(){
		try{
			this.logger.info("deleteSeTraceNoteById()");
			LoginUserInfo lui = this.getLoginUserInfo();
			this.seService.saveSeTraceNoteContent(seTraceNote.getNoteId(), seTraceNote.getNoteContent(), seTraceNote.getNoteStatus(),lui.getUserId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	/**
	 *  项目风险列表展示界面
	 *  url:/se/se!seRiskList.do
	 */
	public String seRiskList(){
		try{
			this.logger.info("seRiskList()");
			List projectList = seService.querySeProjectOptions();
			this.getRequest().put("projectList", projectList);
			this.setForwardPage("/pages/se/seRiskList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取项目风险列表数据
	 * url:/se/se!seRiskListGetDate.do
	 */
	public String seRiskListGetDate(){
		try{
			this.logger.info("seRiskListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("RISK_ID", this.getReq().getParameter("RISK_ID"));
			
			//项目ID
			map.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			//识别日期
			map.put("IDENT_DATE", this.getReq().getParameter("IDENT_DATE"));
			//风险类别
			map.put("RISK_CLASSIFY", this.getReq().getParameter("RISK_CLASSIFY"));
			//风险描述
			map.put("RISK_CONTENT", this.getReq().getParameter("RISK_CONTENT"));
			//概率
			map.put("RISK_PROBABILITY", this.getReq().getParameter("RISK_PROBABILITY"));
			//影响
			map.put("RISK_SWAY", this.getReq().getParameter("RISK_SWAY"));
			//风险值
			map.put("RISK_VALUE", this.getReq().getParameter("RISK_VALUE"));
			//风险等级
			map.put("RISK_LEVEL", this.getReq().getParameter("RISK_LEVEL"));
			//优先级
			map.put("RISK_PRIORITY", this.getReq().getParameter("RISK_PRIORITY"));
			//应对方式
			map.put("DEAL_TYPE", this.getReq().getParameter("DEAL_TYPE"));
			//应急预案
			map.put("EMERGENCY_PREPLAN", this.getReq().getParameter("EMERGENCY_PREPLAN"));
			//责任人
			map.put("PERSON_IN_CHARGE", this.getReq().getParameter("PERSON_IN_CHARGE"));
			//风险处理措施
			map.put("RISK_DEAL_CONTENT", this.getReq().getParameter("RISK_DEAL_CONTENT"));
			//状态
			map.put("RISK_STATUS", this.getReq().getParameter("RISK_STATUS"));
			//监控人
			map.put("MONITOR", this.getReq().getParameter("MONITOR"));
			//是否关闭
			map.put("IS_CLOSE", this.getReq().getParameter("IS_CLOSE"));
			//关闭日期
			map.put("CLOSE_DATE", this.getReq().getParameter("CLOSE_DATE"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			
			List l = this.seService.querySeRisk(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新项目风险提交操作
	 * url:/se/se!seRiskFormSubmit.do
	 */
	public String seRiskFormSubmit(){
		try{
			this.logger.info("seRiskEditSubmit()");
			if("save".equals(this.getOperate())){
				this.seService.saveSeRisk(this.seRisk);
			}else{
				this.seService.updateSeRisk(this.seRisk);
			}	
			this.setMsg(StaticVar.STATUS_SUCCESS);
			//this.setScriptContent("alert('操作成功');getParent().reloadDg();window.close()");
			//return "msg";
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	/**
	 * 新增/编辑项目风险界面
	 * url:/se/se!seRiskForm.do
	 */
	public String seRiskForm(){
		try{
			this.logger.info("seRiskForm()");
			if(this.seRisk.getRiskId()!=null){
				seRisk = this.seService.querySeRiskById(seRisk.getRiskId());				
				this.setOperate("update");
			}else{
				seRisk.setIsClose("0");
				seRisk.setIdentDate(new Date());
				this.setOperate("save");
			}
			
			LoginUserInfo lui = (LoginUserInfo)this.getReq().getSession().getAttribute("loginUserInfo");
			List projectList = seService.queryMyProject(lui.getUserId());
			this.getRequest().put("projectList", projectList);
			
			List<Option> userList = commonService.queryUserForOptionKV(seRisk.getProjectId());
			this.getRequest().put("userList", userList);
			
			this.setForwardPage("/pages/se/seRiskForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个项目风险对象操作
	 * url:/se/se!deleteSeRiskById.do?seRisk.riskId=xxx
	 */
	public String deleteSeRiskById(){
		try{
			this.logger.info("deleteSeRiskById()");
			this.seService.deleteSeRiskById(seRisk.getRiskId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除项目风险对象操作
	 * url:/se/se!deleteSeRiskByIds.do?$ids=xxx
	 */
	public String deleteSeRiskByIds(){
		try{
			this.logger.info("deleteSeRiskByIds()");
			this.seService.deleteSeRiskByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	/**
	 *  项目风险列表展示界面
	 *  url:/se/se!seUserList.do
	 */
	public String seUserList(){
		try{
			this.logger.info("seUserList()");
			this.setForwardPage("/pages/se/seUserList.jsp");
			Map m = new HashMap();
			List authList = this.seService.querySeAuth(m, null);
			this.getRequest().put("authList", authList);
			
			List menuList = this.seService.querySeMenuForZtree();
			this.getRequest().put("menuList", menuList);
			
			
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取项目风险列表数据
	 * url:/se/se!seUserListGetDate.do
	 */
	public String seUserListGetDate(){
		try{
			this.logger.info("seUserListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("USER_ID", this.getReq().getParameter("USER_ID"));
			
			//用户姓名
			map.put("USER_NAME", this.getReq().getParameter("USER_NAME"));
			//所在公司
			map.put("COMPANY_NAME", this.getReq().getParameter("COMPANY_NAME"));
			//邮箱
			map.put("USER_MAIL", this.getReq().getParameter("USER_MAIL"));
			
			//项目
			map.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			//多人查询
			map.put("USER_IDS", this.getReq().getParameter("USER_IDS"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			if(getReq().getParameter("page") != null){
				this.p.setCurrentPage(Integer.parseInt(getReq().getParameter("page")));
				this.p.setPageSize(Integer.parseInt(getReq().getParameter("rows")));
			}else{
				this.p = null;
			}
			
			List l = this.seService.querySeUser(this.map, this.p);
			
			String listStr = gson.toJson(l);
			int resultSize = 0;
			if(this.p!=null){
				resultSize = p.getListSize();
			}else{
				resultSize = l.size();
			}
			json.append("{\"total\":" + resultSize + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新项目风险提交操作
	 * url:/se/se!seUserFormSubmit.do
	 */
	public String seUserFormSubmit(){
		try{
			this.logger.info("seUserEditSubmit()");
			if("save".equals(this.getOperate())){
				this.seService.saveSeUser(this.seUser);
			}else{
				this.seService.updateSeUser(this.seUser);
			}			
			this.setScriptContent("alert('操作成功');getParent().reloadDg();window.close()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑项目风险界面
	 * url:/se/se!seUserForm.do
	 */
	public String seUserForm(){
		try{
			this.logger.info("seUserForm()");
			if(this.seUser.getUserId()!=null){
				seUser = this.seService.querySeUserById(seUser.getUserId());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			this.setForwardPage("/pages/se/seUserForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个项目风险对象操作
	 * url:/se/se!deleteSeUserById.do?seUser.userId=xxx
	 */
	public String deleteSeUserById(){
		try{
			this.logger.info("deleteSeUserById()");
			this.seService.deleteSeUserById(seUser.getUserId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除项目风险对象操作
	 * url:/se/se!deleteSeUserByIds.do?$ids=xxx
	 */
	public String deleteSeUserByIds(){
		try{
			this.logger.info("deleteSeUserByIds()");
			this.seService.deleteSeUserByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 *  项目信息列表展示界面
	 *  url:/se/se!seProjectInfoList.do
	 */
	public String seProjectInfoList(){
		try{
			this.logger.info("seProjectInfoList()");
			
			this.initStaticVarObj();
			//查询登录人权限
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			Map authMap = this.seService.queryAuth(lui.getUserId(),"");
			this.getRequest().put("authMap", authMap);
			
			this.setForwardPage("/pages/se/seProjectInfoList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取项目信息列表数据
	 * url:/se/se!seProjectInfoListGetDate.do
	 */
	public String seProjectInfoListGetDate(){
		try{
			this.logger.info("seProjectInfoListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			//项目标号
			map.put("PRO_NO", this.getReq().getParameter("PRO_NO"));
			//项目名称
			map.put("PRO_NAME", this.getReq().getParameter("PRO_NAME"));
			//项目描述
			map.put("PRO_DESCRIPTION", this.getReq().getParameter("PRO_DESCRIPTION"));
			//项目目标
			map.put("PRO_TARGET", this.getReq().getParameter("PRO_TARGET"));
			//项目背景
			map.put("PRO_BACKGROUND", this.getReq().getParameter("PRO_BACKGROUND"));
			//最终交付物
			map.put("FINAL_CONSIGN", this.getReq().getParameter("FINAL_CONSIGN"));
			//项目经理
			map.put("PRO_LEADER", this.getReq().getParameter("PRO_LEADER"));
			//项目成员
			map.put("PRO_MEMBER", this.getReq().getParameter("PRO_MEMBER"));
			
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			
			Map authMap = this.seService.queryAuth(lui.getUserId(),"");
			
			if(authMap.get("PROJECT-MANAGE")==null ||  !StaticVar.Y.equals(authMap.get("PROJECT-MANAGE").toString())){
				map.put("USER_ID", lui.getUserId());
			}
			
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			//List l = this.seService.querySeProjectInfo(this.map, this.p);
			
			this.p.setCurrentPage(-1);
			this.p.setPageSize(-1);
			List l = this.seService.querySeProjectInfo(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新项目信息提交操作
	 * url:/se/se!seProjectInfoFormSubmit.do
	 */
	public String seProjectInfoFormSubmit(){
		try{
			this.logger.info("seProjectInfoEditSubmit()");
			if("save".equals(this.getOperate())){
				this.seService.saveSeProjectInfo(this.seProjectInfo);
			}else{
				this.seService.updateSeProjectInfo(this.seProjectInfo);
			}			
			this.setScriptContent("alert('操作成功');getParent().reloadDg();window.close()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑项目信息界面
	 * url:/se/se!seProjectInfoForm.do
	 */
	public String seProjectInfoForm(){
		try{
			this.logger.info("seProjectInfoForm()");
			if(this.seProjectInfo.getProjectId()!=null){
				seProjectInfo = this.seService.querySeProjectInfoById(seProjectInfo.getProjectId());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			this.setForwardPage("/pages/se/seProjectInfoForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个项目信息对象操作
	 * url:/se/se!deleteSeProjectInfoById.do?seProjectInfo.projectId=xxx
	 */
	public String deleteSeProjectInfoById(){
		try{
			this.logger.info("deleteSeProjectInfoById()");
			this.seService.deleteSeProjectInfoById(seProjectInfo.getProjectId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除项目信息对象操作
	 * url:/se/se!deleteSeProjectInfoByIds.do?$ids=xxx
	 */
	public String deleteSeProjectInfoByIds(){
		try{
			this.logger.info("deleteSeProjectInfoByIds()");
			this.seService.deleteSeProjectInfoByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	
	/**
	 *  项目人员信息列表展示界面
	 *  url:/se/se!seMapProjectUserList.do
	 */
	public String seMapProjectUserList(){
		try{
			this.logger.info("seMapProjectUserList()");
			this.setForwardPage("/pages/se/seMapProjectUserList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取项目人员信息列表数据
	 * url:/se/se!seMapProjectUserListGetDate.do
	 */
	public String seMapProjectUserListGetDate(){
		try{
			this.logger.info("seMapProjectUserListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("RID", this.getReq().getParameter("RID"));
			
			//项目ID
			map.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			//用户ID
			map.put("USER_ID", this.getReq().getParameter("USER_ID"));
			//用户姓名
			map.put("USER_NAME", this.getReq().getParameter("USER_NAME"));
			//个人成本
			map.put("USER_COST", this.getReq().getParameter("USER_COST"));
			//岗位
			map.put("USER_POS", this.getReq().getParameter("USER_POS"));
			//用户级别
			map.put("USER_LEVEL", this.getReq().getParameter("USER_LEVEL"));
			//计划到港日期
			map.put("PLAN_DUTY", this.getReq().getParameter("PLAN_DUTY"));
			//计划离岗日期
			map.put("PLAN_UNDUTY", this.getReq().getParameter("PLAN_UNDUTY"));
			//实际到岗日期
			map.put("ACT_DUTY", this.getReq().getParameter("ACT_DUTY"));
			//实际离岗日期
			map.put("ACT_UNDUTY", this.getReq().getParameter("ACT_UNDUTY"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			
			List l = this.seService.querySeMapProjectUser(this.map, null);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + l.size()+ ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新项目人员信息提交操作
	 * url:/se/se!seMapProjectUserFormSubmit.do
	 */
	public String seMapProjectUserFormSubmit(){
		try{
			this.logger.info("seMapProjectUserEditSubmit()");
			if("save".equals(this.getOperate())){
				this.seService.saveSeMapProjectUser(this.seMapProjectUser);
			}else{
				this.seService.updateSeMapProjectUser(this.seMapProjectUser);
			}			
			this.setScriptContent("alert('操作成功');getParent().loadProjectUserDg();window.close()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑项目人员信息界面
	 * url:/se/se!seMapProjectUserForm.do
	 */
	public String seMapProjectUserForm(){
		try{
			this.logger.info("seMapProjectUserForm()");
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			this.initStaticVarObj();
			
			if(this.seMapProjectUser.getRid()!=null){
				seMapProjectUser = this.seService.querySeMapProjectUserById(seMapProjectUser.getRid());	
				
				Map authMap = this.seService.queryAuth(lui.getUserId(), seMapProjectUser.getProjectId());
				this.getRequest().put("authMap", authMap);
				
				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			List<Option> projectList = seService.querySeProjectOptions();
			this.getRequest().put("projectList", projectList);
			List<Option> userList = commonService.queryUserForOptionKV();
			this.getRequest().put("userList", userList);
			
			List<Option> postList = commonService.queryDicForOption("post");
			this.getRequest().put("postList", postList);
			
			List<Option> postLevelList = commonService.queryDicForOption("post_level");
			this.getRequest().put("postLevelList", postLevelList);
			
			this.setForwardPage("/pages/se/seMapProjectUserForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个项目人员信息对象操作
	 * url:/se/se!deleteSeMapProjectUserById.do?seMapProjectUser.rid=xxx
	 */
	public String deleteSeMapProjectUserById(){
		try{
			this.logger.info("deleteSeMapProjectUserById()");
			this.seService.deleteSeMapProjectUserById(seMapProjectUser.getRid());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除项目人员信息对象操作
	 * url:/se/se!deleteSeMapProjectUserByIds.do?$ids=xxx
	 */
	public String deleteSeMapProjectUserByIds(){
		try{
			this.logger.info("deleteSeMapProjectUserByIds()");
			this.seService.deleteSeMapProjectUserByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	/**
	 * 新增/编辑项目人员信息界面
	 * url:/se/se!seUserLog.do
	 */
	public String seUserLog(){
		try{
			this.logger.info("seUserLog()");
			
			this.initStaticVarObj();
			
			//查询登录人权限
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			Map authMap = this.seService.queryAuth(lui.getUserId(),"");
			this.getRequest().put("authMap", authMap);
			
			this.setForwardPage("/pages/se/seUserLog.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 新增/编辑人员日志界面获取数据
	 * url:/se/se!seUserLogGetData.do
	 */
	public String seUserLogGetData(){
		try{
			this.logger.info("seUserLog()");
			StringBuffer json = new StringBuffer();
			Map m = new HashMap();
			m.put("projectId", this.getReq().getParameter("sysList"));
			m.put("userId", this.getReq().getParameter("userList"));
			m.put("logDateL", this.getReq().getParameter("logDateL"));
			m.put("logDateH", this.getReq().getParameter("logDateH"));
			this.p.setCurrentPage(Integer.parseInt(this.getReq().getParameter("page")));
			this.p.setPageSize(Integer.parseInt(this.getReq().getParameter("rows")));
			List l = this.seService.queryUserLogForEdit(m,this.p);
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + this.p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 新增/编辑人员日志界面获取数据
	 * url:/se/se!querySeUserLogGetData.do
	 */
	public String querySeUserLogGetData(){
		try{
			this.logger.info("querySeUserLogGetData()");
			StringBuffer json = new StringBuffer();
			Map m = new HashMap();
			m.put("userId", this.getReq().getParameter("userId"));
			m.put("logDateL", this.getReq().getParameter("logDateL"));
			m.put("logDateH", this.getReq().getParameter("logDateH"));
			m.put("traceId", this.getReq().getParameter("traceId"));
			m.put("taskId", this.getReq().getParameter("taskId"));
			m.put("projectId", this.getReq().getParameter("projectId"));
			//是否包含子矩阵
			m.put("icl", this.getReq().getParameter("icl"));
			
			//排序
			m.put("sort",getReq().getParameter("sort"));	
			m.put("order",getReq().getParameter("order"));	
			DataGrid dg ;
			if(this.getReq().getParameter("page") != null){
				this.p.setCurrentPage(Integer.parseInt(this.getReq().getParameter("page")));
				this.p.setPageSize(Integer.parseInt(this.getReq().getParameter("rows")));
			}else{
				this.p.setCurrentPage(0);
				this.p.setPageSize(0);
			}
			dg = this.seService.queryUserLog(m,this.p);
			GsonBuilder builder = new GsonBuilder();
			
			Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			
			
			this.setMsg(gson.toJson(dg));
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 新增/编辑人员日志界面 保存日志数据-json格式
	 * url:/se/se!seUserLogGetData.do
	 */
	public String saveUserLogJsonData(){
		this.getLog().info("savePerBackInfo()");
		JsonObject jo = new JsonObject();
		GsonBuilder builder = new GsonBuilder();
		//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
		Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
		try{
			sePersonLog = gson.fromJson(this.acceptJson, SePersonLog.class);
			this.seService.updateUserLog(sePersonLog);
			jo.setStatus("success");
		}catch(Exception e){
			jo.setStatus("err");
			jo.setErrMsg(this.getIds());
			e.printStackTrace();
		}
		this.setMsg(gson.toJson(jo));
		return "ajax";
	}
	/**
	 * 创建空白日志
	 * url:/se/se!createBlankUserLog.do
	 */
	public String createBlankUserLog(){
		this.getLog().info("createBlankUserLog()");
		JsonObject jo = new JsonObject();
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
		//Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
		
		try{
			sePersonLog = this.seService.createBlankUserLog();
			jo.setStatus("success");
			jo.setObjJson(sePersonLog);
		}catch(Exception e){
			jo.setStatus("err");
			jo.setErrMsg(e.getMessage());
			e.printStackTrace();
		}
		this.setMsg(gson.toJson(jo));
		return "ajax";
	}
	
	
	
	
	/**
	 * 批量删除用户日志关联任务
	 * url:/se/se!linkTraceForLog.do?sePersonLog.plogId=xxx&seTraceTask.taskId=xxx
	 */
	public String linkTaskForLog(){
		try{
			this.logger.info("linkTraceForLog()");
			String r = this.seService.linkTaskForLog(sePersonLog.getPlogId(), seTraceTask.getTaskId());
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除用户日志对象操作
	 * url:/se/se!deleteSePersonLogByIds.do?$ids=xxx
	 */
	public String deleteSePersonLogByIds(){
		try{
			this.logger.info("deleteSePersonLogByIds()");
			this.seService.deleteSePersonLogByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 *  公共组件列表展示界面-开发看着方便
	 *  url:/se/se!sePubModuleListForDev.do?PROJECT_ID=SSMIS-A1&MODULE_CLASSIFY=STANDAR_CODE
	 */
	public String sePubModuleListForDev(){
		try{
			this.logger.info("sePubModuleListForDev()");
			
			List<Option> meetingTypeList = commonService.queryDicForOption("module_classify");
			//组件标题
			map.put("MODULE_TITLE", this.getReq().getParameter("MODULE_TITLE"));
			//组件分类
			map.put("MODULE_CLASSIFY", this.getReq().getParameter("MODULE_CLASSIFY"));
			//组件方法名
			map.put("MODULE_NAME", this.getReq().getParameter("MODULE_NAME"));
			//组件输入
			map.put("MODULE_INPUT", this.getReq().getParameter("MODULE_INPUT"));
			//组件输出
			map.put("MODULE_OUTPUT", this.getReq().getParameter("MODULE_OUTPUT"));
			//组件描述
			map.put("MODULE_DESC", this.getReq().getParameter("MODULE_DESC"));
			//组件所在文件
			map.put("MODULE_FILE", this.getReq().getParameter("MODULE_FILE"));
			//组件示例
			map.put("MODULE_EXAMPLE", this.getReq().getParameter("MODULE_EXAMPLE"));
			//组件发布日期
			map.put("MODULE_DATE", this.getReq().getParameter("MODULE_DATE"));
			//组件负责人
			map.put("MODULE_USER", this.getReq().getParameter("MODULE_USER"));
			//所属项目
			map.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			
			this.p.setCurrentPage(0);
			this.p.setListSize(0);
			
			List l = this.seService.querySePubModule(this.map, this.p);
			
			
			
			this.getRequest().put("list", l);
			
			
			
			this.setForwardPage("/pages/se/sePubModuleListForDev.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 *  公共组件列表展示界面
	 *  url:/se/se!sePubModuleList.do
	 */
	public String sePubModuleList(){
		try{
			this.logger.info("sePubModuleList()");
			
			List<Option> meetingTypeList = commonService.queryDicForOption("module_classify");
			this.getRequest().put("moduleClassifyList", meetingTypeList);
			
			
			this.setForwardPage("/pages/se/sePubModuleList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取公共组件列表数据
	 * url:/se/se!sePubModuleListGetDate.do
	 */
	public String sePubModuleListGetDate(){
		try{
			this.logger.info("sePubModuleListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("MODULE_ID", this.getReq().getParameter("MODULE_ID"));
			
			//组件标题
			map.put("MODULE_TITLE", this.getReq().getParameter("MODULE_TITLE"));
			//组件分类
			map.put("MODULE_CLASSIFY", this.getReq().getParameter("MODULE_CLASSIFY"));
			//组件方法名
			map.put("MODULE_NAME", this.getReq().getParameter("MODULE_NAME"));
			//组件输入
			map.put("MODULE_INPUT", this.getReq().getParameter("MODULE_INPUT"));
			//组件输出
			map.put("MODULE_OUTPUT", this.getReq().getParameter("MODULE_OUTPUT"));
			//组件描述
			map.put("MODULE_DESC", this.getReq().getParameter("MODULE_DESC"));
			//组件所在文件
			map.put("MODULE_FILE", this.getReq().getParameter("MODULE_FILE"));
			//组件示例
			map.put("MODULE_EXAMPLE", this.getReq().getParameter("MODULE_EXAMPLE"));
			//组件发布日期
			map.put("MODULE_DATE", this.getReq().getParameter("MODULE_DATE"));
			//组件负责人
			map.put("MODULE_USER", this.getReq().getParameter("MODULE_USER"));
			//所属项目
			map.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			
			List l = this.seService.querySePubModule(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新公共组件提交操作
	 * url:/se/se!sePubModuleFormSubmit.do
	 */
	public String sePubModuleFormSubmit(){
		try{
			this.logger.info("sePubModuleEditSubmit()");
			if("save".equals(this.getOperate())){
				this.seService.saveSePubModule(this.sePubModule);
			}else{
				this.seService.updateSePubModule(this.sePubModule);
			}
			
			
			
			//this.setScriptContent("alert('操作成功');getParent().reloadDg();window.close()");
			//return "msg";
			this.setMsg(StaticVar.STATUS_SUCCESS);
		}catch(Exception e){
			e.printStackTrace();
			//return this.err(e);
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	/**
	 * 新增/编辑公共组件界面
	 * url:/se/se!sePubModuleForm.do
	 */
	public String sePubModuleForm(){
		try{
			this.logger.info("sePubModuleForm()");
			if(this.sePubModule.getModuleId()!=null){
				sePubModule = this.seService.querySePubModuleById(sePubModule.getModuleId());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			List<Option> projectList = seService.querySeProjectOptions();
			this.getRequest().put("projectList", projectList);
			List<Option> classifyList = commonService.queryDicForOption("module_classify");
			this.getRequest().put("classifyList", classifyList);
			
			List<Option> userList = commonService.queryUserForOptionKV(sePubModule.getProjectId());
			this.getRequest().put("userList", userList);
			
			//List<Option> userList = commonService.queryUserForOption(null);
			//this.getRequest().put("userList", userList);
			this.setForwardPage("/pages/se/sePubModuleForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个公共组件对象操作
	 * url:/se/se!deleteSePubModuleById.do?sePubModule.moduleId=xxx
	 */
	public String deleteSePubModuleById(){
		try{
			this.logger.info("deleteSePubModuleById()");
			this.seService.deleteSePubModuleById(sePubModule.getModuleId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除公共组件对象操作
	 * url:/se/se!deleteSePubModuleByIds.do?$ids=xxx
	 */
	public String deleteSePubModuleByIds(){
		try{
			this.logger.info("deleteSePubModuleByIds()");
			this.seService.deleteSePubModuleByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 *  待办任务列表展示界面
	 *  url:/se/se!seTraceTaskList.do
	 */
	public String seTraceTaskList(){
		try{
			this.logger.info("seTraceTaskList()");
			this.setForwardPage("/pages/se/seTraceTaskList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取待办任务列表数据
	 * url:/se/se!seTraceTaskListGetDate.do
	 */
	public String seTraceTaskListGetDate(){
		try{
			this.logger.info("seTraceTaskListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("TASK_ID", this.getReq().getParameter("TASK_ID"));
			//项目ID
			map.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			//矩阵ID
			map.put("TRACE_ID", this.getReq().getParameter("TRACE_ID"));
			//开始日期
			map.put("BEGIN_DATE", this.getReq().getParameter("BEGIN_DATE"));
			//结束日期
			map.put("FINISH_DATE", this.getReq().getParameter("FINISH_DATE"));
			//工作量
			map.put("WORK_LOAD", this.getReq().getParameter("WORK_LOAD"));
			//标题
			map.put("TASK_TITLE", this.getReq().getParameter("TASK_TITLE"));
			//要求
			map.put("TASK_REQUIRE", this.getReq().getParameter("TASK_REQUIRE"));
			//状态
			map.put("TASK_STATUS", this.getReq().getParameter("TASK_STATUS"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			
			List l = this.seService.querySeTraceTask(this.map, this.p);
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新待办任务提交操作
	 * url:/se/se!seTraceTaskFormSubmit.do
	 */
	public String seTraceTaskFormSubmit(){
		try{
			this.logger.info("seTraceTaskEditSubmit()");
			if("save".equals(this.getOperate())){
				this.seService.saveSeTraceTask(this.seTraceTask);
			}else{
				this.seService.updateSeTraceTask(this.seTraceTask);
			}			
			this.setScriptContent("alert('操作成功');parent.reloadTaskDg();parent.clw()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 保存或更新待办任务提交操作 - 用于treegrid直接编辑
	 * url:/se/se!seTraceTaskFormSubmitForAjax.do
	 */
	public String seTraceTaskFormSubmitForAjax(){
		try{
			this.logger.info("seTraceTaskFormSubmitForAjax()");
			
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			
			SeTraceTask task = gson.fromJson(this.getAcceptJson(), SeTraceTask.class);
			
			List nullPro = new ArrayList();
			if(task.getBeginDate() == null){
				nullPro.add("beginDate");
			}
			if(task.getFinishDate() == null){
				nullPro.add("finishDate");
			}
			if(task.getActBeginDate() == null){
				nullPro.add("actBeginDate");
			}
			if(task.getActFinishDate() == null){
				nullPro.add("actFinishDate");
			}
			if(task.getCurrentProcess() == null){
				nullPro.add("currentProcess");
			}
			String r = this.seService.updateSeTraceTaskForAjax(this.getId(),task, nullPro.toArray());
			
			this.setMsg(r);
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 指派需求矩阵任务人员
	 * url:/se/se!assignTraceTaskOperators.do
	 */
	public String assignTraceTaskOperators(){
		try{
			this.logger.info("assignTraceTaskOperators()");
			String r = seService.assignOperator(seMapUser.getTabKeyValue(), seMapUser.getUserId());
			this.setMsg(StaticVar.STATUS_SUCCESS);
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 新增/编辑待办任务界面
	 * url:/se/se!seTraceTaskForm.do
	 */
	public String seTraceTaskForm(){
		try{
			this.logger.info("seTraceTaskForm()");
			if(this.seTraceTask.getTaskId()!=null){
				seTraceTask = this.seService.querySeTraceTaskById(seTraceTask.getTaskId());		
				if(MyStringUtils.isNotEmpty(seTraceTask.getTraceId())){
					seRequirementTrace = (SeRequirementTrace)this.seService.findById(SeRequirementTrace.class,seTraceTask.getTraceId() );
				}
				this.setOperate("update");
			}else{
				if(MyStringUtils.isNotEmpty(seTraceTask.getTraceId())){
					seRequirementTrace = (SeRequirementTrace)this.seService.findById(SeRequirementTrace.class,seTraceTask.getTraceId() );
					if(seRequirementTrace!=null){
						seTraceTask.setTaskTitle(seRequirementTrace.getTraceName());
					}
				}
				seTraceTask.setTaskStatus("UNSTART");
				this.setOperate("save");
			}
			List<Option> taskStatusList = commonService.queryDicForOption("task_status");
			this.getRequest().put("taskStatusList", taskStatusList);
			this.setForwardPage("/pages/se/seTraceTaskForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	
	/**
	 * 删除单个待办任务对象操作
	 * url:/se/se!deleteSeTraceTaskById.do?seTraceTask.taskId=xxx
	 */
	public String deleteSeTraceTaskById(){
		try{
			this.logger.info("deleteSeTraceTaskById()");
			this.seService.deleteSeTraceTaskById(seTraceTask.getTaskId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除待办任务对象操作
	 * url:/se/se!deleteSeTraceTaskByIds.do?$ids=xxx
	 */
	public String deleteSeTraceTaskByIds(){
		try{
			this.logger.info("deleteSeTraceTaskByIds()");
			this.seService.deleteSeTraceTaskByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	/**
	 * Task转日志
	 * url:/se/se!transformATaskToLog.do?userIds=userId&taskId=xxx&logDate=xxx&workLoad=xxx
	 */
	public String transformATaskToLog(){
		try{
			this.logger.info("transformATaskToLog()");
			
			String userIds = this.getReq().getParameter("userIds");
			String taskId = this.getReq().getParameter("taskId");
			String logDate = this.getReq().getParameter("logDate");
			String workLoad = this.getReq().getParameter("workLoad");
			
			if(MyStringUtils.isEmpty(logDate)){
				logDate = MyDateUtils.toString(new Date());
			}
			
			
			Float wl = 8f;
			if(MyStringUtils.isNotEmpty(workLoad)){
				try{
					wl = Float.parseFloat(workLoad);
				}catch(Exception e){
					throw new Exception("设置工作量失败");
				}
			}
			this.seService.transformATaskToLog(userIds,taskId,logDate,wl);
			this.setMsg(StaticVar.STATUS_SUCCESS);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	/**
	 *  人员奖惩记录列表展示界面
	 *  url:/se/se!seUserRewardAmerceList.do
	 */
	public String seUserRewardAmerceList(){
		try{
			this.logger.info("seUserRewardAmerceList()");
			List<Option> projectList = seService.querySeProjectOptions();
			this.getRequest().put("projectList", projectList);
			List<Option> userList = commonService.queryUserForOptionKV();
			this.getRequest().put("userList", userList);
			this.setForwardPage("/pages/se/seUserRewardAmerceList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取人员奖惩记录列表数据
	 * url:/se/se!seUserRewardAmerceListGetDate.do
	 */
	public String seUserRewardAmerceListGetDate(){
		try{
			this.logger.info("seUserRewardAmerceListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("ID", this.getReq().getParameter("ID"));
			
			//所属系统
			map.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			//用户ID
			map.put("USER_ID", this.getReq().getParameter("USER_ID"));
			//登记
			map.put("RA_LEVEL", this.getReq().getParameter("RA_LEVEL"));
			//备注
			map.put("REMARK", this.getReq().getParameter("REMARK"));
			//是否删除
			map.put("IS_DELETE", this.getReq().getParameter("IS_DELETE"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			List l = this.seService.querySeUserRewardAmerce(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新人员奖惩记录提交操作
	 * url:/se/se!seUserRewardAmerceFormSubmit.do
	 */
	public String seUserRewardAmerceFormSubmit(){
		try{
			this.logger.info("seUserRewardAmerceEditSubmit()");
			if("save".equals(this.getOperate())){
				this.seService.saveSeUserRewardAmerce(this.seUserRewardAmerce);
			}else{
				this.seService.updateSeUserRewardAmerce(this.seUserRewardAmerce);
			}			
			this.setScriptContent("alert('操作成功');getParent().reloadSeUserRewardAmerceDg();window.close()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑人员奖惩记录界面
	 * url:/se/se!seUserRewardAmerceForm.do
	 */
	public String seUserRewardAmerceForm(){
		try{
			this.logger.info("seUserRewardAmerceForm()");
			if(this.seUserRewardAmerce.getId()!=null){
				seUserRewardAmerce = this.seService.querySeUserRewardAmerceById(seUserRewardAmerce.getId());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			List<Option> projectList = seService.querySeProjectOptions();
			this.getRequest().put("projectList", projectList);
			List<Option> userList = commonService.queryUserForOptionKV();
			this.getRequest().put("userList", userList);
			this.setForwardPage("/pages/se/seUserRewardAmerceForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个人员奖惩记录对象操作
	 * url:/se/se!deleteSeUserRewardAmerceById.do?seUserRewardAmerce.id=xxx
	 */
	public String deleteSeUserRewardAmerceById(){
		try{
			this.logger.info("deleteSeUserRewardAmerceById()");
			this.seService.deleteSeUserRewardAmerceById(seUserRewardAmerce.getId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除人员奖惩记录对象操作
	 * url:/se/se!deleteSeUserRewardAmerceByIds.do?$ids=xxx
	 */
	public String deleteSeUserRewardAmerceByIds(){
		try{
			this.logger.info("deleteSeUserRewardAmerceByIds()");
			this.seService.deleteSeUserRewardAmerceByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	
	/**
	 *  用户视图
	 *  
	 *  url:/se/se!seUserView.do
	 */
	public String seUserView(){
		try{
			this.logger.info("seUserView()");
			this.setForwardPage("/pages/se/seUserView.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 *  任务列表数据
	 *  url:/se/se!seUserViewGetTaskData.do
	 */
	public String seUserViewGetTaskData(){
		try{
			this.logger.info("seUserViewGetTaskData()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			//排序
			map.put("projectId", this.getReq().getParameter("projectId"));
			map.put("userId", this.getReq().getParameter("userId"));
			map.put("taskStatus", this.getReq().getParameter("taskStatus"));
			map.put("expireStatus", this.getReq().getParameter("expireStatus"));
			
			
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			
			List l = this.seService.queryTaskListForUserView(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 *  日志列表数据
	 *  url:/se/se!seUserViewGetTaskData.do
	 */
	public String seUserViewGetLogData(){
		try{
			this.logger.info("seUserViewGetLogData()");
			this.setForwardPage("/pages/se/seUserView.jsp");
			
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			//排序
			map.put("projectId", this.getReq().getParameter("projectId"));
			map.put("userId", this.getReq().getParameter("userId"));
			map.put("logDateH", this.getReq().getParameter("logDateH"));
			map.put("logDateL", this.getReq().getParameter("logDateL"));
			
			
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			
			List l = this.seService.queryLogListForUserView(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 *  遗留备忘列表数据
	 *  url:/se/se!seUserViewGetNoteData.do
	 */
	public String seUserViewGetNoteData(){
		try{
			this.logger.info("seUserViewGetBacklogData()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			//排序
			map.put("projectId", this.getReq().getParameter("projectId"));
			map.put("userId", this.getReq().getParameter("userId"));
			map.put("noteStatus", this.getReq().getParameter("noteStatus"));
			
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			
			List l = this.seService.queryNoteListForUserView(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	/**
	 *  用户视图
	 *  
	 *  url:/se/se!traceTree.do
	 */
	public String traceTree(){
		try{
			this.logger.info("traceTree()");
			List l = this.seService.queryAllSeTrace(this.getId());
			this.getRequest().put("treeNodes", l);
			this.setForwardPage("/pages/se/traceTree.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 *  用户视图
	 *  
	 *  url:/se/se!seProjectUserListGetData.do
	 */
	public String seProjectUserListGetData(){
		try{
			this.logger.info("traceTree()");
			List l = this.seService.queryProjectUser(this.getId());
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + l.size() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	
	/**
	 *  统计视图
	 *  
	 *  url:/se/se!seCountView.do
	 */
	public String seCountView(){
		try{
			this.logger.info("seCountView()");
			
			this.initStaticVarObj();
			
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			Map authMap = this.seService.queryAuth(lui.getUserId(), "");
			
			
			Calendar c = Calendar.getInstance();
			int currentWeek = MyDateUtils.getWeekOfYear(MyDateUtils.toString(c.getTime()));
			int currentYear = c.get(Calendar.YEAR);
			int currentMonth = (c.get(Calendar.MONTH) + 1);
			int dayOfWeek = MyDateUtils.getDayOfWeek(c.get(Calendar.YEAR) + "-01-01");
			if(dayOfWeek != 1){
				currentWeek--;
			}
			//当天所属周计划CODE
			String planCode = planService.queryPlanInfo(currentYear, currentWeek, StaticVar.PLAN_WEEK);
			PlanInfo pi = planService.queryPlanInfoByPlanCode(planCode);
			//本周开始日期
			this.getRequest().put("logDateL",MyDateUtils.toString(pi.getStartDate()) );
			//本周结束日期
			this.getRequest().put("logDateH",MyDateUtils.toString(pi.getFinishDate()));
			
			
			this.getRequest().put("authMap", authMap);
			this.getRequest().put("authMap", authMap);
			
			this.getRequest().put("authMap", authMap);
			this.setForwardPage("/pages/se/seCountView.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	public String seCountDayWorkLoadGetData(){
		try{
			this.logger.info("seCountDayWorkLoadGetData()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			Map m = new HashMap();
			//排序
			m.put("projectId", this.getReq().getParameter("projectId"));
			m.put("userId", this.getReq().getParameter("userId"));
			m.put("logDateL", this.getReq().getParameter("logDateL"));
			m.put("logDateH", this.getReq().getParameter("logDateH"));
			
			List l = this.seService.seCountWorkLoadOfDay(m);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
		
	public String seCountWorkLoadGetData(){
		try{
			this.logger.info("seUserViewGetBacklogData()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			Map m = new HashMap();
			//排序
			m.put("projectId", this.getReq().getParameter("projectId"));
			m.put("userId", this.getReq().getParameter("userList"));
			m.put("logDateL", this.getReq().getParameter("logDateL"));
			m.put("logDateH", this.getReq().getParameter("logDateH"));
			
			//排序
			m.put("sort",this.getReq().getParameter("sort"));	
			m.put("order",this.getReq().getParameter("order"));	
			
			List l = this.seService.seCountWorkLoadGetData(m);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	public String seCountTaskGetData(){
		try{
			this.logger.info("seCountTaskGetData()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			Map m = new HashMap();
			//排序
			m.put("projectId", this.getReq().getParameter("projectId"));
			m.put("userId", this.getReq().getParameter("userList"));
			m.put("logDateL", this.getReq().getParameter("logDateL"));
			m.put("logDateH", this.getReq().getParameter("logDateH"));
			
			//排序
			m.put("sort",this.getReq().getParameter("sort"));	
			m.put("order",this.getReq().getParameter("order"));	
			
			List l = this.seService.seCountTaskGetData(m);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	
	public String seCountTraceGetData(){
		try{
			this.logger.info("seCountTaskGetData()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			Map m = new HashMap();
			//排序
			m.put("projectId", this.getReq().getParameter("projectId"));
			m.put("userId", this.getReq().getParameter("userList"));
			m.put("logDateL", this.getReq().getParameter("logDateL"));
			m.put("logDateH", this.getReq().getParameter("logDateH"));
			//排序
			m.put("sort",this.getReq().getParameter("sort"));	
			m.put("order",this.getReq().getParameter("order"));	
			List l = this.seService.seCountTraceGetData(m);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	/**
	 *  矩阵缺陷列表展示界面
	 *  url:/se/se!seTraceDefectList.do
	 */
	public String seTraceDefectList(){
		try{
			this.logger.info("seTraceDefectList()");
			this.setForwardPage("/pages/se/seTraceDefectList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取矩阵缺陷列表数据
	 * url:/se/se!seTraceDefectListGetDate.do
	 */
	public String seTraceDefectListGetDate(){
		try{
			this.logger.info("seTraceDefectListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("DEFECT_ID", this.getReq().getParameter("DEFECT_ID"));
			
			//矩阵id
			map.put("TRACE_ID", this.getReq().getParameter("TRACE_ID"));
			//缺陷描述
			map.put("DEFECT_DESC", this.getReq().getParameter("DEFECT_DESC"));
			//截图
			map.put("DEFECT_PIC", this.getReq().getParameter("DEFECT_PIC"));
			//缺陷分类
			map.put("DEFECT_CLASSIFY", this.getReq().getParameter("DEFECT_CLASSIFY"));
			//缺陷状态
			map.put("DEFECT_STATUS", this.getReq().getParameter("DEFECT_STATUS"));
			//开发人员
			map.put("DEVELOPER", this.getReq().getParameter("DEVELOPER"));
			//测试人员
			map.put("TEST_USER", this.getReq().getParameter("TEST_USER"));
			//创建时间
			map.put("CREATE_TIME", this.getReq().getParameter("CREATE_TIME"));
			//更新时间
			map.put("UPDATE_TIME", this.getReq().getParameter("UPDATE_TIME"));
			
			map.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			List l = this.seService.querySeTraceDefect(this.map, this.p);
			
			String export = this.getReq().getParameter("export");
			if(export != null && export.equals("1")){
				this.getRequest().put("list", l);
				//this.getReq().setAttribute("list", l);
				this.setForwardPage("/pages/se/seTraceDefectListExport.jsp");
				return this.SUCCESS;
				
			}else{
				String listStr = gson.toJson(l);
				json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
				if(l==null || l.size() < 1){
					listStr = "[]";
				}
				json.append(listStr);
				json.append("}");
				
				this.setMsg(json.toString());
				return "ajax";
				
			}
			
			
			
			
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新矩阵缺陷提交操作
	 * url:/se/se!seTraceDefectFormSubmit.do
	 */
	public String seTraceDefectFormSubmit(){
		try{
			this.logger.info("seTraceDefectEditSubmit()");
			
			this.initStaticVarObj();
			
			if("save".equals(this.getOperate())){
				this.seService.saveSeTraceDefect(this.seTraceDefect);
			}else{
				this.seService.updateSeTraceDefect(this.seTraceDefect);
			}			
			this.setScriptContent("alert('操作成功');getParent().reloadSeTraceDefectDg();window.close()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑矩阵缺陷界面
	 * url:/se/se!seTraceDefectForm.do
	 */
	public String seTraceDefectForm(){
		try{
			this.logger.info("seTraceDefectForm()");
			
			this.initStaticVarObj();
			
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			if(this.seTraceDefect.getDefectId()!=null){
				seTraceDefect = this.seService.querySeTraceDefectById(seTraceDefect.getDefectId());	
				if(MyStringUtils.isNotEmpty(seTraceDefect.getTraceId())){
					seRequirementTrace = (SeRequirementTrace)this.seService.findById(SeRequirementTrace.class,seTraceDefect.getTraceId());
				}
				this.setOperate("update");
				
				this.setCanEdit(StaticVar.N);
				if(lui.getUserId().equals(seTraceDefect.getTestUser())){
					this.setCanEdit(StaticVar.Y);
				}
				
				Map authMap = this.seService.queryAuth(lui.getUserId(), seRequirementTrace.getProjectId());
				this.getRequest().put("authMap", authMap);
				if(StaticVar.Y.equals(authMap.get("TRACE-DEFECT")) ){
					this.setCanEdit(StaticVar.Y);
				}
				
				
			}else{
				if(MyStringUtils.isNotEmpty(seTraceDefect.getTraceId())){
					seRequirementTrace = (SeRequirementTrace)this.seService.findById(SeRequirementTrace.class,seTraceDefect.getTraceId());
				}
				this.seTraceDefect.setDefectStatus("问题提出");
				this.seTraceDefect.setTestUser(lui.getUserId());
				this.setOperate("save");
				this.setCanEdit(StaticVar.Y);
			}
			
			List<Option> userList = commonService.queryUserForOptionKV(seRequirementTrace.getProjectId());
			this.getRequest().put("userList", userList);
			
			this.setForwardPage("/pages/se/seTraceDefectForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个矩阵缺陷对象操作
	 * url:/se/se!deleteSeTraceDefectById.do?seTraceDefect.defectId=xxx
	 */
	public String deleteSeTraceDefectById(){
		try{
			this.logger.info("deleteSeTraceDefectById()");
			this.seService.deleteSeTraceDefectById(seTraceDefect.getDefectId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除矩阵缺陷对象操作
	 * url:/se/se!deleteSeTraceDefectByIds.do?$ids=xxx
	 */
	public String deleteSeTraceDefectByIds(){
		try{
			this.logger.info("deleteSeTraceDefectByIds()");
			this.seService.deleteSeTraceDefectByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	/**
	 * 根据缺陷ID查询缺陷图片内容
	 * url:/se/se!queryContentOfTraceDefect.do?id=xxx
	 */
	public String queryContentOfTraceDefect(){
		try{
			this.logger.info("queryContentOfTraceDefect()");
			
			String content = seService.queryContentOfTraceDefect(this.getId());
			this.setMsg(content);
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 缺陷状态信息
	 * url:/se/se!seTraceDefectStatusInfo.do
	 */
	public String seTraceDefectStatusInfo(){
		try{
			this.logger.info("seTraceDefectStatusInfo()");
			this.setForwardPage("/pages/se/seTraceDefectStatusInfo.jsp");
			List l = this.seService.queryTraceDefectStatusList(this.seTraceDefect.getDefectId());
			this.getRequest().put("list", l);
			//List<Option> userList = commonService.queryUserForOptionKV();
			this.seTraceDefect = this.seService.querySeTraceDefectById(this.seTraceDefect.getDefectId());
			List<Option> userList = new ArrayList();
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			this.getRequest().put("updateDefectUserId", lui.getUserId());
			seTraceDefectRepair.setOperateUser(lui.getUserId());
			
			List targetStatusList = new ArrayList();
			
			String targetStatus = "问题提出";
			if("问题提出".equals(seTraceDefect.getDefectStatus()) ||  "重新打开".equals(seTraceDefect.getDefectStatus())){
				targetStatus = "已修改";
				targetStatusList.add("已修改");
				targetStatusList.add("遗留问题");
				targetStatusList.add("非缺陷");
			}else if("已修改".equals(seTraceDefect.getDefectStatus())){
				targetStatus = "关闭";
				targetStatusList.add("遗留问题");
				targetStatusList.add("重新打开");
				targetStatusList.add("关闭");
			}else if("遗留问题".equals(seTraceDefect.getDefectStatus())){
				targetStatus = "已修改";
				targetStatusList.add("已修改");
				targetStatusList.add("关闭");
			}else if("关闭".equals(seTraceDefect.getDefectStatus())){
				targetStatus = "重新打开";
				targetStatusList.add("重新打开");
			}else if("非缺陷".equals(seTraceDefect.getDefectStatus())){
				targetStatus = "重新打开";
				targetStatusList.add("重新打开");
				targetStatusList.add("关闭");
			}
			seTraceDefectRepair.setOperateStatus(targetStatus);
			
			this.getRequest().put("targetStatusList", targetStatusList);
			
			
			try {
				seRequirementTrace = (SeRequirementTrace)this.seService.findById(SeRequirementTrace.class,this.seTraceDefect.getTraceId());
				Map authMap = this.seService.queryAuth(lui.getUserId(),seRequirementTrace.getProjectId());
				this.getRequest().put("authMap", authMap);
				userList = commonService.queryUserForOptionKV(seRequirementTrace.getProjectId());
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				userList = commonService.queryUserForOptionKV();
			}
			
			this.getRequest().put("userList", userList);
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 更新缺陷状态
	 * url:/se/se!updateTraceDefectStatus.do
	 */
	public String updateTraceDefectStatus(){
		try{
			this.logger.info("updateTraceDefectStatus()");
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			seService.updateTraceDefectStatus(seTraceDefect.getDefectId(),seTraceDefect.getDefectStatus(),lui.getUserId(),seTraceDefect.getDefectPic());
			this.setMsg(StaticVar.STATUS_SUCCESS);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(StaticVar.STATUS_FAILURE);
		}
		return "ajax";
	}
	

	/**
	 * 查询状态变更备注
	 * url:/se/se!traceFileter.do?msg=xxx
	 */
	public String traceFileter(){
		try{
			this.logger.info("traceFileter()");
			List r = seService.traceFileter(this.getMsg());
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			//System.out.println(r);
			this.setMsg(gson.toJson(r));
		}catch(Exception e){
			e.printStackTrace();
		}
		return "ajax";
	}
	
	/**
	 * 查询状态变更备注
	 * url:/se/se!queryDefectRepairRemark.do?id=xxx
	 */
	public String queryDefectRepairRemark(){
		try{
			this.logger.info("queryDefectRepairRemark()");
			seTraceDefectRepair = this.seService.querySeTraceDefectRepairById(this.getId());
			this.setMsg(seTraceDefectRepair.getRemark());
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 更新任务进度
	 * url:/se/se!updateProcessOfTraceTask.do?id=xxx&seTraceTask.currentProcess=xxx
	 */
	public String updateProcessOfTraceTask(){
		try{
			this.logger.info("queryDefectRepairRemark()");
			this.seService.updateProcessOfTraceTask(this.getId(), this.getSeTraceTask().getCurrentProcess());
			this.setMsg(StaticVar.STATUS_SUCCESS);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	/**
	 *  系统角色列表展示界面
	 *  url:/se/se!seRoleList.do
	 */
	public String seRoleList(){
		try{
			this.logger.info("seRoleList()");
			Map m = new HashMap();
			List authList = this.seService.querySeAuth(m, null);
			this.getRequest().put("authList", authList);
			
			List menuList = this.seService.querySeMenuForZtree();
			this.getRequest().put("menuList", menuList);
			
			this.setForwardPage("/pages/se/seRoleList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取系统角色列表数据
	 * url:/se/se!seRoleListGetDate.do
	 */
	public String seRoleListGetDate(){
		try{
			this.logger.info("seRoleListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("ROLE_CODE", this.getReq().getParameter("ROLE_CODE"));
			
			//角色名称
			map.put("ROLE_NAME", this.getReq().getParameter("ROLE_NAME"));
			//角色等级
			map.put("ROLE_LEVEL", this.getReq().getParameter("ROLE_LEVEL"));
			//角色分类
			map.put("ROLE_CLASSIFY", this.getReq().getParameter("ROLE_CLASSIFY"));
			//是否有效
			map.put("IS_VALID", this.getReq().getParameter("IS_VALID"));
			//创建人
			map.put("CREATOR", this.getReq().getParameter("CREATOR"));
			//创建时间
			map.put("CREATE_TIME", this.getReq().getParameter("CREATE_TIME"));
			//修改人
			map.put("MODIFIER", this.getReq().getParameter("MODIFIER"));
			//修改时间
			map.put("MODI_TIME", this.getReq().getParameter("MODI_TIME"));
			
			map.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			List l = this.seService.querySeRole(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * ajax获取系统角色列表数据
	 * url:/se/se!seRoleListGetDateForList.do
	 */
	public String seRoleListGetDateForList(){
		try{
			this.logger.info("seRoleListGetDateForList()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("ROLE_CODE", this.getReq().getParameter("ROLE_CODE"));
			
			//角色名称
			map.put("ROLE_NAME", this.getReq().getParameter("ROLE_NAME"));
			//角色等级
			map.put("ROLE_LEVEL", this.getReq().getParameter("ROLE_LEVEL"));
			//角色分类
			map.put("ROLE_CLASSIFY", this.getReq().getParameter("ROLE_CLASSIFY"));
			//是否有效
			map.put("IS_VALID", this.getReq().getParameter("IS_VALID"));
			//创建人
			map.put("CREATOR", this.getReq().getParameter("CREATOR"));
			//创建时间
			map.put("CREATE_TIME", this.getReq().getParameter("CREATE_TIME"));
			//修改人
			map.put("MODIFIER", this.getReq().getParameter("MODIFIER"));
			//修改时间
			map.put("MODI_TIME", this.getReq().getParameter("MODI_TIME"));
			
			map.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			List l = this.seService.querySeRoleForList(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新系统角色提交操作
	 * url:/se/se!seRoleFormSubmit.do
	 */
	public String seRoleFormSubmit(){
		try{
			this.logger.info("seRoleEditSubmit()");
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			if("save".equals(this.getOperate())){
				this.seRole.setCreator(lui.getUserId());
				this.seRole.setModifier(lui.getUserId());
				this.seService.saveSeRole(this.seRole);
			}else{
				this.seRole.setModifier(lui.getUserId());
				this.seService.updateSeRole(this.seRole);
			}			
			this.setScriptContent("alert('操作成功');getParent().reloadSeRoleDg();window.close()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑系统角色界面
	 * url:/se/se!seRoleForm.do
	 */
	public String seRoleForm(){
		try{
			this.logger.info("seRoleForm()");
			if(this.seRole.getRoleCode()!=null){
				seRole = this.seService.querySeRoleById(seRole.getRoleCode());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			this.setForwardPage("/pages/se/seRoleForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个系统角色对象操作
	 * url:/se/se!deleteSeRoleById.do?seRole.roleCode=xxx
	 */
	public String deleteSeRoleById(){
		try{
			this.logger.info("deleteSeRoleById()");
			this.seService.deleteSeRoleById(seRole.getRoleCode());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除系统角色对象操作
	 * url:/se/se!deleteSeRoleByIds.do?$ids=xxx
	 */
	public String deleteSeRoleByIds(){
		try{
			this.logger.info("deleteSeRoleByIds()");
			this.seService.deleteSeRoleByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 系统用户角色设置
	 * url:/se/se!seUserRoleSelector.do?projectId=xxx&seUser.userId=xxx
	 */
	public String seUserRoleSelector(){
		try{
			this.logger.info("seUserRoleSelector()");
			this.setForwardPage("/pages/se/seUserRoleSelector.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 用户角色设置获取数据
	 * url:/se/se!seUserRoleSelectorGetData.do?projectId=xxx&seUser.userId=xxx
	 */
	public String seUserRoleSelectorGetData(){
		try{
			this.logger.info("seUserRoleSelectorGetData()");
			
			List l = this.seService.queryUserRole(this.getProjectId(),this.getSeUser().getUserId());
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + l.size() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	public String saveUserRole(){
		try{
			this.logger.info("saveUserRole()");
			this.seService.saveUserRole(projectId, seMapUserRole.getUserId(), seMapUserRole.getRoleCode());
			this.setMsg(StaticVar.STATUS_SUCCESS);
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	/**
	 *  系统菜单列表展示界面
	 *  url:/se/se!seMenuList.do
	 */
	public String seMenuList(){
		try{
			this.logger.info("seMenuList()");
			this.setForwardPage("/pages/se/seMenuList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取系统菜单列表数据
	 * url:/se/se!seMenuListGetDate.do
	 */
	public String seMenuListGetDate(){
		try{
			this.logger.info("seMenuListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			
			/*
			map.put("MENU_ID", this.getId());
			//菜单名称
			map.put("MENU_NAME", this.getReq().getParameter("MENU_NAME"));
			//树形代码
			map.put("TREE_CODE", this.getReq().getParameter("TREE_CODE"));
			//是否叶子节点
			map.put("IS_LEAF", this.getReq().getParameter("IS_LEAF"));
			//菜单URL
			map.put("MENU_URL", this.getReq().getParameter("MENU_URL"));
			//功能描述
			map.put("MENU_DESC", this.getReq().getParameter("MENU_DESC"));
			//是否有效
			map.put("IS_VALID", this.getReq().getParameter("IS_VALID"));
			//图标样式
			map.put("MENU_ICO", this.getReq().getParameter("MENU_ICO"));
			//打开方式
			map.put("OPEN_TYPE", this.getReq().getParameter("OPEN_TYPE"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			*/
			
			this.p.setCurrentPage(Integer.parseInt(this.getReq().getParameter("page")));
			this.p.setPageSize(Integer.parseInt(this.getReq().getParameter("rows")));
			
			
			List l = this.seService.querySeMenuForDataGrid(this.getId(), this.p);
			
			String listStr = "";
			
			if(l==null || l.size() < 1){
				listStr = "[]";
			}else{
				listStr = gson.toJson(l);
			}
			
			
			
			if(this.getId() != null){
				this.setMsg(listStr);
			}else{
				json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
				json.append(listStr);
				json.append("}");
				this.setMsg(json.toString());
			}
			
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新系统菜单提交操作
	 * url:/se/se!seMenuFormSubmit.do
	 */
	public String seMenuFormSubmit(){
		try{
			this.logger.info("seMenuEditSubmit()");
			if("save".equals(this.getOperate())){
				this.seService.saveSeMenu(this.seMenu,this.getId());
			}else{
				this.seService.updateSeMenu(this.seMenu);
			}			
			//this.setScriptContent("alert('操作成功');getParent().reloadSeMenuDg();window.close()");
			String pcode = TreeUtil.parentCode(this.seMenu.getTreeCode());
			if("root".equals(pcode)){//一级节点刷新
				this.setScriptContent("alert('操作成功');getParent().reloadSeMenuDg();window.close()");
			}else{//非一级节点刷新
				this.setScriptContent("alert('操作成功');getParent().reloadSeMenuTreeNode('" + this.seService.querySeMenuByTreeCode(pcode).getMenuId() + "');window.close()");
			}
			
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑系统菜单界面
	 * url:/se/se!seMenuForm.do
	 */
	public String seMenuForm(){
		try{
			this.logger.info("seMenuForm()");
			if(this.seMenu.getMenuId()!=null){
				seMenu = this.seService.querySeMenuById(seMenu.getMenuId());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			this.setForwardPage("/pages/se/seMenuForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个系统菜单对象操作
	 * url:/se/se!deleteSeMenuById.do?seMenu.menuId=xxx
	 */
	public String deleteSeMenuById(){
		try{
			this.logger.info("deleteSeMenuById()");
			this.seService.deleteSeMenuById(seMenu.getMenuId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除系统菜单对象操作
	 * url:/se/se!deleteSeMenuByIds.do?$ids=xxx
	 */
	public String deleteSeMenuByIds(){
		try{
			this.logger.info("deleteSeMenuByIds()");
			this.seService.deleteSeMenuByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	/**
	 *  权限字典列表展示界面
	 *  url:/se/se!seAuthList.do
	 */
	public String seAuthList(){
		try{
			this.logger.info("seAuthList()");
			this.setForwardPage("/pages/se/seAuthList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取权限字典列表数据
	 * url:/se/se!seAuthListGetDate.do
	 */
	public String seAuthListGetDate(){
		try{
			this.logger.info("seAuthListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("AUTH_CODE", this.getReq().getParameter("AUTH_CODE"));
			
			//说明
			map.put("AUTH_DESC", this.getReq().getParameter("AUTH_DESC"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			List l = this.seService.querySeAuth(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新权限字典提交操作
	 * url:/se/se!seAuthFormSubmit.do
	 */
	public String seAuthFormSubmit(){
		try{
			this.logger.info("seAuthEditSubmit()");
			if("save".equals(this.getOperate())){
				this.seService.saveSeAuth(this.seAuth);
			}else{
				this.seService.updateSeAuth(this.seAuth);
			}			
			this.setScriptContent("alert('操作成功');getParent().reloadSeAuthDg();window.close()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑权限字典界面
	 * url:/se/se!seAuthForm.do
	 */
	public String seAuthForm(){
		try{
			this.logger.info("seAuthForm()");
			if(this.seAuth.getAuthCode()!=null){
				seAuth = this.seService.querySeAuthById(seAuth.getAuthCode());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			this.setForwardPage("/pages/se/seAuthForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个权限字典对象操作
	 * url:/se/se!deleteSeAuthById.do?seAuth.authCode=xxx
	 */
	public String deleteSeAuthById(){
		try{
			this.logger.info("deleteSeAuthById()");
			this.seService.deleteSeAuthById(seAuth.getAuthCode());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 查询角色的权限列表
	 * url:/se/se!queryAuthOfRole.do?
	 */
	public String queryAuthOfRole(){
		try{
			this.logger.info("queryAuthOfRole()");
			List l = this.seService.queryAuthOfRole(this.getId());
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			this.setMsg(gson.toJson(l));
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	/**
	 * 查询角色的菜单列表
	 * url:/se/se!queryMenuOfRole.do?
	 */
	public String queryMenuOfRole(){
		try{
			this.logger.info("queryMenuOfRole()");
			List l = this.seService.queryMenuOfRole(this.getId());
			
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			this.setMsg(gson.toJson(l));
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	
	/**
	 * 查询用户的权限列表
	 * url:/se/se!queryAuthOfUser.do?
	 */
	public String queryAuthOfUser(){
		try{
			this.logger.info("queryAuthOfUser()");
			List l = this.seService.queryAuthOfUser(this.getId());
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			this.setMsg(gson.toJson(l));
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	/**
	 * 查询用户的菜单列表
	 * url:/se/se!queryMenuOfUser.do?
	 */
	public String queryMenuOfUser(){
		try{
			this.logger.info("queryMenuOfUser()");
			List l = this.seService.queryMenuOfUser(this.getId());
			
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			this.setMsg(gson.toJson(l));
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	
	
	/**
	 * 批量删除权限字典对象操作
	 * url:/se/se!deleteSeAuthByIds.do?$ids=xxx
	 */
	public String deleteSeAuthByIds(){
		try{
			this.logger.info("deleteSeAuthByIds()");
			this.seService.deleteSeAuthByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 设置角色功能权限
	 * url:/se/se!saveAuthOfRole.do?$id=xxx&ids=xxx,xxx
	 */
	public String saveAuthOfRole(){
		try{
			this.logger.info("saveAuthOfRole()");
			String r = this.seService.saveAuthOfRole(this.getId(),this.getIds());
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 设置角色菜单权限
	 * url:/se/se!saveMenuOfRole.do?$id=xxx&ids=xxx,xxx
	 */
	public String saveMenuOfRole(){
		try{
			this.logger.info("saveMenuOfRole()");
			String r = this.seService.saveMenuOfRole(this.getId(),this.getIds());
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	/**
	 * 查询用户参与的系统
	 * url:/se/se!queryMyProject.do
	 */
	public String queryMyProject(){
		try{
			this.logger.info("queryMyProject()");
			
			List projectList = this.seService.queryMyProject(this.getId());
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			this.setMsg(gson.toJson(projectList));
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 查询用户的角色
	 * url:/se/se!queryUserRole.do
	 */
	public String queryUserRole(){
		try{
			this.logger.info("queryUserRole()");
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			List roleList = this.seService.queryUserRole(this.getProjectId(),this.getId());
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			this.setMsg(gson.toJson(roleList));
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 *  会议列表展示界面
	 *  url:/se/se!seMeetingList.do
	 */
	public String seMeetingList(){
		try{
			this.logger.info("seMeetingList()");
			
			List<Option> meetingTypeList = commonService.queryDicForOption("meeting_type");
			this.getRequest().put("meetingTypeList", meetingTypeList);
			
			this.setForwardPage("/pages/se/seMeetingList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取会议列表数据
	 * url:/se/se!seMeetingListGetDate.do
	 */
	public String seMeetingListGetDate(){
		try{
			this.logger.info("seMeetingListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("METTING_CODE", this.getReq().getParameter("METTING_CODE"));
			
			//会议名称
			map.put("METTING_NAME", this.getReq().getParameter("METTING_NAME"));
			//会议分类
			map.put("METTING_TYPE", this.getReq().getParameter("METTING_TYPE"));
			//会议介绍
			map.put("METTING_INTRO", this.getReq().getParameter("METTING_INTRO"));
			//会议时间
			map.put("METTING_TIME", this.getReq().getParameter("METTING_TIME"));
			//会议地点
			map.put("METTING_ADDR", this.getReq().getParameter("METTING_ADDR"));
			//主持人
			map.put("METTING_EMCEE", this.getReq().getParameter("METTING_EMCEE"));
			//参会人员
			map.put("METTING_PARTICIPANT", this.getReq().getParameter("METTING_PARTICIPANT"));
			//所属项目
			map.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			//会议议程
			map.put("METTING_PROCESS", this.getReq().getParameter("METTING_PROCESS"));
			//会议纪要
			map.put("METTING_SUMMARY", this.getReq().getParameter("METTING_SUMMARY"));
			//是否删除
			map.put("IS_DELETE", this.getReq().getParameter("IS_DELETE"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			
			List l = this.seService.querySeMeeting(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新会议提交操作
	 * url:/se/se!seMeetingFormSubmit.do
	 */
	public String seMeetingFormSubmit(){
		try{
			this.logger.info("seMeetingEditSubmit()");
			if("save".equals(this.getOperate())){
				this.seService.saveSeMeeting(this.seMeeting);
			}else{
				this.seService.updateSeMeeting(this.seMeeting);
			}
			this.setMsg(StaticVar.STATUS_SUCCESS);
//			this.setScriptContent("alert('操作成功');getParent().reloadSeMeetingDg();");
//			this.setUrl("se/se!seMeetingForm.do?seMeeting.mettingCode=" + this.seMeeting.getMettingCode());
//			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
			//return this.err(e);
		}
		return "ajax";
	}
	/**
	 * 新增/编辑会议界面
	 * url:/se/se!seMeetingForm.do
	 */
	public String seMeetingForm(){
		try{
			this.logger.info("seMeetingForm()");
			if(this.seMeeting.getMettingCode()!=null){
				seMeeting = this.seService.querySeMeetingById(seMeeting.getMettingCode());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			
			LoginUserInfo lui = (LoginUserInfo)this.getReq().getSession().getAttribute("loginUserInfo");
			List projectList = seService.queryMyProject(lui.getUserId());
			this.getRequest().put("projectList", projectList);
			
			List<Option> meetingTypeList = commonService.queryDicForOption("meeting_type");
			this.getRequest().put("meetingTypeList", meetingTypeList);
			
			
			this.setForwardPage("/pages/se/seMeetingForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个会议对象操作
	 * url:/se/se!deleteSeMeetingById.do?seMeeting.mettingCode=xxx
	 */
	public String deleteSeMeetingById(){
		try{
			this.logger.info("deleteSeMeetingById()");
			this.seService.deleteSeMeetingById(seMeeting.getMettingCode());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除会议对象操作
	 * url:/se/se!deleteSeMeetingByIds.do?$ids=xxx
	 */
	public String deleteSeMeetingByIds(){
		try{
			this.logger.info("deleteSeMeetingByIds()");
			this.seService.deleteSeMeetingByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 *  会议记录列表展示界面
	 *  url:/se/se!seMeetingRecordList.do
	 */
	public String seMeetingRecordList(){
		try{
			this.logger.info("seMeetingRecordList()");
			this.setForwardPage("/pages/se/seMeetingRecordList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取会议记录列表数据
	 * url:/se/se!seMeetingRecordListGetDate.do
	 */
	public String seMeetingRecordListGetDate(){
		try{
			this.logger.info("seMeetingRecordListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("ITEM_ID", this.getReq().getParameter("ITEM_ID"));
			
			//会议CODE
			map.put("MEETING_CODE", this.getReq().getParameter("MEETING_CODE"));
			//提出人
			map.put("ITEM_ISSUER", this.getReq().getParameter("ITEM_ISSUER"));
			//分类
			map.put("ITEM_CLASSIFY", this.getReq().getParameter("ITEM_CLASSIFY"));
			//描述
			map.put("ITEM_DESC", this.getReq().getParameter("ITEM_DESC"));
			//执行人
			map.put("ITEM_PERFORMER", this.getReq().getParameter("ITEM_PERFORMER"));
			//状态
			map.put("ITEM_STATUS", this.getReq().getParameter("ITEM_STATUS"));
			//是否删除
			map.put("IS_DELETE", this.getReq().getParameter("IS_DELETE"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			List l = this.seService.querySeMeetingRecord(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新会议记录提交操作
	 * url:/se/se!seMeetingRecordFormSubmit.do
	 */
	public String seMeetingRecordFormSubmit(){
		try{
			this.logger.info("seMeetingRecordEditSubmit()");
			if("save".equals(this.getOperate())){
				this.seService.saveSeMeetingRecord(this.seMeetingRecord);
			}else{
				this.seService.updateSeMeetingRecord(this.seMeetingRecord);
			}			
			this.setScriptContent("alert('操作成功');parent.reloadMeetingItemTab();parent.$('#addItemDiv').modal('hide')");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑会议记录界面
	 * url:/se/se!seMeetingRecordForm.do
	 */
	public String seMeetingRecordForm(){
		try{
			this.logger.info("seMeetingRecordForm()");
			if(this.seMeetingRecord.getItemId()!=null){
				seMeetingRecord = this.seService.querySeMeetingRecordById(seMeetingRecord.getItemId());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			this.setForwardPage("/pages/se/seMeetingRecordForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个会议记录对象操作
	 * url:/se/se!deleteSeMeetingRecordById.do?seMeetingRecord.itemId=xxx
	 */
	public String deleteSeMeetingRecordById(){
		try{
			this.logger.info("deleteSeMeetingRecordById()");
			this.seService.deleteSeMeetingRecordById(seMeetingRecord.getItemId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除会议记录对象操作
	 * url:/se/se!deleteSeMeetingRecordByIds.do?$ids=xxx
	 */
	public String deleteSeMeetingRecordByIds(){
		try{
			this.logger.info("deleteSeMeetingRecordByIds()");
			this.seService.deleteSeMeetingRecordByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	/**
	 * 查询会议纪要要点/待落实项
	 * url : /se/se!seMeetingRecordForMeetingGetData.do
	 * @return
	 */
	public String seMeetingRecordForMeetingGetData(){
		this.getLog().info("planListGetData");
		try{
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			DataTableBean dtb = seService.querySeMeetingRecordForMetting(this.seMeetingRecord.getMeetingCode(), this.seMeetingRecord.getItemClassify());
			this.setMsg( gson.toJson(dtb));
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 查询项目人员-bootstrap select2 ajax方法获取数据
	 * url : /se/se!queryUserOfprojectForBootstrap.do
	 * @return
	 */
	public String queryUserOfprojectForBootstrap(){
		this.getLog().info("queryUserOfprojectForBootstrap");
		try{
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			List userList = commonService.queryUserForOptionKV(this.getProjectId());
			this.setMsg(gson.toJson(userList));
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 *  项目文档列表展示界面
	 *  url:/se/se!seProjectDocList.do
	 */
	public String seProjectDocList(){
		try{
			this.logger.info("seProjectDocList()");
			this.setForwardPage("/pages/se/seProjectDocList.jsp");
			List projectList = seService.querySeProjectOptions();
			this.getRequest().put("projectList", projectList);
			
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取项目文档列表数据
	 * url:/se/se!seProjectDocListGetDate.do
	 */
	public String seProjectDocListGetDate(){
		try{
			this.logger.info("seProjectDocListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("DOC_ID", this.getReq().getParameter("DOC_ID"));
			
			//项目ID
			map.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			//文档名称
			map.put("DOC_NAME", this.getReq().getParameter("DOC_NAME"));
			//标准文档CODE
			map.put("DOC_CODE", this.getReq().getParameter("DOC_CODE"));
			//版本
			map.put("DOC_VERSOIN", this.getReq().getParameter("DOC_VERSOIN"));
			//文档说明
			map.put("DOC_DESC", this.getReq().getParameter("DOC_DESC"));
			//上传人
			map.put("UPLOADER", this.getReq().getParameter("UPLOADER"));
			//上传时间
			map.put("UPLOAD_TIME", this.getReq().getParameter("UPLOAD_TIME"));
			//是否删除
			map.put("IS_DELETE", this.getReq().getParameter("IS_DELETE"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			
			List l = this.seService.querySeProjectDoc(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新项目文档提交操作
	 * url:/se/se!seProjectDocFormSubmit.do
	 */
	public String seProjectDocFormSubmit(){
		try{
			this.logger.info("seProjectDocEditSubmit()");
			if("save".equals(this.getOperate())){
				LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
				this.seProjectDoc.setUploader(lui.getAccount());
				this.seProjectDoc.setUploadTime(new Date());
				this.seService.saveSeProjectDoc(this.seProjectDoc);
			}else{
				this.seService.updateSeProjectDoc(this.seProjectDoc);
			}			
			this.setScriptContent("alert('操作成功');getParent().reloadSeProjectDocDg();window.close()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑项目文档界面
	 * url:/se/se!seProjectDocForm.do
	 */
	public String seProjectDocForm(){
		try{
			this.logger.info("seProjectDocForm()");
			
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			List projectList = this.seService.queryMyProject(lui.getUserId());
			this.getRequest().put("projectList", projectList);
			
			if(this.seProjectDoc.getDocId()!=null){
				seProjectDoc = this.seService.querySeProjectDocById(seProjectDoc.getDocId());
				
				if(MyStringUtils.isNotEmpty(seProjectDoc.getAttachId())){
					SeAttach attach = (SeAttach)this.seService.findById(SeAttach.class, seProjectDoc.getAttachId());
					if(attach!=null && StaticVar.ISVALID_VALID.equals(attach.getIsValid())){
						this.getReq().setAttribute("attach", attach);
					}
				}
				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			
			List<Option> standarDocCodeList = commonService.querySpecialDicForOption("sys_dic_standard_doc", "doc_name", "doc_code", "is_delete");
			this.getRequest().put("standarDocCodeList", standarDocCodeList);
			
			this.setForwardPage("/pages/se/seProjectDocForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个项目文档对象操作
	 * url:/se/se!deleteSeProjectDocById.do?seProjectDoc.docId=xxx
	 */
	public String deleteSeProjectDocById(){
		try{
			this.logger.info("deleteSeProjectDocById()");
			this.seService.deleteSeProjectDocById(seProjectDoc.getDocId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除项目文档对象操作
	 * url:/se/se!deleteSeProjectDocByIds.do?$ids=xxx
	 */
	public String deleteSeProjectDocByIds(){
		try{
			this.logger.info("deleteSeProjectDocByIds()");
			this.seService.deleteSeProjectDocByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	/**
	 *  个人天计划列表展示界面
	 *  url:/se/se!seDayPlanList.do
	 */
	public String seDayPlanList(){
		try{
			this.logger.info("seDayPlanList()");
			this.setForwardPage("/pages/se/seDayPlanList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取个人天计划列表数据
	 * url:/se/se!seDayPlanListGetDate.do
	 */
	public String seDayPlanListGetDate(){
		try{
			this.logger.info("seDayPlanListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("DAY_PLAN_ID", this.getReq().getParameter("DAY_PLAN_ID"));
			
			//日计划内容
			map.put("PLAN_CONTENT", this.getReq().getParameter("PLAN_CONTENT"));
			//所属人员
			map.put("USER_ID", this.getReq().getParameter("USER_ID"));
			//所属日期
			map.put("PLAN_DATE", this.getReq().getParameter("PLAN_DATE"));
			//备注
			map.put("PLAN_REMARK", this.getReq().getParameter("PLAN_REMARK"));
			//状态
			map.put("STATUS", this.getReq().getParameter("STATUS"));
			//是否删除
			map.put("IS_DELETE", this.getReq().getParameter("IS_DELETE"));
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			List l = this.seService.querySeDayPlan(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新个人天计划提交操作
	 * url:/se/se!seDayPlanFormSubmit.do
	 */
	public String seDayPlanFormSubmit(){
		try{
			this.logger.info("seDayPlanEditSubmit()");
			if("save".equals(this.getOperate())){
				this.seService.saveSeDayPlan(this.seDayPlan);
			}else{
				this.seService.updateSeDayPlan(this.seDayPlan);
			}			
			//this.setScriptContent("alert('操作成功');getParent().reloadSeDayPlanDg();window.close()");
			this.setMsg(StaticVar.STATUS_SUCCESS);
			
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	/**
	 * 新增/编辑个人天计划界面
	 * url:/se/se!seDayPlanForm.do
	 */
	public String seDayPlanForm(){
		try{
			this.logger.info("seDayPlanForm()");
			
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			
			if(this.seDayPlan.getDayPlanId()!=null){
				seDayPlan = this.seService.querySeDayPlanById(seDayPlan.getDayPlanId());				
				this.setOperate("update");
			}else{
				seDayPlan.setUserId(lui.getUserId());
				seDayPlan.setStatus(StaticVar.STATUS_UNFINISH);
				seDayPlan.setPlanDate(new Date());
				this.setOperate("save");
			}
			
			
			
			List<Option> userList = commonService.queryUserForOptionKV(null);
			this.getRequest().put("userList", userList);
			
			List<Option> statusList = new ArrayList<Option>();
			statusList.add(new Option("未完成",StaticVar.STATUS_UNFINISH));
			statusList.add(new Option("已完成",StaticVar.STATUS_FINISHED));
			
			this.getRequest().put("statusList", statusList);
			
			this.setForwardPage("/pages/se/seDayPlanForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个个人天计划对象操作
	 * url:/se/se!deleteSeDayPlanById.do?seDayPlan.dayPlanId=xxx
	 */
	public String deleteSeDayPlanById(){
		try{
			this.logger.info("deleteSeDayPlanById()");
			this.seService.deleteSeDayPlanById(seDayPlan.getDayPlanId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	
	
	/**
	 * 批量删除个人天计划对象操作
	 * url:/se/se!deleteSeDayPlanByIds.do?$ids=xxx
	 */
	public String deleteSeDayPlanByIds(){
		try{
			this.logger.info("deleteSeDayPlanByIds()");
			this.seService.deleteSeDayPlanByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	/**
	 * 批量删除个人天计划对象操作
	 * url:/se/se!saveSimpleSeDayPlan.do
	 */
	public String saveSimpleSeDayPlan(){
		AjaxReturnBean arb = new AjaxReturnBean();
		try{
			this.logger.info("saveSimpleSeDayPlan()");
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			
			String id = this.seService.saveSimpleSeDayPlan(this.seDayPlan.getDayPlanId(),this.seDayPlan.getPlanContent(),lui.getUserId());
			
			arb.setStatus(StaticVar.STATUS_SUCCESS);
			arb.setMessage(id);
		}catch(Exception e){
			e.printStackTrace();
			arb.setMessage(e.getMessage());
			arb.setStatus(StaticVar.STATUS_FAILURE);
		}
		

		StringBuffer json = new StringBuffer();
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		this.setMsg(gson.toJson(arb));
		return "ajax";
	}
	
	/**
	 * 将单个人天计划对象置为完成状态
	 * url:/se/se!closesSeDayPlanById.do?seDayPlan.dayPlanId=xxx
	 */
	public String closesSeDayPlanById(){
		AjaxReturnBean arb = new AjaxReturnBean();
		try{
			this.logger.info("deleteSeDayPlanById()");
			SeDayPlan sdp = this.seService.querySeDayPlanById(this.seDayPlan.getDayPlanId());
			sdp.setStatus(StaticVar.STATUS_FINISHED);
			this.seService.updateSeDayPlan(sdp);
			arb.setStatus(StaticVar.STATUS_SUCCESS);
		}catch(Exception e){
			e.printStackTrace();
			arb.setStatus(StaticVar.STATUS_FAILURE);
			arb.setMessage(e.getMessage());
		}
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		this.setMsg(gson.toJson(arb));
		return "ajax";
	}
	
	public void setSeDayPlan( SeDayPlan seDayPlan) {
		this.seDayPlan = seDayPlan;
	}
	public SeDayPlan getSeDayPlan() {
		return seDayPlan;
	}
	
	public void setSeProjectDoc( SeProjectDoc seProjectDoc) {
		this.seProjectDoc = seProjectDoc;
	}
	public SeProjectDoc getSeProjectDoc() {
		return seProjectDoc;
	}
	
	
	public void setSeMeeting( SeMeeting seMeeting) {
		this.seMeeting = seMeeting;
	}
	public SeMeeting getSeMeeting() {
		return seMeeting;
	}
	public void setSeAuth( SeAuth seAuth) {
		this.seAuth = seAuth;
	}
	public SeAuth getSeAuth() {
		return seAuth;
	}
	public void setSeMenu( SeMenu seMenu) {
		this.seMenu = seMenu;
	}
	public SeMenu getSeMenu() {
		return seMenu;
	}
	public void setSeTraceTask( SeTraceTask seTraceTask) {
		this.seTraceTask = seTraceTask;
	}
	public SeTraceTask getSeTraceTask() {
		return seTraceTask;
	}
	public void setSeMapProjectUser( SeMapProjectUser seMapProjectUser) {
		this.seMapProjectUser = seMapProjectUser;
	}
	public SeMapProjectUser getSeMapProjectUser() {
		return seMapProjectUser;
	}
	public void setSeProjectInfo( SeProjectInfo seProjectInfo) {
		this.seProjectInfo = seProjectInfo;
	}
	public SeProjectInfo getSeProjectInfo() {
		return seProjectInfo;
	}
	public void setSeUser( SeUser seUser) {
		this.seUser = seUser;
	}
	public SeUser getSeUser() {
		return seUser;
	}
	public void setSeDayNote( SeDayNote seDayNote) {
		this.seDayNote = seDayNote;
	}
	public SeDayNote getSeDayNote() {
		return seDayNote;
	}
	public File getImgFile() {
		return imgFile;
	}
	public void setImgFile(File imgFile) {
		this.imgFile = imgFile;
	}
	public String getImgFileFileName() {
		return imgFileFileName;
	}
	public void setImgFileFileName(String imgFileFileName) {
		this.imgFileFileName = imgFileFileName;
	}
	public String getContent() {
		return content;
	}
	public void setContent(String content) {
		this.content = content;
	}
	public void setSeMeetingRecord( SeMeetingRecord seMeetingRecord) {
		this.seMeetingRecord = seMeetingRecord;
	}
	public SeMeetingRecord getSeMeetingRecord() {
		return seMeetingRecord;
	}
	public SeRequirementTrace getSeRequirementTrace() {
		return seRequirementTrace;
	}
	public void setSeRequirementTrace(SeRequirementTrace seRequirementTrace) {
		this.seRequirementTrace = seRequirementTrace;
	}
	public SeTraceKey getSeTraceKey() {
		return seTraceKey;
	}
	public void setSeTraceKey(SeTraceKey seTraceKey) {
		this.seTraceKey = seTraceKey;
	}
	public String getSourceTraceId() {
		return sourceTraceId;
	}
	public void setSourceTraceId(String sourceTraceId) {
		this.sourceTraceId = sourceTraceId;
	}
	public String getTargetTraceId() {
		return targetTraceId;
	}
	public void setTargetTraceId(String targetTraceId) {
		this.targetTraceId = targetTraceId;
	}
	public String getCopyType() {
		return copyType;
	}
	public void setCopyType(String copyType) {
		this.copyType = copyType;
	}
	public SeTraceNote getSeTraceNote() {
		return seTraceNote;
	}
	public void setSeTraceNote(SeTraceNote seTraceNote) {
		this.seTraceNote = seTraceNote;
	}
	public SeRisk getSeRisk() {
		return seRisk;
	}
	public void setSeRisk(SeRisk seRisk) {
		this.seRisk = seRisk;
	}
	public String getAcceptJson() {
		return acceptJson;
	}
	public void setAcceptJson(String acceptJson) {
		this.acceptJson = acceptJson;
	}
	public SePersonLog getSePersonLog() {
		return sePersonLog;
	}
	public void setSePersonLog(SePersonLog sePersonLog) {
		this.sePersonLog = sePersonLog;
	}
	public void setSePubModule( SePubModule sePubModule) {
		this.sePubModule = sePubModule;
	}
	public SePubModule getSePubModule() {
		return sePubModule;
	}
	public SeUserRewardAmerce getSeUserRewardAmerce() {
		return seUserRewardAmerce;
	}
	public void setSeUserRewardAmerce(SeUserRewardAmerce seUserRewardAmerce) {
		this.seUserRewardAmerce = seUserRewardAmerce;
	}
	public void setSeTraceDefect( SeTraceDefect seTraceDefect) {
		this.seTraceDefect = seTraceDefect;
	}
	public SeTraceDefect getSeTraceDefect() {
		return seTraceDefect;
	}
	public SeTraceDefectRepair getSeTraceDefectRepair() {
		return seTraceDefectRepair;
	}
	public void setSeTraceDefectRepair(SeTraceDefectRepair seTraceDefectRepair) {
		this.seTraceDefectRepair = seTraceDefectRepair;
	}
	public SeMapUser getSeMapUser() {
		return seMapUser;
	}
	public void setSeMapUser(SeMapUser seMapUser) {
		this.seMapUser = seMapUser;
	}
	public String getProjectId() {
		return projectId;
	}
	public void setProjectId(String projectId) {
		this.projectId = projectId;
	}
	public String getCanEdit() {
		return canEdit;
	}
	public void setCanEdit(String canEdit) {
		this.canEdit = canEdit;
	}
	public SeRole getSeRole() {
		return seRole;
	}
	public void setSeRole(SeRole seRole) {
		this.seRole = seRole;
	}
	public SeMapUserRole getSeMapUserRole() {
		return seMapUserRole;
	}
	public void setSeMapUserRole(SeMapUserRole seMapUserRole) {
		this.seMapUserRole = seMapUserRole;
	}
}
