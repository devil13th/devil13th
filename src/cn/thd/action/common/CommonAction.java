package cn.thd.action.common;


import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import cn.thd.bean.FileUploadResult;
import cn.thd.bean.Option;
import cn.thd.bean.StaticVar;
import cn.thd.pojo.common.SeAttach;
import cn.thd.pojo.common.SysDay;
import cn.thd.pojo.common.SysDicFunction;
import cn.thd.pojo.common.SysDicProcess;
import cn.thd.pojo.common.SysDicProcessStep;
import cn.thd.pojo.common.SysDicPub;
import cn.thd.pojo.common.SysDicStandardDoc;
import cn.thd.pojo.common.SysTimerList;
import cn.thd.pojo.se.SeMapUser;
import cn.thd.pojo.se.SeUser;
import cn.thd.service.common.CommonService;
import cn.thd.service.se.SeService;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.thd.core.action.PubAction;
import com.thd.util.MyListUtils;
import com.thd.util.MyStringUtils;
import com.thd.util.MyTimerUtils;
import com.thd.util.StringUtil;


/**
 * 系统公共字典相关
 * file autogenerated by ThirdteenDevils's CodeGenUtil 
 */
public class CommonAction extends PubAction {
	
	@Resource
	private CommonService commonService;
	@Resource
	private SeService seService;
	
	private SysDicProcess  sysDicProcess = new SysDicProcess();
	private SysDicProcessStep  sysDicProcessStep = new SysDicProcessStep();
	private SeUser seUser = new SeUser();
	private SysTimerList  sysTimerList = new SysTimerList();
	
	private SysDicPub  sysDicPub = new SysDicPub();
	private SeMapUser seMapUser = new SeMapUser();
	private String projectId ;
	
	private SysDay  sysDay = new SysDay();
	//上传文件的名称
	private File file;
	private String fileFileName;
	private String fileContentType;
	//附件信息
	private SeAttach seAttach;
	private SysDicStandardDoc  sysDicStandardDoc = new SysDicStandardDoc();
	private SysDicFunction  sysDicFunction = new SysDicFunction();
	/**
	 *  用户选择器
	 *  url:/common/common!userSelector.do?seMapUser.relaTab=tab&seMapUser.tabKeyValue=1
	 */
	public String userSelector(){
		try{
			this.logger.info("userSelector()");
			if(StringUtil.isEmpty(seMapUser.getTabKeyValue())){
				throw new Exception("TabKeyValue can't be fount");
			}
			if(StringUtil.isEmpty(seMapUser.getRelaTab())){
				throw new Exception("RelaTab can't be fount");
			}
			this.setForwardPage("/pages/common/userSelector.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	
	
	
	public String userSelectorGetData(){
		try{
			this.logger.info("userSelectorGetData()");
			if(StringUtil.isEmpty(seMapUser.getTabKeyValue())){
				throw new Exception("TabKeyValue can't be fount");
			}
			if(StringUtil.isEmpty(seMapUser.getRelaTab())){
				throw new Exception("RelaTab can't be fount");
			}
			List l = this.commonService.queryMapUser(seMapUser.getRelaTab(),seMapUser.getTabKeyValue());
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + l.size() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 *  用户选择器 - 设置
	 *  url:/common/common!userSelectorForInit.do?ids=lwang,cwsha,gcun,jcui&cb=parent.setUser
	 */
	public String userSelectorForInit(){
		try{
			this.logger.info("userSelectorForInit()");
			
			this.setForwardPage("/pages/common/userSelectorForInit.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 *  用户选择器 - 设置 获取数据
	 *  url:/common/common!userSelectorForInitGetData.do
	 */
	public String userSelectorForInitGetData(){
		try{
			this.logger.info("userSelectorForInitGetData()");
			
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	
	/**
	 *  用户选择器
	 *  url:/common/common!userSelector.do?seMapUser.relaTab=tab&seMapUser.tabKeyValue=1
	 */
	public String saveUserMap(){
		try{
			this.logger.info("saveUserMap()");
			String r = this.commonService.saveMapUser(seMapUser.getRelaTab(), seMapUser.getTabKeyValue(), seMapUser.getUserId());
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	
	
	/**
	 *  系统公共字典列表展示界面
	 *  url:/common/common!sysDicPubList.do
	 */
	public String sysDicPubList(){
		try{
			this.logger.info("sysDicPubList()");
			this.setForwardPage("/pages/common/sysDicPubList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取系统公共字典列表数据
	 * url:/common/common!sysDicPubListGetDate.do
	 */
	public String sysDicPubListGetDate(){
		try{
			this.logger.info("sysDicPubListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("DIC_ID", this.getReq().getParameter("DIC_ID"));
			
			//
			map.put("DIC_CLASSIFY", this.getReq().getParameter("DIC_CLASSIFY"));
			//
			map.put("DIC_NAME", this.getReq().getParameter("DIC_NAME"));
			//
			map.put("DIC_DESC", this.getReq().getParameter("DIC_DESC"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			this.p.setCurrentPage(Integer.parseInt(this.getReq().getParameter("page")));
			this.p.setPageSize(Integer.parseInt(this.getReq().getParameter("rows")));
			
			List l = this.commonService.querySysDicPub(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新系统公共字典提交操作
	 * url:/common/common!sysDicPubFormSubmit.do
	 */
	public String sysDicPubFormSubmit(){
		try{
			this.logger.info("sysDicPubEditSubmit()");
			if("save".equals(this.getOperate())){
				this.commonService.saveSysDicPub(this.sysDicPub);
			}else{
				this.commonService.updateSysDicPub(this.sysDicPub);
			}			
			this.setScriptContent("alert('操作成功');getParent().reloadDg();window.close()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑系统公共字典界面
	 * url:/common/common!sysDicPubForm.do
	 */
	public String sysDicPubForm(){
		try{
			this.logger.info("sysDicPubForm()");
			if(this.sysDicPub.getDicId()!=null){
				sysDicPub = this.commonService.querySysDicPubById(sysDicPub.getDicId());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			this.setForwardPage("/pages/common/sysDicPubForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个系统公共字典对象操作
	 * url:/common/common!deleteSysDicPubById.do?sysDicPub.dicId=xxx
	 */
	public String deleteSysDicPubById(){
		try{
			this.logger.info("deleteSysDicPubById()");
			this.commonService.deleteSysDicPubById(sysDicPub.getDicId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除系统公共字典对象操作
	 * url:/common/common!deleteSysDicPubByIds.do?$ids=xxx
	 */
	public String deleteSysDicPubByIds(){
		try{
			this.logger.info("deleteSysDicPubByIds()");
			this.commonService.deleteSysDicPubByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	/**
	 * 获取字典内容 -- 配合easyui combobox使用
	 * url:/common/common!getDicJsonStr.do?sysDicPub.dicClassify=xxx
	 */
	public String getDicJsonStr(){
		try{
			this.logger.info("getDicJsonStr()");
			String jsonStr = this.commonService.queryDicForJson(this.getSysDicPub().getDicClassify());
			this.setMsg(jsonStr);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 获取用户字典内容(在岗人员) -- 配合easyui combobox使用
	 * url:/common/common!queryUserListJsonStr.do
	 */
	public String queryUserListJsonStr(){
		try{
			this.logger.info("getDicJsonStr()");
			this.p.setCurrentPage(0);
			List l = this.seService.queryProjectUser(this.getProjectId());
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			Map m = new HashMap();
			m.put("USER_ID", "");
			m.put("USER_NAME", "请选择人员");
			l.add(m);
			String listStr = gson.toJson(l);
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			this.setMsg(json.toString());
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	/**
	 * 获取用户字典内容(包括在岗人员和非在岗人员) -- 配合easyui combobox使用
	 * url:/common/common!queryUserListAllJsonStr.do
	 */
	public String queryUserListAllJsonStr(){
		try{
			this.logger.info("getDicJsonStr()");
			this.p.setCurrentPage(0);
			List l = this.seService.queryProjectUserForAll(this.getProjectId());
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			Map m = new HashMap();
			m.put("USER_ID", "");
			m.put("USER_NAME", "请选择人员");
			l.add(m);
			String listStr = gson.toJson(l);
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			this.setMsg(json.toString());
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	/**
	 * 获取系统字典内容 -- 配合easyui combobox使用
	 * url:/common/common!queryProjectListJsonStr.do
	 */
	public String queryProjectListJsonStr(){
		try{
			this.logger.info("getDicJsonStr()");
			List l = this.seService.querySeProjectOptions();
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			String listStr = gson.toJson(l);
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			this.setMsg(json.toString());
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 小小军团合战三国数据主页
	 * url:/common/common!xxjthzsg.do
	 */
	public String xxjthzsg(){
		try{
			this.logger.info("xxjthzsg()");
			this.setForwardPage("/pages/game/xxjthzsg/xxjthzsg.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	
	}
	/**
	 * xxjt hzsg
	 * url:/common/common!getXxjtHzsgData?soliderType=xxx
	 */
	public String getXxjtHzsgData(){
		try{
			this.logger.info("getXxjtHzsgData()");
			
			String bz = this.getReq().getParameter("soliderType");
			System.out.println("11111;1111111111111111");
			System.out.println(this.commonService);
			List l  = this.commonService.queryXxjtHzsgData(bz,this.getOrder());
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + l.size() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			this.setMsg(json.toString());
			return "ajax";
			
			
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	
	/**
	 * 获取字典内容 -- 配合easyui combobox使用
	 * url:/common/common!updatePwd.do
	 */
	public String updatePwd(){
		try{
			this.logger.info("getDicJsonStr()");
			String res = this.commonService.updatePwd(seUser.getUserAccount(), seUser.getUserPassword());
			this.setMsg(res);
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	

	/**
	 *  定时器列表列表展示界面
	 *  url:/common/common!sysTimerListList.do
	 */
	public String sysTimerListList(){
		try{
			this.logger.info("sysTimerListList()");
			this.setForwardPage("/pages/common/sysTimerListList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取定时器列表列表数据
	 * url:/common/common!sysTimerListListGetDate.do
	 */
	public String sysTimerListListGetDate(){
		try{
			this.logger.info("sysTimerListListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("TIMER_ID", this.getReq().getParameter("TIMER_ID"));
			
			//标识
			map.put("TIMER_CODE", this.getReq().getParameter("TIMER_CODE"));
			//所属组
			map.put("TIMER_GROUP", this.getReq().getParameter("TIMER_GROUP"));
			//名称
			map.put("TIMER_NAME", this.getReq().getParameter("TIMER_NAME"));
			//描述
			map.put("TIMER_DESC", this.getReq().getParameter("TIMER_DESC"));
			//类全名
			map.put("TIMER_CLASS_NAME", this.getReq().getParameter("TIMER_CLASS_NAME"));
			//执行计划
			map.put("EXECUTION_PLAN", this.getReq().getParameter("EXECUTION_PLAN"));
			//是否删除
			map.put("IS_DELETE", this.getReq().getParameter("IS_DELETE"));
			//创建时间
			map.put("CREATE_TIME", this.getReq().getParameter("CREATE_TIME"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			List l = this.commonService.querySysTimerList(this.map, this.p);
			List r = new ArrayList();
			MyTimerUtils timerUtils = MyTimerUtils.getInstance();
			if(MyListUtils.isNotEmpty(l)){
				for(Object obj : l){
					try{
						Map m = (Map)obj;
						String timerCode = m.get("TIMER_CODE").toString();
						String timerGroup = m.get("TIMER_GROUP").toString();
						m.put("RUN_STATE", timerUtils.getState(timerCode,timerGroup));
						r.add(m);
					}catch(Exception e){
						e.printStackTrace();
					}
					
				}
			}
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新定时器列表提交操作
	 * url:/common/common!sysTimerListFormSubmit.do
	 */
	public String sysTimerListFormSubmit(){
		try{
			this.logger.info("sysTimerListEditSubmit()");
			if("save".equals(this.getOperate())){
				this.commonService.saveSysTimerList(this.sysTimerList);
			}else{
				this.commonService.updateSysTimerList(this.sysTimerList);
			}			
			this.setScriptContent("alert('操作成功');getParent().reloadSysTimerListDg();window.close()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑定时器列表界面
	 * url:/common/common!sysTimerListForm.do
	 */
	public String sysTimerListForm(){
		try{
			this.logger.info("sysTimerListForm()");
			if(this.sysTimerList.getTimerId()!=null){
				sysTimerList = this.commonService.querySysTimerListById(sysTimerList.getTimerId());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			this.setForwardPage("/pages/common/sysTimerListForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个定时器列表对象操作
	 * url:/common/common!deleteSysTimerListById.do?sysTimerList.timerId=xxx
	 */
	public String deleteSysTimerListById(){
		try{
			this.logger.info("deleteSysTimerListById()");
			this.commonService.deleteSysTimerListById(sysTimerList.getTimerId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除定时器列表对象操作
	 * url:/common/common!deleteSysTimerListByIds.do?$ids=xxx
	 */
	public String deleteSysTimerListByIds(){
		try{
			this.logger.info("deleteSysTimerListByIds()");
			this.commonService.deleteSysTimerListByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 *  手工启动定时器
	 *  url:/common/common!startTimer.do
	 */
	public String startTimer(){
		try{
			this.logger.info("startTimer()");
			String r = this.commonService.startTimer(this.getId());
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 *  暂停定时器
	 *  url:/common/common!pauseTimer.do
	 */
	public String pauseTimer(){
		try{
			this.logger.info("pauseTimer()");
			String r = this.commonService.pauseTimer(this.getId());
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 *  执行一次定时任务
	 *  url:/common/common!runATimeTimer.do
	 */
	public String runATimeTimer(){
		try{
			this.logger.info("runATimeTimer()");
			String r = this.commonService.runATimeTimer(this.getId());
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	/**
	 *  重新加载某定时任务
	 *  url:/common/common!reloadTimer.do
	 */
	public String reloadTimer(){
		try{
			this.logger.info("reloadTimer()");
			String r = this.commonService.reloadTimer(this.getId());
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	/**
	 *  系统日历列表展示界面
	 *  url:/common/common!sysDayList.do
	 */
	public String sysDayList(){
		try{
			this.logger.info("sysDayList()");
			this.setForwardPage("/pages/common/sysDayList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取系统日历列表数据
	 * url:/common/common!sysDayListGetDate.do
	 */
	public String sysDayListGetDate(){
		try{
			this.logger.info("sysDayListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("ID", this.getReq().getParameter("ID"));
			
			//
			map.put("DAY", this.getReq().getParameter("DAY"));
			//
			map.put("STATUS", this.getReq().getParameter("STATUS"));
			map.put("YEAR", this.getReq().getParameter("YEAR"));
			map.put("MONTH", this.getReq().getParameter("MONTH"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			List l = this.commonService.querySysDay(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * ajax获取系统日历年份列表数据
	 * url:/common/common!sysDayYearListGetDate.do
	 */
	public String sysDayYearListGetDate(){
		try{
			this.logger.info("sysDayYearListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			
			List l = this.commonService.querySysDayYear(null);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 保存或更新系统日历提交操作
	 * url:/common/common!sysDayFormSubmit.do
	 */
	public String sysDayFormSubmit(){
		try{
			this.logger.info("sysDayEditSubmit()");
			if("save".equals(this.getOperate())){
				this.commonService.saveSysDay(this.sysDay);
			}else{
				this.commonService.updateSysDay(this.sysDay);
			}			
			this.setScriptContent("alert('操作成功');getParent().reloadSysDayDg();window.close()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑系统日历界面
	 * url:/common/common!sysDayForm.do
	 */
	public String sysDayForm(){
		try{
			this.logger.info("sysDayForm()");
			if(this.sysDay.getId()!=null){
				sysDay = this.commonService.querySysDayById(sysDay.getId());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			this.setForwardPage("/pages/common/sysDayForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个系统日历对象操作
	 * url:/common/common!deleteSysDayById.do?sysDay.id=xxx
	 */
	public String deleteSysDayById(){
		try{
			this.logger.info("deleteSysDayById()");
			this.commonService.deleteSysDayById(sysDay.getId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除系统日历对象操作
	 * url:/common/common!deleteSysDayByIds.do?$ids=xxx
	 */
	public String deleteSysDayByIds(){
		try{
			this.logger.info("deleteSysDayByIds()");
			this.commonService.deleteSysDayByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 初始化年份
	 * url:/common/common!initYearDay.do?year=xxx
	 */
	public String initYearDay(){
		try{
			this.logger.info("initYearDay()");
			String year = this.getReq().getParameter("year");
			String r = this.commonService.initYearDay(year);
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 删除年份自然日
	 * url:/common/common!deleteYear.do?year=xxx
	 */
	public String deleteYear(){
		try{
			this.logger.info("deleteYear()");
			String year = this.getReq().getParameter("year");
			String r = this.commonService.deleteYear(year);
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量转换自然日类型
	 * url:/common/common!changetypeOfDay.do?year=xxx
	 */
	public String changetypeOfDay(){
		try{
			this.logger.info("changetypeOfDay()");
			String r = this.commonService.changetypeOfDay(this.getIds());
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	/**
	 * 公共上传附件
	 * url:/common/common!commonUploaderBatch.do
	 */
	public String commonUploaderBatch(){
		try{
			this.logger.info("commonUploaderBatch()");
			this.setForwardPage("/pages/common/commonUploaderBatch.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 公共上传附件提交
	 * url:/common/common!commonUploaderSubmit.do
	 */
	public String commonUploaderSubmit(){
		try{
			this.logger.info("commonUploaderSubmit()");
			
//			System.out.println("id:" + this.getId() );
//			System.out.println("name:" + this.getFileName());
			FileUploadResult fur = new FileUploadResult();
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			try{
				//int i = 1/0;
//				System.out.println(this.getFile());
//				System.out.println(this.getFileFileName());
//				System.out.println(this.getFileContentType());
				
				fur.setFileId(String.valueOf(Math.random()));
				fur.setFileName(this.getFileFileName());
				fur.setFileSize(String.valueOf(this.getFile().length()));
				fur.setStatus("success");
				//this.setMsg("{\"error\":\"failure\"}");
				//int i = 1/0;
				System.out.println(this.getFileFileName());
				
				String projectPath = this.getReq().getRealPath("/");
				String savePath = projectPath + "attached" + File.separator + "commonUpload";
				SeAttach sa = this.commonService.uploadFile(file, savePath, this.getFileFileName(),  this.seAttach.getFkey(), this.seAttach.getFid());
				
				this.setMsg(gson.toJson(sa));
				System.out.println("----------------- " + sa);
				//this.setMsg("{\"status\":\"ok\"}");
				return "ajax";
			}catch(Exception e){
				e.printStackTrace();
				fur.setStatus("failure");
				fur.setError(e.getMessage());
				this.setMsg(gson.toJson(fur));
				return "ajax";
			}
			
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 查询公共附件
	 * url:/common/common!commondownload.do
	 */
	public String commondownload(){
		try{
			this.logger.info("commondownload()");
			commonService.downloadFile(this.getId(), this.getResp(),this.getReq());
			return null;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 查询公共附件
	 * url:/common/common!commonFileList.do
	 */
	public String commonFileList(){
		try{
			this.logger.info("commonFileList()");
			this.setForwardPage("/pages/common/commonFileList.jsp");
			List fileList = this.commonService.queryCommonFileList(this.seAttach.getFkey(), this.seAttach.getFid());
			this.getRequest().put("fileList", fileList);
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除公共附件
	 * url:/common/common!deleteCommonFileList.do?id=xxx
	 */
	public String deleteCommonFileList(){
		try{
			this.logger.info("deleteCommonFileList()");
			this.setForwardPage("/pages/common/commonFileList.jsp");
			String r = this.commonService.deleteCommonAttach(this.getId());
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	

	/**
	 *  标准文档字典列表展示界面
	 *  url:/common/common!sysDicStandardDocList.do
	 */
	public String sysDicStandardDocList(){
		try{
			this.logger.info("sysDicStandardDocList()");
			this.setForwardPage("/pages/common/sysDicStandardDocList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取标准文档字典列表数据
	 * url:/common/common!sysDicStandardDocListGetDate.do
	 */
	public String sysDicStandardDocListGetDate(){
		try{
			this.logger.info("sysDicStandardDocListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("DOC_CODE", this.getReq().getParameter("DOC_CODE"));
			
			//标准文档名称
			map.put("DOC_NAME", this.getReq().getParameter("DOC_NAME"));
			//所属项目阶段
			map.put("DOC_PHASES", this.getReq().getParameter("DOC_PHASES"));
			//标准文档说明
			map.put("DOC_DESC", this.getReq().getParameter("DOC_DESC"));
			//标准文档模板
			map.put("DOC_BLANK_TEMPLATE", this.getReq().getParameter("DOC_BLANK_TEMPLATE"));
			//标准文档样例
			map.put("DOC_EXAMPLE", this.getReq().getParameter("DOC_EXAMPLE"));
			//是否删除
			map.put("IS_DELETE", this.getReq().getParameter("IS_DELETE"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			
			List l = this.commonService.querySysDicStandardDoc(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新标准文档字典提交操作
	 * url:/common/common!sysDicStandardDocFormSubmit.do
	 */
	public String sysDicStandardDocFormSubmit(){
		try{
			this.logger.info("sysDicStandardDocEditSubmit()");
			if("save".equals(this.getOperate())){
				this.commonService.saveSysDicStandardDoc(this.sysDicStandardDoc);
			}else{
				this.commonService.updateSysDicStandardDoc(this.sysDicStandardDoc);
			}			
			this.setScriptContent("alert('操作成功');getParent().reloadSysDicStandardDocDg();window.close()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑标准文档字典界面
	 * url:/common/common!sysDicStandardDocForm.do
	 */
	public String sysDicStandardDocForm(){
		try{
			this.logger.info("sysDicStandardDocForm()");
			if(this.sysDicStandardDoc.getDocCode()!=null){
				sysDicStandardDoc = this.commonService.querySysDicStandardDocById(sysDicStandardDoc.getDocCode());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			
			List<Option> projectPhaseList = commonService.queryDicForOption("project_phase");
			this.getRequest().put("projectPhase", projectPhaseList);
			
			this.setForwardPage("/pages/common/sysDicStandardDocForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个标准文档字典对象操作
	 * url:/common/common!deleteSysDicStandardDocById.do?sysDicStandardDoc.docCode=xxx
	 */
	public String deleteSysDicStandardDocById(){
		try{
			this.logger.info("deleteSysDicStandardDocById()");
			this.commonService.deleteSysDicStandardDocById(sysDicStandardDoc.getDocCode());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除标准文档字典对象操作
	 * url:/common/common!deleteSysDicStandardDocByIds.do?$ids=xxx
	 */
	public String deleteSysDicStandardDocByIds(){
		try{
			this.logger.info("deleteSysDicStandardDocByIds()");
			this.commonService.deleteSysDicStandardDocByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	
	
	
	
	/**
	 *  流程信息列表展示界面
	 *  url:/common/common!sysDicProcessList.do
	 */
	public String sysDicProcessList(){
		try{
			this.logger.info("sysDicProcessList()");
			this.setForwardPage("/pages/common/sysDicProcessList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取流程信息列表数据
	 * url:/common/common!sysDicProcessListGetDate.do
	 */
	public String sysDicProcessListGetDate(){
		try{
			this.logger.info("sysDicProcessListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("PROCESS_ID", this.getReq().getParameter("PROCESS_ID"));
			
			//流程KEY
			map.put("PROCESS_KEY", this.getReq().getParameter("PROCESS_KEY"));
			//流程名称
			map.put("PROCESS_NAME", this.getReq().getParameter("PROCESS_NAME"));
			//部署ID
			map.put("PROCESS_DEPLOY_ID", this.getReq().getParameter("PROCESS_DEPLOY_ID"));
			//是否删除
			map.put("IS_DELETE", this.getReq().getParameter("IS_DELETE"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			this.p.setCurrentPage(Integer.parseInt(this.getReq().getParameter("page")));
			this.p.setPageSize(Integer.parseInt(this.getReq().getParameter("rows")));
			List l = this.commonService.querySysDicProcess(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新流程信息提交操作
	 * url:/common/common!sysDicProcessFormSubmit.do
	 */
	public String sysDicProcessFormSubmit(){
		try{
			this.logger.info("sysDicProcessEditSubmit()");
			if("save".equals(this.getOperate())){
				this.commonService.saveSysDicProcess(this.sysDicProcess);
			}else{
				this.commonService.updateSysDicProcess(this.sysDicProcess);
			}			
			this.setScriptContent("alert('操作成功');getParent().reloadSysDicProcessDg();window.close()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑流程信息界面
	 * url:/common/common!sysDicProcessForm.do
	 */
	public String sysDicProcessForm(){
		try{
			this.logger.info("sysDicProcessForm()");
			if(this.sysDicProcess.getProcessId()!=null){
				sysDicProcess = this.commonService.querySysDicProcessById(sysDicProcess.getProcessId());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			this.setForwardPage("/pages/common/sysDicProcessForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个流程信息对象操作
	 * url:/common/common!deleteSysDicProcessById.do?sysDicProcess.processId=xxx
	 */
	public String deleteSysDicProcessById(){
		try{
			this.logger.info("deleteSysDicProcessById()");
			this.commonService.deleteSysDicProcessById(sysDicProcess.getProcessId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除流程信息对象操作
	 * url:/common/common!deleteSysDicProcessByIds.do?$ids=xxx
	 */
	public String deleteSysDicProcessByIds(){
		try{
			this.logger.info("deleteSysDicProcessByIds()");
			this.commonService.deleteSysDicProcessByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	
	/**
	 *  流程信息列表展示界面
	 *  url:/common/common!sysDicProcessStepList.do
	 */
	public String sysDicProcessStepList(){
		try{
			this.logger.info("sysDicProcessStepList()");
			this.setForwardPage("/pages/common/sysDicProcessStepList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取流程信息列表数据
	 * url:/common/common!sysDicProcessStepListGetDate.do
	 */
	public String sysDicProcessStepListGetDate(){
		try{
			this.logger.info("sysDicProcessStepListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("STEP_ID", this.getReq().getParameter("STEP_ID"));
			
			//所属流程ID
			map.put("PROCESS_ID", this.getReq().getParameter("PROCESS_ID"));
			//步骤CODE
			map.put("STEP_CODE", this.getReq().getParameter("STEP_CODE"));
			//步骤名称
			map.put("STEP_NAME", this.getReq().getParameter("STEP_NAME"));
			//步骤序号
			map.put("STEP_ORDER", this.getReq().getParameter("STEP_ORDER"));
			//是否第一步骤
			map.put("IS_FIRST_STEP", this.getReq().getParameter("IS_FIRST_STEP"));
			//是否最后一个步骤
			map.put("IS_LAST_STEP", this.getReq().getParameter("IS_LAST_STEP"));
			//是否删除
			map.put("IS_DELETE", this.getReq().getParameter("IS_DELETE"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			this.p.setCurrentPage(Integer.parseInt(this.getReq().getParameter("page")));
			this.p.setPageSize(Integer.parseInt(this.getReq().getParameter("rows")));
			List l = this.commonService.querySysDicProcessStep(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新流程信息提交操作
	 * url:/common/common!sysDicProcessStepFormSubmit.do
	 */
	public String sysDicProcessStepFormSubmit(){
		try{
			this.logger.info("sysDicProcessStepEditSubmit()");
			if("save".equals(this.getOperate())){
				this.commonService.saveSysDicProcessStep(this.sysDicProcessStep);
			}else{
				this.commonService.updateSysDicProcessStep(this.sysDicProcessStep);
			}			
			this.setScriptContent("alert('操作成功');getParent().reloadSysDicProcessStepDg();window.close()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑流程信息界面
	 * url:/common/common!sysDicProcessStepForm.do
	 */
	public String sysDicProcessStepForm(){
		try{
			this.logger.info("sysDicProcessStepForm()");
			if(this.sysDicProcessStep.getStepId()!=null){
				sysDicProcessStep = this.commonService.querySysDicProcessStepById(sysDicProcessStep.getStepId());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			this.setForwardPage("/pages/common/sysDicProcessStepForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个流程信息对象操作
	 * url:/common/common!deleteSysDicProcessStepById.do?sysDicProcessStep.stepId=xxx
	 */
	public String deleteSysDicProcessStepById(){
		try{
			this.logger.info("deleteSysDicProcessStepById()");
			this.commonService.deleteSysDicProcessStepById(sysDicProcessStep.getStepId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除流程信息对象操作
	 * url:/common/common!deleteSysDicProcessStepByIds.do?$ids=xxx
	 */
	public String deleteSysDicProcessStepByIds(){
		try{
			this.logger.info("deleteSysDicProcessStepByIds()");
			this.commonService.deleteSysDicProcessStepByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	/**
	 * 同步流程
	 * url:/common/common!syncProcess.do?$id=xxx
	 */
	public String syncProcess(){
		try{
			this.logger.info("syncProcess()");
			String r = this.commonService.syncProcess(this.getId());
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 *  功能字典列表展示界面
	 *  url:/common/common!sysDicFunctionList.do
	 */
	public String sysDicFunctionList(){
		try{
			this.logger.info("sysDicFunctionList()");
			this.setForwardPage("/pages/common/sysDicFunctionList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取功能字典列表数据
	 * url:/common/common!sysDicFunctionListGetDate.do
	 */
	public String sysDicFunctionListGetDate(){
		try{
			this.logger.info("sysDicFunctionListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("FUN_ID", this.getReq().getParameter("FUN_ID"));
			
			//功能名称
			map.put("FUN_NAME", this.getReq().getParameter("FUN_NAME"));
			//功能URL
			map.put("FUN_URL", this.getReq().getParameter("FUN_URL"));
			//功能描述
			map.put("FUN_DESC", this.getReq().getParameter("FUN_DESC"));
			//是否有效
			map.put("IS_VALID", this.getReq().getParameter("IS_VALID"));
			//是否删除
			map.put("IS_DELETE", this.getReq().getParameter("IS_DELETE"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			List l = this.commonService.querySysDicFunction(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新功能字典提交操作
	 * url:/common/common!sysDicFunctionFormSubmit.do
	 */
	public String sysDicFunctionFormSubmit(){
		try{
			this.logger.info("sysDicFunctionEditSubmit()");
			if("save".equals(this.getOperate())){
				this.commonService.saveSysDicFunction(this.sysDicFunction);
			}else{
				this.commonService.updateSysDicFunction(this.sysDicFunction);
			}			
			this.setScriptContent("alert('操作成功');getParent().reloadSysDicFunctionDg();window.close()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑功能字典界面
	 * url:/common/common!sysDicFunctionForm.do
	 */
	public String sysDicFunctionForm(){
		try{
			this.logger.info("sysDicFunctionForm()");
			if(this.sysDicFunction.getFunId()!=null){
				sysDicFunction = this.commonService.querySysDicFunctionById(sysDicFunction.getFunId());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			this.setForwardPage("/pages/common/sysDicFunctionForm.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个功能字典对象操作
	 * url:/common/common!deleteSysDicFunctionById.do?sysDicFunction.funId=xxx
	 */
	public String deleteSysDicFunctionById(){
		try{
			this.logger.info("deleteSysDicFunctionById()");
			this.commonService.deleteSysDicFunctionById(sysDicFunction.getFunId());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除功能字典对象操作
	 * url:/common/common!deleteSysDicFunctionByIds.do?$ids=xxx
	 */
	public String deleteSysDicFunctionByIds(){
		try{
			this.logger.info("deleteSysDicFunctionByIds()");
			this.commonService.deleteSysDicFunctionByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	
	
	
	/**
	 *  功能字典设置
	 *  url:/common/common!sysDicFunctionSetting.do
	 */
	public String sysDicFunctionSetting(){
		try{
			this.logger.info("sysDicFunctionSetting()");
			String classify = this.getReq().getParameter("classify");
			this.getReq().setAttribute("classify", classify);
			this.setForwardPage("/pages/common/sysDicFunctionSetting.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 *  已选择功能列表
	 *  url:/common/common!querySelectedFunGetData.do
	 */
	public String querySelectedFunGetData(){
		try{
			this.logger.info("querySelectedFunGetData()");
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			
			
			String classify = this.getReq().getParameter("classify");
			List l = this.commonService.querySelectedFun(this.getId(), classify);
			
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
			
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 *  已选择功能列表
	 *  url:/common/common!saveSelectedFun.do
	 */
	public String saveSelectedFun(){
		try{
			this.logger.info("saveSelectedFun()");
			
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			
			String classify = this.getReq().getParameter("classify");
			String json = this.getJson();
			System.out.println(json);
			
			
			
			List<Map<String,String>> list = gson.fromJson(json, List.class);
			System.out.println(list);
			
			
			this.commonService.saveSelectedFun(this.getId(), classify, list);
			this.setMsg(StaticVar.STATUS_SUCCESS);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	
	
	public void setSysDicFunction( SysDicFunction sysDicFunction) {
		this.sysDicFunction = sysDicFunction;
	}
	public SysDicFunction getSysDicFunction() {
		return sysDicFunction;
	}
	
	public void setSysDicProcessStep( SysDicProcessStep sysDicProcessStep) {
		this.sysDicProcessStep = sysDicProcessStep;
	}
	public SysDicProcessStep getSysDicProcessStep() {
		return sysDicProcessStep;
	}
	
	
	
	
	public void setSysDicProcess( SysDicProcess sysDicProcess) {
		this.sysDicProcess = sysDicProcess;
	}
	public SysDicProcess getSysDicProcess() {
		return sysDicProcess;
	}
	
	
	
	
	
	public void setSysDicStandardDoc( SysDicStandardDoc sysDicStandardDoc) {
		this.sysDicStandardDoc = sysDicStandardDoc;
	}
	public SysDicStandardDoc getSysDicStandardDoc() {
		return sysDicStandardDoc;
	}
	
	public void setSysDay( SysDay sysDay) {
		this.sysDay = sysDay;
	}
	public SysDay getSysDay() {
		return sysDay;
	}
	public void setSysTimerList( SysTimerList sysTimerList) {
		this.sysTimerList = sysTimerList;
	}
	public SysTimerList getSysTimerList() {
		return sysTimerList;
	}
	public void setSysDicPub( SysDicPub sysDicPub) {
		this.sysDicPub = sysDicPub;
	}
	public SysDicPub getSysDicPub() {
		return sysDicPub;
	}
	public SeMapUser getSeMapUser() {
		return seMapUser;
	}
	public void setSeMapUser(SeMapUser seMapUser) {
		this.seMapUser = seMapUser;
	}
	public SeUser getSeUser() {
		return seUser;
	}
	public void setSeUser(SeUser seUser) {
		this.seUser = seUser;
	}
	public String getProjectId() {
		return projectId;
	}
	public void setProjectId(String projectId) {
		this.projectId = projectId;
	}
	public File getFile() {
		return file;
	}
	public void setFile(File file) {
		this.file = file;
	}
	public String getFileFileName() {
		return fileFileName;
	}
	public void setFileFileName(String fileFileName) {
		this.fileFileName = fileFileName;
	}
	public String getFileContentType() {
		return fileContentType;
	}
	public void setFileContentType(String fileContentType) {
		this.fileContentType = fileContentType;
	}
	public SeAttach getSeAttach() {
		return seAttach;
	}
	public void setSeAttach(SeAttach seAttach) {
		this.seAttach = seAttach;
	}
	
}
