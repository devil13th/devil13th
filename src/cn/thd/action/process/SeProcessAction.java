package cn.thd.action.process;


import java.io.InputStream;
import java.io.OutputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.activiti.engine.history.HistoricProcessInstance;
import org.activiti.engine.history.HistoricTaskInstance;
import org.activiti.engine.task.Task;
import org.springframework.web.context.ContextLoader;
import org.springframework.web.context.WebApplicationContext;

import cn.thd.bean.LoginUserInfo;
import cn.thd.bean.Option;
import cn.thd.bean.ProcessMethodBean;
import cn.thd.bean.ProcessStartInfo;
import cn.thd.bean.StaticVar;
import cn.thd.dto.AjaxReturnBean;
import cn.thd.pojo.common.SysDicProcess;
import cn.thd.pojo.common.SysDicProcessStep;
import cn.thd.pojo.process.SeProcTask;
import cn.thd.pojo.process.SeWorkList;
import cn.thd.service.common.CommonService;
import cn.thd.service.process.SeProcessService;
import cn.thd.service.se.SeRequirementTraceService;
import cn.thd.service.se.SeService;
import cn.thd.service.sys.SysService;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.thd.core.action.PubAction;
import com.thd.util.MyActivitiUtil;
import com.thd.util.MyDateUtils;
import com.thd.util.MyStringUtils;


/**
 * 流程相关
 * file autogenerated by ThirdteenDevils's CodeGenUtil 
 */
public class SeProcessAction extends PubAction {
	@Resource
	private SeService seService;
	@Resource
	private SeRequirementTraceService seRequirementTraceService;
	@Resource
	private MyActivitiUtil myActivitiUtil;
	@Resource
	private SysService sysService;
	@Resource
	private CommonService commonService;
	@Resource
	private SeProcessService seProcessService;
	
	//待办ID
	private String taskId;
	//业务主键
	private String bkey;
	//jobno
	private String jobno;
	//流程实例ID
	private String procInsId;
	//流程发起人
	private String startUser;
	//任务流程
	private SeProcTask seProcTask = new SeProcTask();
	//流程操作人
	private String stepOperator ;
	//流程变量json字符串
	private String processVarStr;
	
	
	/**
	 * 公共开启流程界面
	 * url : /seProcess/seProcess!startProcess.do
	 * Method Description : ########
	 * @return
	 */
	public String startProcess(){
		try{
			this.logger.info("startTaskProcess()");
			
			String key = this.getReq().getParameter("key");
			String startUser = this.getReq().getParameter("startUser");
			
			if(MyStringUtils.isEmpty(key)){
				throw new Exception("请选择流程");
			}
			if(MyStringUtils.isEmpty(startUser)){
				if(this.getSess().getAttribute("loginUserInfo") != null){
					LoginUserInfo loginUserInfo = (LoginUserInfo)this.getSess().getAttribute("loginUserInfo");
					startUser = loginUserInfo.getAccount();
				}
			}
			if(MyStringUtils.isEmpty(startUser)){
				throw new Exception("请选择流程开启人");
			}
			
			List<Option> userList = commonService.queryUserForOptionKV();
			this.getRequest().put("userList", userList);
			
			ProcessStartInfo processStartInfo = new ProcessStartInfo();
			String yyyy = MyDateUtils.toString(new Date(), "yyyy");
			System.out.println(yyyy);
			processStartInfo.setiJobnoKey(yyyy+"TASK");
			processStartInfo.setiProcKey(key);
			
			Map procVar = new HashMap();
			//TODO assigner 是taskProcess流程第一步,后续要修改成统一的starter
			procVar.put("assigner", startUser);
			procVar.put("starter", startUser);
			processStartInfo.setiProcVar(procVar);
			processStartInfo.setiStartUser(startUser);
			
			//this.seProcessService.startTaskProcess(processStartInfo);
			ProcessMethodBean pmb = this.seProcessService.startJob(processStartInfo);
			
			if(!StaticVar.STATUS_SUCCESS.equals(pmb.getStatus())){
				throw new Exception(pmb.getMessage());
			}
			Task task = this.myActivitiUtil.getTaskService().createTaskQuery().taskId(processStartInfo.getoTaskId()).singleResult();
			
//			String jobno = this.sysService.createNo("THD");
//			Map processVar = new HashMap();
//			processVar.put("assigner", startUser);
//			this.myActivitiUtil.runtimeService.startProcessInstanceByKey(key, jobno, processVar);
			System.out.println(task.getFormKey());
			
			//this.setUrl(task.getFormKey()+"?jobno=" + processStartInfo.getoJobno() + "&stepCode=" + pmb.getStepCode() + "&procInsId=" + processStartInfo.getProcInsId() + "&taskId=" + task.getId() );
			this.setUrl(task.getFormKey()+"?jobno=" + processStartInfo.getoJobno() + "&stepCode=" + pmb.getStepCode());
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 流程代办公共外框框架
	 * url : /seProcess/seProcess!commonTodo!stepBlank.do?taskId=92532&jobno=2018TASK00002&stepId=2c988e8b60bfecfe0160c0523d170003
	 * Method Description : ########
	 * @return
	 */
	public String commonTodo(){
		try{
			this.logger.info("commonTodo()");
			LoginUserInfo loginUserInfo = sysService.getLoginUserInfoFromCookie(this.getReq());
			
			ProcessMethodBean pmb = new ProcessMethodBean();
			
			String stepCode = this.getReq().getParameter("stepCode");
			
			if(MyStringUtils.isEmpty(stepCode) || MyStringUtils.isEmpty(this.getJobno())){
				throw new Exception(" 未设置业务主键和步骤CODE ");
			}
			
			pmb.setJobno(this.getJobno());
			pmb.setStepCode(stepCode);
			pmb.setOperator(loginUserInfo.getSeUser().getUserId());
			
			//流程公共信息
			this.seProcessService.dealProcessMethodBean(pmb);
			this.getRequest().put("pmb", pmb);
			//是否可编辑    如果参数是0则不可编辑否则根据各个流程实际情况查看是否可编辑
			String ce = this.getReq().getParameter("ce");
			if(StaticVar.Y.equals(ce) || MyStringUtils.isEmpty(ce)){
				ce = pmb.getHasAuth();
			}else{
				ce = StaticVar.N;
			}
			this.getRequest().put("ce",ce);
			//工作信息
			SeWorkList seWorkList = this.seProcessService.querySeWorkListByJobno(pmb.getJobno());
			this.getRequest().put("seWorkList", seWorkList);
			
			//步骤信息
			SysDicProcessStep step = this.seProcessService.querySysDicProcessStepByStepCode(pmb.getStepCode());
			this.getRequest().put("step", step);
			
			//流程信息
			SysDicProcess process = this.seProcessService.querySysDicProcessByProcessKey(seWorkList.getWorkType());
			this.getRequest().put("process", process);
			
			
			//功能菜单查询
			List funList = this.commonService.queryFunByTabidAndClassify(StaticVar.FUNCTIONCLASSIFY_SYSDICPROCESSSTEP,pmb.getStepId());
			this.getRequest().put("funList", funList);
			this.setForwardPage("/pages/process/commonTodo.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 流程代办空白页
	 * url : /seProcess/seProcess!stepBlank.do?taskId=92532&jobno=2018TASK00002&stepId=2c988e8b60bfecfe0160c0523d170003
	 * Method Description : ########
	 * @return
	 */
	public String stepBlank(){
		try{
			this.logger.info("stepBlank()");
			LoginUserInfo loginUserInfo = sysService.getLoginUserInfoFromCookie(this.getReq());
			
			ProcessMethodBean pmb = new ProcessMethodBean();
			
			String stepCode = this.getReq().getParameter("stepCode");
			
			if(MyStringUtils.isEmpty(stepCode) || MyStringUtils.isEmpty(this.getJobno())){
				throw new Exception(" 为设置业务主键和步骤CODE ");
			}
			
			pmb.setJobno(this.getJobno());
			pmb.setStepCode(stepCode);
			pmb.setOperator(loginUserInfo.getSeUser().getUserId());
			
			//流程公共信息
			this.seProcessService.dealProcessMethodBean(pmb);
			this.getRequest().put("pmb", pmb);
			
			Task task = myActivitiUtil.getTaskService().createTaskQuery().taskId(pmb.getTaskId()).singleResult();
			//工作信息
			SeWorkList swl = this.seProcessService.querySeWorkListByJobno(pmb.getJobno());
			this.getRequest().put("seWorkList", swl);
			//流程信息
			SysDicProcess process = this.seProcessService.querySysDicProcessByProcessKey(swl.getWorkType());
			this.getRequest().put("process", process);
			//步骤信息
			SysDicProcessStep step = this.seProcessService.querySysDicProcessStepByStepCode(task.getTaskDefinitionKey());
			this.getRequest().put("step", step);
			//流程变量
			Map piVar = myActivitiUtil.getVariableForProcessInstance(task.getProcessInstanceId());
			this.getRequest().put("processProcessVar", piVar);
			
			//是否可编辑    如果参数是0则不可编辑否则根据各个流程实际情况查看是否可编辑
			String ce = this.getReq().getParameter("ce");
			if(StaticVar.Y.equals(ce)){
				ce = pmb.getHasAuth();
			}else{
				ce = StaticVar.N;
			}
			this.getRequest().put("ce",ce);
			this.setForwardPage("/pages/process/stepBlank.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	

	/**
	 * 公共上一步、下一步、关闭按钮界面
	 * url :  /seProcess/seProcess!commonBton.do?taskId=xx&jobno=xx&stepId=xx
	 * Method Description : ########
	 * @return
	 */
	public String commonBton(){
		try{
			this.logger.info("commonBton()");
			
			this.initStaticVarObj();
			
			LoginUserInfo loginUserInfo = sysService.getLoginUserInfoFromCookie(this.getReq());
			ProcessMethodBean pmb = new ProcessMethodBean();
			String stepCode = this.getReq().getParameter("stepCode");
			if(MyStringUtils.isEmpty(stepCode) || MyStringUtils.isEmpty(this.getJobno())){
				throw new Exception(" 为设置业务主键和步骤CODE ");
			}
			pmb.setJobno(this.getJobno());
			pmb.setStepCode(stepCode);
			pmb.setOperator(loginUserInfo.getSeUser().getUserId());
			//流程公共信息
			this.seProcessService.dealProcessMethodBean(pmb);
			this.getRequest().put("pmb", pmb);
			
			SysDicProcessStep step = this.commonService.querySysDicProcessStepById(pmb.getStepId());
			this.getRequest().put("step",step);
			
			this.setForwardPage("/pages/process/commonBton.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	/**
	 * 粒子操作 - 流程扭转
	 * url : /seProcess/seProcess!commonNextStep.do?taskId=xxx
	 * Method Description : ########
	 * @return
	 */
	public String commonNextStep(){
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
		AjaxReturnBean arb = new AjaxReturnBean();
		arb.setStatus(StaticVar.STATUS_FAILURE);
		try{
			this.logger.info("commonNextStep()");
			
			
			LoginUserInfo loginUserInfo = sysService.getLoginUserInfoFromCookie(this.getReq());
			ProcessMethodBean pmb = new ProcessMethodBean();
			String stepCode = this.getReq().getParameter("stepCode");
			if(MyStringUtils.isEmpty(stepCode) || MyStringUtils.isEmpty(this.getJobno())){
				throw new Exception(" 未设置业务主键和步骤CODE ");
			}
			pmb.setJobno(this.getJobno());
			pmb.setStepCode(stepCode);
			pmb.setOperator(loginUserInfo.getSeUser().getUserId());
			//流程公共信息
			this.seProcessService.dealProcessMethodBean(pmb);
			
			
			this.seProcessService.nextStep(pmb);
			
			
			if(pmb.getStatus().equals(StaticVar.STATUS_SUCCESS)){ // 验证成功
				arb.setStatus(StaticVar.STATUS_SUCCESS);
			}else{ //验证失败
				arb.setMessage(pmb.getMessage());
			}
			
			/*
			String r = this.seProcessService.claimAndComplateTask(this.getTaskId(), pmb.getiOperator(), null);
			
			if(StaticVar.STATUS_SUCCESS.equals(r)){
				arb.setStatus(StaticVar.STATUS_SUCCESS);
			}else{
				arb.setMessage(r);
			}*/
		}catch(Exception e){
			e.printStackTrace();
			arb.setMessage(e.getMessage());
		}
		this.setMsg(gson.toJson(arb));
		return "ajax";
	}
	
	/**
	 * 粒子操作 - 流程扭转
	 * url : /seProcess/seProcess!commonCloseProcess.do?taskId=xxx
	 * Method Description : ########
	 * @return
	 */
	public String commonCloseProcess(){
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
		AjaxReturnBean arb = new AjaxReturnBean();
		arb.setStatus(StaticVar.STATUS_FAILURE);
		try{
			this.logger.info("commonCloseProcess()");
			
			LoginUserInfo loginUserInfo = sysService.getLoginUserInfoFromCookie(this.getReq());
			ProcessMethodBean pmb = new ProcessMethodBean();
			String stepCode = this.getReq().getParameter("stepCode");
			if(MyStringUtils.isEmpty(stepCode) || MyStringUtils.isEmpty(this.getJobno())){
				throw new Exception(" 为设置业务主键和步骤CODE ");
			}
			pmb.setJobno(this.getJobno());
			pmb.setStepCode(stepCode);
			pmb.setOperator(loginUserInfo.getSeUser().getUserId());
			//流程公共信息
			this.seProcessService.dealProcessMethodBean(pmb);
			
			this.seProcessService.closeProcess(pmb);
			
			
			if(pmb.getStatus().equals(StaticVar.STATUS_SUCCESS)){
				arb.setStatus(StaticVar.STATUS_SUCCESS);
			}else{
				arb.setMessage(pmb.getMessage());
			}
		}catch(Exception e){
			e.printStackTrace();
			arb.setMessage(e.getMessage());
		}
		this.setMsg(gson.toJson(arb));
		return "ajax";
	}
	
	/**
	 * 自定义流程变量设置
	 * url :  /seProcess/seProcess!customSetProcessInstVar.do
	 * Method Description : ########
	 * @return
	 */
	public String customSetProcessInstVar(){
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
		AjaxReturnBean arb = new AjaxReturnBean();
		arb.setStatus(StaticVar.STATUS_FAILURE);
		try{
			this.logger.info("customSetProcessInstVar()");
			LoginUserInfo loginUserInfo = sysService.getLoginUserInfoFromCookie(this.getReq());
			
			String k = this.getReq().getParameter("varKey");
			String v = this.getReq().getParameter("varValue");
			
			if(MyStringUtils.isEmpty(k)){
				throw new Exception(" 未找到流程实例变量名称 ");
			}
			if(MyStringUtils.isEmpty(v)){
				throw new Exception(" 未找到流程实例变量值 ");
			}
			if(MyStringUtils.isEmpty(this.getProcInsId())){
				throw new Exception(" 未找到流程实例ID");
			}
			Map m = new HashMap();
			m.put(k,v);
			this.myActivitiUtil.addVarableToProcessInstance(m, this.getProcInsId());
			arb.setStatus(StaticVar.STATUS_SUCCESS);
		}catch(Exception e){
			e.printStackTrace();
			arb.setMessage(e.getMessage());
		}
		
		this.setMsg(gson.toJson(arb));
		return "ajax";
	}
	
	
	
	/**
	 * 粒子方法 - 流程扭转验证
	 * url :  /seProcess/seProcess!serverValidate.do
	 * Method Description : ########
	 * @return
	 */
	public String serverValidate(){
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
		AjaxReturnBean arb = new AjaxReturnBean();
		arb.setStatus(StaticVar.STATUS_FAILURE);
		try{
			this.logger.info("serverValidate()");
			
			LoginUserInfo loginUserInfo = sysService.getLoginUserInfoFromCookie(this.getReq());
			ProcessMethodBean pmb = new ProcessMethodBean();
			String stepCode = this.getReq().getParameter("stepCode");
			if(MyStringUtils.isEmpty(stepCode) || MyStringUtils.isEmpty(this.getJobno())){
				throw new Exception(" 为设置业务主键和步骤CODE ");
			}
			pmb.setJobno(this.getJobno());
			pmb.setStepCode(stepCode);
			pmb.setOperator(loginUserInfo.getSeUser().getUserId());
			//流程公共信息
			this.seProcessService.dealProcessMethodBean(pmb);
			this.seProcessService.validate(pmb);
			
			if(pmb.getStatus().equals(StaticVar.STATUS_SUCCESS)){ // 验证成功
				arb.setStatus(StaticVar.STATUS_SUCCESS);
			}else{ //验证失败
				arb.setMessage(pmb.getMessage());
			}
			
		}catch(Exception e){
			e.printStackTrace();
			arb.setMessage(e.getMessage());
		}
		
		this.setMsg(gson.toJson(arb));
		return "ajax";
	}
	
	/**
	 * 粒子方法 - 保存流程变量
	 * url :  /seProcess/seProcess!saveProcInstVar.do
	 * Method Description : ########
	 * @return
	 */
	public String saveProcInstVar(){
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
		AjaxReturnBean arb = new AjaxReturnBean();
		arb.setStatus(StaticVar.STATUS_FAILURE);
		try{
			this.logger.info("saveProcInstVar()");
			
			LoginUserInfo loginUserInfo = sysService.getLoginUserInfoFromCookie(this.getReq());
			ProcessMethodBean pmb = new ProcessMethodBean();
			String stepCode = this.getReq().getParameter("stepCode");
			if(MyStringUtils.isEmpty(stepCode) || MyStringUtils.isEmpty(this.getJobno())){
				throw new Exception(" 为设置业务主键和步骤CODE ");
			}
			pmb.setJobno(this.getJobno());
			pmb.setStepCode(stepCode);
			pmb.setOperator(loginUserInfo.getSeUser().getUserId());
			//流程公共信息
			this.seProcessService.dealProcessMethodBean(pmb);
			
			this.seProcessService.setProcInstVar(pmb);
			
			if(pmb.getStatus().equals(StaticVar.STATUS_SUCCESS)){ // 流程变量设置成功
				arb.setStatus(StaticVar.STATUS_SUCCESS);
			}else{ //流程变量设置失败
				arb.setMessage(pmb.getMessage());
			}
			
		}catch(Exception e){
			e.printStackTrace();
			arb.setMessage(e.getMessage());
		}
		
		this.setMsg(gson.toJson(arb));
		return "ajax";
	}
	
	/**
	 * 开启任务流程
	 * url : /seProcess/seProcess!startTaskProcess.do
	 * Method Description : ########
	 * @return
	 */
	public String startTaskProcess(){
		try{
			this.logger.info("startTaskProcess()");
			
			String key = this.getReq().getParameter("key");
			String startUser = this.getReq().getParameter("startUser");
			
			if(MyStringUtils.isEmpty(key)){
				throw new Exception("请选择流程");
			}
			if(MyStringUtils.isEmpty(startUser)){
				if(this.getSess().getAttribute("loginUserInfo") != null){
					LoginUserInfo loginUserInfo = (LoginUserInfo)this.getSess().getAttribute("loginUserInfo");
					startUser = loginUserInfo.getAccount();
				}
			}
			if(MyStringUtils.isEmpty(startUser)){
				throw new Exception("请选择流程开启人");
			}
			
			List<Option> userList = commonService.queryUserForOptionKV();
			this.getRequest().put("userList", userList);
			
			ProcessStartInfo processStartInfo = new ProcessStartInfo();
			String yyyy = MyDateUtils.toString(new Date(), "yyyy");
			System.out.println(yyyy);
			processStartInfo.setiJobnoKey(yyyy+"TASK");
			processStartInfo.setiProcKey(key);
			
			Map procVar = new HashMap();
			procVar.put("assigner", startUser);
			procVar.put("starter", startUser);
			processStartInfo.setiProcVar(procVar);
			processStartInfo.setiStartUser(startUser);
			
			this.seProcessService.startTaskProcess(processStartInfo);
			
			Task task = this.myActivitiUtil.getTaskService().createTaskQuery().taskId(processStartInfo.getoTaskId()).singleResult();
			
//			String jobno = this.sysService.createNo("THD");
//			Map processVar = new HashMap();
//			processVar.put("assigner", startUser);
//			this.myActivitiUtil.runtimeService.startProcessInstanceByKey(key, jobno, processVar);
			System.out.println(task.getFormKey());
			
			this.setUrl(task.getFormKey()+"?jobno=" + processStartInfo.getoJobno() + "&procInsId=" + processStartInfo.getProcInsId() + "&taskId=" + task.getId() );
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 流程公共信息
	 * url : /seProcess/seProcess!commonProcessInfo.do
	 * Method Description : ########
	 * @return
	 */
	public String commonProcessInfo(){
		try{
			this.logger.info("commonProcessInfo()");
			Task t = this.myActivitiUtil.getTaskService().createTaskQuery().taskId(this.getTaskId()).singleResult();
			this.getRequest().put("task", t);
			
			this.setForwardPage("/pages/process/commonProcessInfo.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 查询某流程历史步骤 - vue
	 * url : /seProcess/seProcess!queryHistoryTaskForVue.do
	 * Method Description : ########
	 * @return
	 */
	public String queryHistoryTaskForVue(){
		try{
			try{
				this.logger.info("queryHistoryTaskForVue()");
				
				StringBuffer json = new StringBuffer();
				GsonBuilder builder = new GsonBuilder();
				//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
				Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
				this.p.setPageSize(this.getRows());
				this.p.setCurrentPage(this.getPage());
				
				map.put("key", this.getReq().getParameter("bkey"));
				
				//排序
				map.put("sort",getReq().getParameter("sort"));	
				map.put("order",getReq().getParameter("order"));
				List l = this.seProcessService.queryHistoryTask(this.getId());
				String listStr = gson.toJson(l);
				if(l==null || l.size() < 1){
					listStr = "[]";
				}
				this.setMsg(listStr);
				return "ajax";
			}catch(Exception e){
				e.printStackTrace();
				return this.err(e);
			}
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 流程下一步公共功能
	 * url : /seProcess/seProcess!nextStep.do
	 * Method Description : ########
	 * @return
	 */
	public String nextStep(){
		try{
			this.logger.info("nextStep()");
			String r = this.seProcessService.claimAndComplateTask(this.getTaskId(), this.getStepOperator(), null);
			this.setMsg(r);
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 设置流程变量公共功能
	 * url : /seProcess/seProcess!setProcessVar.do
	 * Method Description : ########
	 * @return
	 */
	public String setProcessVar(){
		try{
			this.logger.info("setProcessVar()");
			
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			
			
			Map processVar = gson.fromJson(this.getProcessVarStr(), Map.class);
			this.myActivitiUtil.getRuntimeService().setVariables(this.getProcInsId(), processVar);
			
			this.setMsg(StaticVar.STATUS_SUCCESS);
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 流程列表
	 * url : /seProcess/seProcess!processList.do
	 * Method Description : ########
	 * @return
	 */
	public String processList(){
		try{
			this.logger.info("processList()");
			
			this.initStaticVarObj();
			
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			Map authMap = this.seService.queryAuth(lui.getUserId(), "");
			this.getRequest().put("authMap", authMap);
			
			
			this.setForwardPage("/pages/process/processList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 流程列表获取数据
	 * url : /seProcess/seProcess!processListGetData.do
	 * Method Description : ########
	 * @return
	 */
	public String processListGetData(){
		try{
			try{
				this.logger.info("processListGetData()");
				
				StringBuffer json = new StringBuffer();
				GsonBuilder builder = new GsonBuilder();
				//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
				Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
				this.p.setPageSize(this.getRows());
				this.p.setCurrentPage(this.getPage());
				
				map.put("key", this.getReq().getParameter("bkey"));
				map.put("assigner", this.getReq().getParameter("assigner"));
				map.put("performer", this.getReq().getParameter("performer"));
				map.put("jobStatus", this.getReq().getParameter("jobStatus"));
				
				//排序
				map.put("sort",getReq().getParameter("sort"));	
				map.put("order",getReq().getParameter("order"));
				
				List l = this.seProcessService.queryProcessList(map, p);
				
				
				String listStr = gson.toJson(l);
				json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
				if(l==null || l.size() < 1){
					listStr = "[]";
				}
				json.append(listStr);
				json.append("}");
				
				this.setMsg(json.toString());
				
				return "ajax";
			}catch(Exception e){
				e.printStackTrace();
				return this.err(e);
			}
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 待办列表
	 * url : /seProcess/seProcess!todoList.do
	 * Method Description : ########
	 * @return
	 */
	public String todoList(){
		try{
			this.logger.info("todoList()");
			this.setForwardPage("/pages/process/todoList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 待办列表
	 * url : /seProcess/seProcess!showProcessImage.do
	 * Method Description : ########
	 * @return
	 */
	public String showProcessImage(){
		try{
			this.logger.info("showProcessImage()");
			
			InputStream is = this.myActivitiUtil.drawBpmnForInputStreamWithCurrentTask(taskId);
			OutputStream os = this.getResp().getOutputStream();
			
			
			int bytesum = 0;
			int byteread = 0;
			byte[] buffer = new byte[8 * 1024];
			int length;
			while ((byteread = is.read(buffer)) != -1) {
				bytesum += byteread; //字节数  文件大小  
				System.out.println(bytesum);
				os.write(buffer, 0, byteread);
			}
			return null;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 待办列表
	 * url : /seProcess/seProcess!todoListGetData.do
	 * Method Description : ########
	 * @return
	 */
	public String todoListGetData(){
		try{
			this.logger.info("todoListGetData()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			
			map.put("key", this.getReq().getParameter("bkey"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));
			
			List l = this.seProcessService.queryTodoList(map, "1", p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 任务流程-派工
	 * url : /seProcess/seProcess!taskProcessAssign.do
	 * Method Description : ########
	 * @return
	 */
	public String taskProcessAssign(){
		try{
			this.logger.info("taskProcessAssign()");
			
			if(MyStringUtils.isEmpty(this.getJobno())){
				throw new Exception("未找到JOBNO");
			}
			seProcTask = this.seProcessService.querySeProcTaskById(this.jobno);
			
			
			LoginUserInfo lui = (LoginUserInfo)this.getReq().getSession().getAttribute("loginUserInfo");
			ProcessMethodBean pmb = new ProcessMethodBean();
			String stepCode = this.getReq().getParameter("stepCode");
			if(MyStringUtils.isEmpty(stepCode) || MyStringUtils.isEmpty(this.getJobno())){
				throw new Exception(" 为设置业务主键和步骤CODE ");
			}
			pmb.setJobno(this.getJobno());
			pmb.setStepCode(stepCode);
			pmb.setOperator(lui.getSeUser().getUserId());
			//流程公共信息
			this.seProcessService.dealProcessMethodBean(pmb);
			this.getRequest().put("pmb", pmb);
			
			
			
			
			
//			if(!this.myActivitiUtil.canDo(this.getTaskId(), lui.getUserId())){
//				this.setUrl("/seProcess/seProcess!taskProcessInfo.do?jobno=" + this.getJobno());
//				return "msg";
//			}
			
			if(!this.seProcessService.cando(pmb.getTaskId(), lui.getUserId())){
				this.setUrl("/seProcess/seProcess!taskProcessInfo.do?jobno=" + this.getJobno());
				return "msg";
			}
			
			if(seProcTask == null){
				throw new Exception("未找到任务流程[" + this.jobno + "]");
			}
			
			
			
			if(MyStringUtils.isNotEmpty(seProcTask.getTaskId())){
				this.getRequest().put("traceTaskName", seService.querySeTraceTaskById(seProcTask.getTaskId()).getTaskTitle());
			}
			if(MyStringUtils.isNotEmpty(seProcTask.getProjectId())){
				this.getRequest().put("project", seService.querySeProjectInfoById(seProcTask.getProjectId()));
			}
			
			Task t = this.myActivitiUtil.getTaskService().createTaskQuery().taskId(pmb.getTaskId()).singleResult();
			this.getRequest().put("task", t);
			List<Option> userList = commonService.queryUserForOptionKV();
			this.getRequest().put("userList", userList);
			
			
			List projectList = seService.queryMyProject(lui.getUserId());
			this.getRequest().put("projectList", projectList);
			
			
			this.setForwardPage("/pages/process/taskProcessAssign.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 任务流程-派工
	 * url : /seProcess/seProcess!taskProcessAssignSubmit.do
	 * Method Description : ########
	 * @return
	 */
	public String taskProcessAssignSubmit(){
		try{
			this.logger.info("taskProcessAssignSubmit()");
			
			if(MyStringUtils.isEmpty(seProcTask.getJobno())){
				throw new Exception("未找到JOBNO");
			}
			SeProcTask seProcTaskTemp = this.seProcessService.querySeProcTaskById(seProcTask.getJobno());
			
			if(seProcTaskTemp == null){
				throw new Exception("未找到任务流程[" + this.jobno + "]");
			}
			this.seProcessService.updateSeProcTask(this.seProcTask);
//			List<Option> userList = commonService.queryUserForOptionKV();
//			this.getRequest().put("userList", userList);
			
			
//			String url = "/seProcess/seProcess!taskProcessAssign.do?jobno=" + seProcTask.getJobno() + "&procInsId=" + procInsId + "&taskId=" + taskId;
//			this.setUrl(url);
//			return "msg";
			
			this.setMsg(StaticVar.STATUS_SUCCESS);
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 任务流程-执行
	 * url : /seProcess/seProcess!taskProcessPerform.do
	 * Method Description : ########
	 * @return
	 */
	public String taskProcessPerform(){
		try{
			this.logger.info("taskProcessPerform()");
			
			if(MyStringUtils.isEmpty(this.getJobno())){
				throw new Exception("未找到JOBNO");
			}
			
			
			
			LoginUserInfo lui = (LoginUserInfo)this.getReq().getSession().getAttribute("loginUserInfo");
			ProcessMethodBean pmb = new ProcessMethodBean();
			String stepCode = this.getReq().getParameter("stepCode");
			if(MyStringUtils.isEmpty(stepCode) || MyStringUtils.isEmpty(this.getJobno())){
				throw new Exception(" 为设置业务主键和步骤CODE ");
			}
			pmb.setJobno(this.getJobno());
			pmb.setStepCode(stepCode);
			pmb.setOperator(lui.getSeUser().getUserId());
			//流程公共信息
			this.seProcessService.dealProcessMethodBean(pmb);
			this.getRequest().put("pmb", pmb);
			
			
			
			if(!this.seProcessService.cando(pmb.getTaskId(), lui.getUserId())){
				this.setUrl("/seProcess/seProcess!taskProcessInfo.do?jobno=" + this.getJobno());
				return "msg";
			}
			
			
			seProcTask = this.seProcessService.querySeProcTaskById(this.getJobno());
			
			if(seProcTask == null){
				throw new Exception("未找到任务流程[" + this.jobno + "]");
			}
			
			if(MyStringUtils.isNotEmpty(seProcTask.getTaskId())){
				this.getRequest().put("traceTaskName", seService.querySeTraceTaskById(seProcTask.getTaskId()).getTaskTitle());
			}
			if(MyStringUtils.isNotEmpty(seProcTask.getProjectId())){
				this.getRequest().put("project", seService.querySeProjectInfoById(seProcTask.getProjectId()));
			}
			Task t = this.myActivitiUtil.getTaskService().createTaskQuery().taskId(pmb.getTaskId()).singleResult();
			this.getRequest().put("task", t);
			
//			List<Option> userList = commonService.queryUserForOptionKV();
//			this.getRequest().put("userList", userList);
			
			
			
			
			this.setForwardPage("/pages/process/taskProcessPerform.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 任务流程-执行
	 * url : /seProcess/seProcess!taskProcessPerformSubmit.do
	 * Method Description : ########
	 * @return
	 */
	public String taskProcessPerformSubmit(){
		try{
			this.logger.info("taskProcessPerformSubmit()");
			
			if(MyStringUtils.isEmpty(seProcTask.getJobno())){
				throw new Exception("未找到JOBNO");
			}
			SeProcTask seProcTaskTemp = this.seProcessService.querySeProcTaskById(seProcTask.getJobno());
			
			if(seProcTaskTemp == null){
				throw new Exception("未找到任务流程[" + this.jobno + "]");
			}
			
			this.seProcessService.updateSeProcTaskOnly(this.seProcTask);
			this.setMsg(StaticVar.STATUS_SUCCESS);
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 任务流程-审核
	 * url : /seProcess/seProcess!taskProcessAudit.do
	 * Method Description : ########
	 * @return
	 */
	public String taskProcessAudit(){
		try{
			this.logger.info("taskProcessAudit()");
			
			if(MyStringUtils.isEmpty(this.getJobno())){
				throw new Exception("未找到JOBNO");
			}
			
			LoginUserInfo lui = (LoginUserInfo)this.getReq().getSession().getAttribute("loginUserInfo");
			ProcessMethodBean pmb = new ProcessMethodBean();
			String stepCode = this.getReq().getParameter("stepCode");
			if(MyStringUtils.isEmpty(stepCode) || MyStringUtils.isEmpty(this.getJobno())){
				throw new Exception(" 为设置业务主键和步骤CODE ");
			}
			pmb.setJobno(this.getJobno());
			pmb.setStepCode(stepCode);
			pmb.setOperator(lui.getSeUser().getUserId());
			//流程公共信息
			this.seProcessService.dealProcessMethodBean(pmb);
			this.getRequest().put("pmb", pmb);
			
			
			if(!this.seProcessService.cando(pmb.getTaskId(), lui.getUserId())){
				this.setUrl("/seProcess/seProcess!taskProcessInfo.do?jobno=" + this.getJobno());
				return "msg";
			}
			
			seProcTask = this.seProcessService.querySeProcTaskById(this.getJobno());
			
			if(seProcTask == null){
				throw new Exception("未找到任务流程[" + this.jobno + "]");
			}
			
			if(MyStringUtils.isNotEmpty(seProcTask.getTaskId())){
				this.getRequest().put("traceTaskName", seService.querySeTraceTaskById(seProcTask.getTaskId()).getTaskTitle());
			}
			if(MyStringUtils.isNotEmpty(seProcTask.getProjectId())){
				this.getRequest().put("project", seService.querySeProjectInfoById(seProcTask.getProjectId()));
			}
			Task t = this.myActivitiUtil.getTaskService().createTaskQuery().taskId(pmb.getTaskId()).singleResult();
			this.getRequest().put("task", t);
			
//			List<Option> userList = commonService.queryUserForOptionKV();
//			this.getRequest().put("userList", userList);
			
			this.setForwardPage("/pages/process/taskProcessAudit.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 任务流程-审核提交
	 * url : /seProcess/seProcess!taskProcessAuditSubmit.do
	 * Method Description : ########
	 * @return
	 */
	public String taskProcessAuditSubmit(){
		try{
			this.logger.info("taskProcessAuditSubmit()");
			
			if(MyStringUtils.isEmpty(seProcTask.getJobno())){
				throw new Exception("未找到JOBNO");
			}
			SeProcTask seProcTaskTemp = this.seProcessService.querySeProcTaskById(seProcTask.getJobno());
			
			if(seProcTaskTemp == null){
				throw new Exception("未找到任务流程[" + this.jobno + "]");
			}
			
			this.seProcessService.updateSeProcTaskOnly(this.seProcTask);
			this.setMsg(StaticVar.STATUS_SUCCESS);
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 任务流程-流程信息总览
	 * url : /seProcess/seProcess!taskProcessInfo.do
	 * Method Description : ########
	 * @return
	 */
	public String taskProcessInfo(){
		try{
			this.logger.info("taskProcessInfo()");
			if(MyStringUtils.isEmpty(this.getJobno())){
				throw new Exception("未找到JOBNO");
			}
			seProcTask = this.seProcessService.querySeProcTaskById(this.jobno);
			if(seProcTask == null){
				throw new Exception("未找到任务流程[" + this.jobno + "]");
			}
			if(MyStringUtils.isNotEmpty(seProcTask.getTaskId())){
				this.getRequest().put("traceTaskName", seService.querySeTraceTaskById(seProcTask.getTaskId()).getTaskTitle());
			}
			this.setForwardPage("/pages/process/taskProcessInfo.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 历史流程公共信息
	 * url : /seProcess/seProcess!commonProcessHisInfo.do
	 * Method Description : ########
	 * @return
	 */
	public String commonProcessHisInfo(){
		try{
			this.logger.info("commonProcessHisInfo()");
			HistoricProcessInstance hisProcInst = this.myActivitiUtil.historyService.createHistoricProcessInstanceQuery().processInstanceBusinessKey(this.getJobno()).singleResult();
			List<HistoricTaskInstance> taskHisList = this.myActivitiUtil.historyService.createHistoricTaskInstanceQuery().processInstanceBusinessKey(this.getJobno()).orderByTaskCreateTime().asc().list();
			this.getRequest().put("taskHisList", taskHisList);
			this.setForwardPage("/pages/process/commonProcessHisInfo.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * url : /seProcess/seProcess!commonTask.do?taskId=4007
	 * Method Description : ########
	 * @return
	 */
	public String commonTask(){
		try{
			this.logger.info("commonTask()");
			this.setForwardPage("/pages/process/commonTask.jsp");
//			System.out.println("================" + this.myActivitiUtil.getTaskService());
//			Task task = this.myActivitiUtil.getTaskService().createTaskQuery().taskId(this.getTaskId()).singleResult();
//			this.getRequest().put("taskDefinitionKey", task.getTaskDefinitionKey());
//			this.getRequest().put("taskId", task.getId());
//			this.getRequest().put("taskName", task.getName());
//			this.getRequest().put("taskFormKey", task.getFormKey());
			
//			HashMap hm = new HashMap();
//			hm.put("assigner","zhangsan");
//			String insId = this.myActivitiUtil.getRuntimeService().startProcessInstanceByKey("taskProcess", "xxx", hm).getId();
//			Task t = this.myActivitiUtil.getTaskService().createTaskQuery().processInstanceId(insId).singleResult();
			
			
			//--获取任务信息
			//Task task = this.myActivitiUtil.getTaskService().createTaskQuery().taskId(this.getTaskId()).singleResult();
//			System.out.println(task.getName());
//			String businessKey = this.myActivitiUtil.getRuntimeService().createProcessInstanceQuery().processInstanceId(task.getProcessInstanceId()).singleResult().getBusinessKey();
//			System.out.println(this.bkey + " || " +businessKey);
//			List users = this.myActivitiUtil.getTaskService().getIdentityLinksForTask(this.getTaskId());
//			System.out.println(users);
//			this.getRequest().put("candidaters", users);
			
			
			//--添加候选人
			//this.myActivitiUtil.getTaskService().addCandidateUser("4011", "devil13th");
			//this.myActivitiUtil.getTaskService().addCandidateUser("4011", "lwang");
			
			
			//--签收并完成任务
//			Map m = new HashMap();
//			m.put("developer", "devil13th");
//			this.myActivitiUtil.getTaskService().claim("4011","lwang");
//			this.myActivitiUtil.getTaskService().complete("4011",m);
//			this.setForwardPage("/pages/process/commonTask.jsp");
			System.out.println(sysService.createNo("asd"));
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	
	/**
	 * 快速开启矩阵任务流程
	 * url : /seProcess/seProcess!startTraceTaskProcess.do
	 * Method Description : ########
	 * @return
	 */
	public String startTraceTaskProcess(){
		try{
			this.logger.info("startTraceTaskProcess()");
			
			String key = this.getReq().getParameter("key");
			String startUser = this.getReq().getParameter("startUser");
			String taskId = this.getReq().getParameter("taskId");
			if(MyStringUtils.isEmpty(key)){
				throw new Exception("请选择流程");
			}
			if(MyStringUtils.isEmpty(taskId)){
				throw new Exception("请选择矩阵任务");
			}
			if(MyStringUtils.isEmpty(startUser)){
				if(this.getSess().getAttribute("loginUserInfo") != null){
					LoginUserInfo loginUserInfo = (LoginUserInfo)this.getSess().getAttribute("loginUserInfo");
					startUser = loginUserInfo.getAccount();
				}
			}
			if(MyStringUtils.isEmpty(startUser)){
				throw new Exception("请选择流程开启人");
			}
			
			List<Option> userList = commonService.queryUserForOptionKV();
			this.getRequest().put("userList", userList);
			
			ProcessStartInfo processStartInfo = new ProcessStartInfo();
			String yyyy = MyDateUtils.toString(new Date(), "yyyy");
			System.out.println(yyyy);
			processStartInfo.setiJobnoKey(yyyy+"TASK");
			processStartInfo.setiProcKey(key);
			
			Map procVar = new HashMap();
			procVar.put("assigner", startUser);
			processStartInfo.setiProcVar(procVar);
			processStartInfo.setiStartUser(startUser);
			
			this.seProcessService.startTaskProcessForTraceTask(processStartInfo, taskId);
			Task task = this.myActivitiUtil.getTaskService().createTaskQuery().taskId(processStartInfo.getoTaskId()).singleResult();
			
//			String jobno = this.sysService.createNo("THD");
//			Map processVar = new HashMap();
//			processVar.put("assigner", startUser);
//			this.myActivitiUtil.runtimeService.startProcessInstanceByKey(key, jobno, processVar);
			System.out.println(task.getFormKey());
			
			this.setUrl(task.getFormKey()+"?jobno=" + processStartInfo.getoJobno() + "&procInsId=" + processStartInfo.getProcInsId() + "&taskId=" + task.getId() );
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	
	
	/**
	 * 查询某流程实例的当前步骤
	 * url : /seProcess/seProcess!queryCurrentTask.do
	 * Method Description : ########
	 * @return
	 */
	public String queryCurrentTask(){
		try{
			try{
				this.logger.info("queryCurrentTask()");
				
				StringBuffer json = new StringBuffer();
				GsonBuilder builder = new GsonBuilder();
				//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
				Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
				this.p.setPageSize(this.getRows());
				this.p.setCurrentPage(this.getPage());
				
				map.put("key", this.getReq().getParameter("bkey"));
				
				//排序
				map.put("sort",getReq().getParameter("sort"));	
				map.put("order",getReq().getParameter("order"));
				
				List l = this.seProcessService.queryCurrentTask(this.getId());
				
				
				String listStr = gson.toJson(l);
				json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
				if(l==null || l.size() < 1){
					listStr = "[]";
				}
				json.append(listStr);
				json.append("}");
				
				this.setMsg(json.toString());
				
				return "ajax";
			}catch(Exception e){
				e.printStackTrace();
				return this.err(e);
			}
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	/**
	 * 查询某流程历史步骤
	 * url : /seProcess/seProcess!queryHistoryTask.do
	 * Method Description : ########
	 * @return
	 */
	public String queryHistoryTask(){
		try{
			try{
				this.logger.info("queryHistoryTask()");
				
				StringBuffer json = new StringBuffer();
				GsonBuilder builder = new GsonBuilder();
				//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
				Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
				this.p.setPageSize(this.getRows());
				this.p.setCurrentPage(this.getPage());
				
				map.put("key", this.getReq().getParameter("bkey"));
				
				//排序
				map.put("sort",getReq().getParameter("sort"));	
				map.put("order",getReq().getParameter("order"));
				
				List l = this.seProcessService.queryHistoryTask(this.getId());
				
				
				String listStr = gson.toJson(l);
				json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
				if(l==null || l.size() < 1){
					listStr = "[]";
				}
				json.append(listStr);
				json.append("}");
				
				this.setMsg(json.toString());
				
				return "ajax";
			}catch(Exception e){
				e.printStackTrace();
				return this.err(e);
			}
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	
	/**
	 * 删除/取消某流程实例
	 * url : /seProcess/seProcess!cancelProcessInstance.do
	 * Method Description : ########
	 * @return
	 */
	public String cancelProcessInstance(){
		try{
			this.logger.info("cancelProcessInstance()");
			String r = this.seProcessService.cancelProcessInstance(this.getJobno());
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 挂起某流程实例
	 * url : /seProcess/seProcess!suspendsProcessInstance.do
	 * Method Description : ########
	 * @return
	 */
	public String suspendsProcessInstance(){
		try{
			this.logger.info("cancelProcessInstance()");
			String r = this.seProcessService.suspendsProcessInstance(this.getJobno());
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	public String activateProcessInstance(){
		try{
			this.logger.info("activateProcessInstance()");
			String r = this.seProcessService.activateProcessInstance(this.getJobno());
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 查询某待办的候选人
	 * url : /seProcess/seProcess!queryTaskCandidate.do
	 * Method Description : ########
	 * @return
	 */
	public String queryTaskCandidate(){
		try{
			this.logger.info("queryTaskCandidate()");
			String r = this.seProcessService.queryTaskCandidate(this.getTaskId());
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 设置某待办的候选人
	 * url : /seProcess/seProcess!saveTaskCandidate.do
	 * Method Description : ########
	 * @return
	 */
	public String saveTaskCandidate(){
		try{
			this.logger.info("saveTaskCandidate()");
			String r = this.seProcessService.saveTaskCandidate(this.getTaskId(),this.getIds());
			this.setMsg(r);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	public String getTaskId() {
		return taskId;
	}
	public void setTaskId(String taskId) {
		this.taskId = taskId;
	}
	public String getBkey() {
		return bkey;
	}
	public void setBkey(String bkey) {
		this.bkey = bkey;
	}
	public SeProcTask getSeProcTask() {
		return seProcTask;
	}
	public void setSeProcTask(SeProcTask seProcTask) {
		this.seProcTask = seProcTask;
	}
	public String getJobno() {
		return jobno;
	}
	public void setJobno(String jobno) {
		this.jobno = jobno;
	}
	public String getProcInsId() {
		return procInsId;
	}
	public void setProcInsId(String procInsId) {
		this.procInsId = procInsId;
	}


	public String getStepOperator() {
		return stepOperator;
	}


	public void setStepOperator(String stepOperator) {
		this.stepOperator = stepOperator;
	}


	public String getProcessVarStr() {
		return processVarStr;
	}


	public void setProcessVarStr(String processVarStr) {
		this.processVarStr = processVarStr;
	}

	public String getStartUser() {
		return startUser;
	}


	public void setStartUser(String startUser) {
		this.startUser = startUser;
	}

	
}
