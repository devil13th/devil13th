package cn.thd.action.test;


import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import oracle.apps.xdo.template.FOProcessor;
import cn.thd.bean.Option;
import cn.thd.bean.StaticVar;
import cn.thd.bean.rtf.CertSecBean;
import cn.thd.bean.rtf.CommonFormBean;
import cn.thd.service.common.CommonService;
import cn.thd.service.se.SeService;
import cn.thd.service.sys.SysService;
import cn.thd.staticbean.FixDicCollection;
import cn.thd.staticbean.FixedDicCollectionBean;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.thd.core.action.PubAction;
import com.thd.util.MyActivitiUtil;
import com.thd.util.MyListUtils;
import com.thd.util.MyUuidUtils;
import com.thd.util.RtfTemplateUtil;
import com.thoughtworks.xstream.XStream;


/**
 * 流程相关
 * file autogenerated by ThirdteenDevils's CodeGenUtil 
 */
public class TestAction extends PubAction {
	@Resource
	private SeService seService;
	@Resource
	private MyActivitiUtil myActivitiUtil;
	@Resource
	private SysService sysService;
	@Resource
	private CommonService commonService;
	private String taskId;
	private String bkey;
	
	
	
	/**
	 * 测试获取流程Task节点
	 * url : /test/test!testgetNodeOfProcessDefined.do
	 * Method Description : ########
	 * @return
	 */
	public String testgetNodeOfProcessDefined(){
		try{
			this.logger.info("testJump()");
			this.myActivitiUtil.getNodeOfProcessDefined("taskProcess:2:2504");
			this.setMsg(StaticVar.STATUS_SUCCESS);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "msg";
	}
	/**
	 * 测试自由流
	 * url : /test/test!testJump.do
	 * Method Description : ########
	 * @return
	 */
	public String testJump(){
		try{
			this.logger.info("testJump()");
			this.myActivitiUtil.jump("42501", "regist");
			this.setMsg(StaticVar.STATUS_SUCCESS);
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "msg";
	}
	/**
	 * url : /test/test!testDicInit.do
	 * Method Description : ########
	 * @return
	 */
	public String testDicInit(){
		try{
			this.logger.info("testDicInit()");
			List classifyList = commonService.querySysDicClassify();
			
			//System.out.println(FixDicCollection.DIC_CONTAINER.get("post").getDicList());
			//System.out.println(FixDicCollection.DIC_CONTAINER.get("post").getDicMap());
			
			System.out.println(commonService.getFixedDicList("post"));
			System.out.println(commonService.getFixedDicMap("post"));
			
			/*(MyListUtils.isNotEmpty(classifyList)){
				for(Object obj : classifyList){
					Map m = (Map)obj;
					String classify = m.get("dic_classify").toString();
					System.out.println( " load dic [" +classify+ "] ......" );
					
					List<Option> dicList = commonService.queryDicForOption(classify);
					FixedDicCollectionBean fdcb = new FixedDicCollectionBean();
					FixDicCollection.DIC_CONTAINER.put(classify,fdcb);
					if(MyListUtils.isNotEmpty(dicList)){
						fdcb.setDicList(dicList);
						Map<String,String> aDic = new HashMap<String,String>();
						fdcb.setDicMap(aDic);
						for(Option opt : dicList){
							aDic.put(opt.getValue(), opt.getText());
						}
					}
				}
				System.out.println(FixDicCollection.DIC_CONTAINER);
				GsonBuilder builder = new GsonBuilder();
				Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
				String listStr = gson.toJson(FixDicCollection.DIC_CONTAINER);;
				System.out.println(listStr);
			}*/
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * url : /test/test!testSysServiceCreateNo.do
	 * Method Description : ########
	 * @return
	 */
	public String testSysServiceCreateNo(){
		try{
			this.logger.info("test()");
			this.setForwardPage("/pages/process/commonTask.jsp");
			this.setHtml(sysService.createNo("asd"));
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * url : /test/test!testhasAuth.do
	 * Method Description : ########
	 * @return
	 */
	public String testhasAuth(){
		try{
			this.logger.info("testhasAuth()");
			String r = this.seService.hasAuth("lwang", "WSST-A5","FINANCE" );
			
			Map m = this.seService.queryAuth("lwang", "SSMIS-A6");
			System.out.println(m);
			System.out.println(r);
			this.setMsg(r);
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * url : /test/test!backup.do
	 * Method Description : ########
	 * @return
	 */
	public String backup(){
		try{
			this.logger.info("backup()");
			String str = commonService.backup("SeTraceDefect");
			this.setMsg(str);
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * url : /test/test!testCreatePdf.do
	 * Method Description : ########
	 * @return
	 */
	public String testCreatePdf(){
		try{
			this.logger.info("testCreatePdf()");
			
			
			
			String webRootPath = this.getReq().getSession().getServletContext().getRealPath("/");
			this.getLog().info(webRootPath);
			
			//rtf模板路径
			//String rtfTemplateFilePath="D://deleteme1//CSE(CHN)2.50.rtf";
			String rtfTemplateFilePath=webRootPath + "rtfTemplate" + File.separator + "CSE(CHN)2.5.rtf";
			
			String tempFileNamePre = new Date().getTime() + "-" + MyUuidUtils.getUuid();
			
			//中间过程生成的xsl路径
			String xslFilePath= webRootPath + "temp" + File.separator + tempFileNamePre + "-bixsl" + ".xsl";
			//xml数据路径
			String xmlFilePath= webRootPath + "temp" + File.separator + tempFileNamePre + "-bix.l" + ".xml";
			//配置文件位置
			String cfgFilePath= webRootPath + "WEB-INF" + File.separator + "xdo.cfg";
			//输出最终文件位置
			String resultPdfFilePath = "D://deleteme1//aaa.pdf";
			//输出文件种类
			byte outputFormat = FOProcessor.FORMAT_PDF;
			
			CertSecBean csb = new CertSecBean();
			CommonFormBean cfBean = new CommonFormBean();
			
			cfBean.setCcsno("06Y2030");
			cfBean.setImono("9446362");
			cfBean.setJobno("GZ16SS02116");
			cfBean.setShipNameCn("华天龙");
			cfBean.setShipNameEn("HUA TIAN LONG");
			cfBean.setFormNameEn("CAP(CHN)");
			cfBean.setGross("561");
			cfBean.setIssueAt("Shenzhen");
			cfBean.setIssueDate("February 16, 2017");
			cfBean.setIssueUser("Zhang San");
			cfBean.setFinishDate("February 16, 2017");
			cfBean.setCertValidate("February 16, 2017");
			cfBean.setCallNo("BSGA");
			csb.setCfBean(cfBean);
			csb.setShipPort("Tian Jin");
			
			
			XStream xstream = new XStream();
			//去掉生成xml标签的包名前缀
			xstream.aliasPackage("", "com.thd.bipublisher.example");
			
			String hlStr = xstream.toXML(csb);
			String outStr = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>";
			outStr += hlStr;
			
			
			
			//写入到文件
			FileWriter fw = null;
			File xmlFile = new File(xmlFilePath);
			try {
				if (!xmlFile.exists()) {
					xmlFile.createNewFile();
				}
				fw = new FileWriter(xmlFile);
				//BufferedWriter out = new BufferedWriter(fw,"UTF8");
				OutputStreamWriter write = new OutputStreamWriter(new FileOutputStream(xmlFile),"UTF-8"); 
				BufferedWriter out=new BufferedWriter(write);
				out.write(outStr, 0, outStr.length());
				out.close();
				write.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			
			
			
			RtfTemplateUtil rtfUtil = new RtfTemplateUtil(  
					rtfTemplateFilePath,  
					xslFilePath,
					 xmlFilePath,  
					 cfgFilePath,  
					 resultPdfFilePath,outputFormat);
			
			rtfUtil.genarateReportPdf();
			
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	public String getTaskId() {
		return taskId;
	}

	public void setTaskId(String taskId) {
		this.taskId = taskId;
	}

	public String getBkey() {
		return bkey;
	}

	public void setBkey(String bkey) {
		this.bkey = bkey;
	}
	
}
