package cn.thd.action.pmp;


import java.util.List;

import javax.annotation.Resource;

import cn.thd.service.pmp.PmpService;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.thd.core.action.PubAction;
import com.thd.util.StringUtil;


/**
 * 流程相关
 * file autogenerated by ThirdteenDevils's CodeGenUtil 
 */
public class PmpAction extends PubAction {
	
	@Resource
	private PmpService pmpService;
	
	
	/**
	 * ajax获取管理过程列表
	 * url:/pmp/pmp!pmp.do
	 */
	public String pmp(){
		try{
			this.logger.info("pmp()");
			this.setForwardPage("/pages/pmp/pmp.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * ajax获取管理过程列表
	 * url:/pmp/pmp!pmpManage.do
	 */
	public String pmpManage(){
		try{
			this.logger.info("pmpManage()");
			
			List pgList = this.pmpService.queryProcessGroup();
			List kaList = this.pmpService.queryKnowledgeArea();
			
			this.getRequest().put("pgList", pgList);
			this.getRequest().put("kaList", kaList);
			this.setForwardPage("/pages/pmp/pmpManage.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * ajax获取过程组列表
	 * url:/pmp/pmp!queryProcessGroup.do
	 */
	public String queryProcessGroup(){
		try{
			this.logger.info("queryProcessGroup()");
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			List l = this.pmpService.queryProcessGroup();
			String listStr = gson.toJson(l);
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			this.setMsg(json.toString());
			this.setForwardPage("/pages/pmp/processGroupData.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * ajax获取知识领域列表
	 * url:/pmp/pmp!queryKnowledgeArea.do
	 */
	public String queryKnowledgeArea(){
		try{
			this.logger.info("queryKnowledgeArea()");
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			List l = this.pmpService.queryKnowledgeArea();
			String listStr = gson.toJson(l);
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			this.setMsg(json.toString());
			this.setForwardPage("/pages/pmp/knowledgeAreaData.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * ajax获取管理过程列表
	 * url:/pmp/pmp!queryProcess.do
	 */
	public String queryProcess(){
		try{
			this.logger.info("queryProcess()");
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			List l = this.pmpService.queryProcess();
			String listStr = gson.toJson(l);
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			this.setMsg(json.toString());
			this.setForwardPage("/pages/pmp/processData.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取管理过程列表
	 * url:/pmp/pmp!queryItto.do
	 */
	public String queryItto(){
		try{
			this.logger.info("queryItto()");
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			List l = this.pmpService.queryItto();
			String listStr = gson.toJson(l);
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			this.setMsg(json.toString());
			this.setForwardPage("/pages/pmp/ittoData.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * ajax获取管理过程列表
	 * url:/pmp/pmp!queryProcessIttoRela.do
	 */
	public String queryProcessIttoRela(){
		try{
			this.logger.info("queryProcessIttoRela()");
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			List l = this.pmpService.queryProcessIttoRela();
			String listStr = gson.toJson(l);
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			this.setMsg(json.toString());
			this.setForwardPage("/pages/pmp/processIttoRelaData.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	/**
	 * 获取管理过程数据
	 * url:/pmp/pmp!processGetDate.do
	 */
	public String processGetDate(){
		try{
			this.logger.info("processGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			
			map.put("processGroupId", this.getReq().getParameter("processGroupId"));
			map.put("knowledgeAreaId", this.getReq().getParameter("knowledgeAreaId"));
			map.put("key", this.getReq().getParameter("key"));
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			
			List l = this.pmpService.queryProcessData(this.map, this.p);
			
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 获取管理过程数据
	 * url:/pmp/pmp!queryProcessIttoRelaData.do
	 */
	public String queryProcessIttoRelaData(){
		try{
			this.logger.info("queryProcessIttoRela()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			
			this.p.setPageSize(this.getRows());
			this.p.setCurrentPage(this.getPage());
			
			List l = this.pmpService.queryProcessIttoRela(this.getReq().getParameter("processId"),this.getReq().getParameter("classify"),this.getReq().getParameter("ittoName"));
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
}
