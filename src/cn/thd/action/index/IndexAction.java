package cn.thd.action.index;


import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.annotation.Resource;

import cn.thd.bean.LoginUserInfo;
import cn.thd.bean.MenuBean;
import cn.thd.bean.StaticVar;
import cn.thd.dto.DataTableBean;
import cn.thd.pojo.common.SysDicPub;
import cn.thd.pojo.se.SeMapUser;
import cn.thd.pojo.se.SeProjectInfo;
import cn.thd.pojo.se.SeUser;
import cn.thd.service.backlog.BacklogInfoService;
import cn.thd.service.common.CommonService;
import cn.thd.service.plan.PlanService;
import cn.thd.service.process.SeProcessService;
import cn.thd.service.se.SeService;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.ibm.icu.util.Calendar;
import com.opensymphony.xwork2.ActionContext;
import com.thd.core.action.PubAction;
import com.thd.util.MyDateUtils;
import com.thd.util.MyListUtils;
import com.thd.util.MyStringUtils;


/**
 * 系统公共字典相关
 * file autogenerated by ThirdteenDevils's CodeGenUtil 
 */
public class IndexAction extends PubAction {
	
	@Resource
	private CommonService commonService;
	@Resource
	private SeProcessService seProcessService;
	@Resource
	private SeService seService;
	@Resource
	private PlanService planService;
	@Resource
	private BacklogInfoService backlogInfoService;
	private SeUser seUser = new SeUser();
	
	
	private SysDicPub  sysDicPub = new SysDicPub();
	private SeMapUser seMapUser = new SeMapUser();
	private String projectId; 
	/**
	 *  首页
	 *  url:/index/index!index.do
	 */
	public String index(){
		try{
			this.logger.info("index()");
			System.out.println("====================================");
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			
			if(MyStringUtils.isNotEmpty(this.getProjectId())){
				SeProjectInfo project = this.seService.querySeProjectInfoById(this.getProjectId());
				this.getRequest().put("project", project);
			}
			
			
			List<MenuBean> mbList = seService.queryMenuOfUser(lui.getUserId(),"root", 1, "0");
			if(MyListUtils.isNotEmpty(mbList)){
				for(MenuBean mb : mbList){
					List<MenuBean> cmbList = seService.queryMenuOfUser(lui.getUserId(),mb.getTreeCode(), 1, "0");
					mb.setChilds(cmbList);
				}
			}
			
			this.getRequest().put("menuList", mbList);
			this.getRequest().put("a", "index!plugInDayNote");
			
			List projectList = this.seService.queryMyProject(lui.getUserId());
			this.getRequest().put("projectList", projectList);
			this.setForwardPage("/pages/index/index.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 *  切换语言
	 *  url:/index/index!lang.do
	 */
	public String lang(){
		try{
			this.logger.info("lang()");
			/*Locale locale = Locale.getDefault();
			ActionContext.getContext().getSession().put("Constants.WW_TRANS_I18N_LOCALE", locale);    
			ActionContext.getContext().setLocale(locale);   
			*/
			
			String lan = this.getReq().getParameter("lan");
			Locale locale = Locale.getDefault();     
            if(lan==null){     
            	locale = new Locale("zh", "CN");     
            }else if (lan.equals("2")) {
            	locale = new Locale("zh", "CN");
            } else if (lan.equals("1")) {     
            	locale = new Locale("en", "US");     
            }
            System.out.println("=======================" +locale);
            ActionContext.getContext().setLocale(locale);
            ActionContext.getContext().getSession().put("WW_TRANS_I18N_LOCALE", locale);    
            this.getReq().getSession().setAttribute("WW_TRANS_I18N_LOCALE", locale);
			this.setUrl("index/index!index.do");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	
	public String indexForEasyUi(){
		try{
			this.logger.info("indexForEasyUi()");
			System.out.println("====================================");
			this.setForwardPage("/pages/index/indexForEasyUi.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 首页插件-我的项目
	 * url:/index/index!plugInMyProject.do
	 * @return
	 */
	public String plugInMyProject(){
		try{
			this.logger.info("plugInMyProject()");
			
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			
			//项目列表在首页主页面已经查询,被引入的界面不再重复查询,所以注释以下代码
			//List projectList = this.seService.queryMyProject(lui.getUserId());
			//this.getRequest().put("projectList", projectList);
			this.setForwardPage("/pages/index/plugInMyProject.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 首页插件-项目计划列表
	 * url:/index/index!plugInProjectPlan.do
	 * @return
	 */
	public String plugInProjectPlan(){
		try{
			this.logger.info("plugInProjectPlan()");
			
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			List projectList = this.seService.queryMyProject(lui.getUserId());
			this.getRequest().put("projectList", projectList);
			this.setForwardPage("/pages/index/plugInProjectPlan.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 首页插件-开启流程
	 * url:/index/index!plugInStartProcess.do
	 * @return
	 */
	public String plugInStartProcess(){
		try{
			this.logger.info("plugInStartProcess()");
			
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			
			this.setForwardPage("/pages/index/plugInStartProcess.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 首页插件-我的待办
	 * url:/index/index!plugInMyTodo.do
	 * @return
	 */
	public String plugInMyTodo(){
		try{
			this.logger.info("plugInMyTodo()");
			
			this.setForwardPage("/pages/index/plugInMyTodo.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 首页插件-获取我的待办数据
	 * url:/index/index!plugInMyTodoGetData.do
	 * @return
	 */
	public String plugInMyTodoGetData(){
		try{
			this.logger.info("plugInMyTodoGetData()");
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			DataTableBean dtb = new DataTableBean();
			
			int start = Integer.parseInt(this.getReq().getParameter("start").toString());
			int pageSize = Integer.parseInt(this.getReq().getParameter("length").toString());
			
			dtb.setCurrentPage(start/pageSize + 1);
			dtb.setPageSize(Integer.parseInt(this.getReq().getParameter("length")));
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			
			Map m = new HashMap();
			m.put("assignee", lui.getSeUser().getUserId());
			m.put("projectId",this.getProjectId());
			m.put("todoType",this.getReq().getParameter("todoType"));
			
			dtb.setConditions(m);
			dtb = seProcessService.queryMyTodo(dtb);
			this.setMsg(gson.toJson(dtb));
			return "ajax";
			
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 首页插件-矩阵缺陷
	 * url:/index/index!plugInTraceDefect.do
	 * @return
	 */
	public String plugInTraceDefect(){
		try{
			this.logger.info("plugInTraceDefect()");
			
			this.setForwardPage("/pages/index/plugInTraceDefect.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 首页插件-获取矩阵缺陷数据
	 * url:/index/index!plugInTraceDefectGetData.do
	 * @return
	 */
	public String plugInTraceDefectGetData(){
		try{
			this.logger.info("plugInTraceDefectGetData()");
			
			
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			DataTableBean dtb = new DataTableBean();
			
			int start = Integer.parseInt(this.getReq().getParameter("start").toString());
			int pageSize = Integer.parseInt(this.getReq().getParameter("length").toString());
			
			dtb.setCurrentPage(start/pageSize + 1);
			dtb.setPageSize(Integer.parseInt(this.getReq().getParameter("length")));
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			
			Map m = new HashMap();
			m.put("DEVELOPER", lui.getSeUser().getUserId());
			m.put("DEFECT_STATUS", "问题提出");
			m.put("PROJECT_ID", this.getProjectId());
			dtb.setConditions(m);
			dtb = seService.queryMySeTraceDefect(dtb);
			this.setMsg(gson.toJson(dtb));
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 首页插件-矩阵遗留备忘
	 * url:/index/index!plugInTraceNote.do
	 * @return
	 */
	public String plugInTraceNote(){
		try{
			this.logger.info("plugInTraceNote()");
			
			this.setForwardPage("/pages/index/plugInTraceNote.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 首页插件-获取矩阵遗留备忘
	 * url:/index/index!plugInTraceNoteGetData.do
	 * @return
	 */
	public String plugInTraceNoteGetData(){
		try{
			this.logger.info("plugInTraceNoteGetData()");
			
			
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			DataTableBean dtb = new DataTableBean();
			
			int start = Integer.parseInt(this.getReq().getParameter("start").toString());
			int pageSize = Integer.parseInt(this.getReq().getParameter("length").toString());
			
			dtb.setCurrentPage(start/pageSize + 1);
			dtb.setPageSize(Integer.parseInt(this.getReq().getParameter("length")));
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			
			Map m = new HashMap();
			m.put("USER_ID", lui.getSeUser().getUserId());
			m.put("NOTE_TYPE", this.getReq().getParameter("NOTE_TYPE"));
			m.put("NOTE_STATUS", "未落实");
			m.put("PROJECT_ID", this.getProjectId());
			dtb.setConditions(m);
			dtb = seService.queryMySeTraceNote(dtb);
			this.setMsg(gson.toJson(dtb));
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 首页插件-本周计划
	 * url:/index/index!plugInPlanList.do
	 * @return
	 */
	public String plugInPlanList(){
		try{
			this.logger.info("plugInPlanList()");
			
			
			//项目列表在首页主页面已经查询,被引入的界面不再重复查询,所以注释以下代码
//			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
//			List projectList = this.seService.queryMyProject(lui.getUserId());
//			this.getRequest().put("projectList", projectList);
			
			this.setForwardPage("/pages/index/plugInPlanList.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 首页插件-本周计划获取数据
	 * url:/index/index!plugInWeekPlanGetData.do
	 * @return
	 */
	public String plugInPlanListGetData(){
		try{
			this.logger.info("plugInWeekPlanGetData()");
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			DataTableBean dtb = new DataTableBean();
			
		
			Calendar c = Calendar.getInstance();
			int year = c.get(Calendar.YEAR);
			int week = MyDateUtils.getWeekOfYear(MyDateUtils.toString(new Date()));
			
			int dayOfWeek = MyDateUtils.getDayOfWeek(c.get(Calendar.YEAR) + "-01-01");
			if(dayOfWeek != 1){
				week--;
			}
			
			//String planCode = year + "" + (week < 10 ? "0" + week : week);
			String planCode = planService.queryPlanInfo(year, week, StaticVar.PLAN_WEEK);
			String userId = this.getReq().getParameter("userId");
			
			
			int start = Integer.parseInt(this.getReq().getParameter("start").toString());
			int pageSize = Integer.parseInt(this.getReq().getParameter("length").toString());
			dtb.setCurrentPage(start/pageSize + 1);
			dtb.setPageSize(Integer.parseInt(this.getReq().getParameter("length")));
			
			Map m = new HashMap();
			m.put("userId", userId);
			m.put("planCode", planCode);
			m.put("projectId", projectId);
			dtb.setConditions(m);
			dtb = planService.queryPlanList(dtb);
			this.setMsg(gson.toJson(dtb));
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 首页插件-系统功能入口
	 * url:/index/index!plugInProjectPortal.do
	 * @return
	 */
	public String plugInProjectPortal(){
		try{
			this.logger.info("plugInProjectPortal()");
			
			this.setForwardPage("/pages/index/plugInProjectPortal.jsp");
			
			
			Calendar c = Calendar.getInstance();
			int currentWeek = MyDateUtils.getWeekOfYear(MyDateUtils.toString(c.getTime()));
			int currentYear = c.get(Calendar.YEAR);
			int currentMonth = (c.get(Calendar.MONTH) + 1);
			int dayOfWeek = MyDateUtils.getDayOfWeek(c.get(Calendar.YEAR) + "-01-01");
			if(dayOfWeek != 1){
				currentWeek--;
			}
			
			//当天所属周计划CODE
			String planCode = planService.queryPlanInfo(currentYear, currentWeek, StaticVar.PLAN_WEEK);
			
			
			this.logger.info(currentYear + "|" + currentWeek + "|" + StaticVar.PLAN_MONTH);
			this.getRequest().put("planCode", planCode);
			this.logger.info("=========================================" + planCode);
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 首页插件-项目记事
	 * url:/index/index!plugInDayNote.do
	 * @return
	 */
	public String plugInDayNote(){
		try{
			this.logger.info("plugInDayNote()");
			this.setForwardPage("/pages/index/plugInDayNote.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 首页插件-项目记事获取数据
	 * url:/index/index!plugInDayNoteGetData.do
	 * @return
	 */
	public String plugInDayNoteGetData(){
		try{
			this.logger.info("plugInDayNoteGetData()");
			
			
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			DataTableBean dtb = new DataTableBean();
			
			int start = Integer.parseInt(this.getReq().getParameter("start").toString());
			int pageSize = Integer.parseInt(this.getReq().getParameter("length").toString());
			
			dtb.setCurrentPage(start/pageSize + 1);
			dtb.setPageSize(Integer.parseInt(this.getReq().getParameter("length")));
			
			Map m = new HashMap();
			m.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			m.put("NOTE_TITLE", this.getReq().getParameter("NOTE_TITLE"));
			
			dtb.setConditions(m);
			dtb = seService.querySeDayNote(dtb);
			this.setMsg(gson.toJson(dtb));
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 首页插件-项目会议
	 * url:/index/index!plugInDayNote.do
	 * @return
	 */
	public String plugInMeeting(){
		try{
			this.logger.info("plugInMeeting()");
			this.setForwardPage("/pages/index/plugInMeeting.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 首页插件-项目会议获取数据
	 * url:/index/index!plugInMeetingGetData.do
	 * @return
	 */
	public String plugInMeetingGetData(){
		try{
			this.logger.info("plugInMeetingGetData()");
			
			
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			DataTableBean dtb = new DataTableBean();
			
			int start = Integer.parseInt(this.getReq().getParameter("start").toString());
			int pageSize = Integer.parseInt(this.getReq().getParameter("length").toString());
			
			dtb.setCurrentPage(start/pageSize + 1);
			dtb.setPageSize(Integer.parseInt(this.getReq().getParameter("length")));
			
			Map m = new HashMap();
			m.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			m.put("METTING_NAME", this.getReq().getParameter("METTING_NAME"));
			
			dtb.setConditions(m);
			dtb = seService.querySeMeetingForBootstrap(dtb);
			this.setMsg(gson.toJson(dtb));
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	/**
	 * 首页插件-风险列表
	 * url:/index/index!plugInRisk.do
	 * @return
	 */
	public String plugInRisk(){
		try{
			this.logger.info("plugInRisk()");
			this.setForwardPage("/pages/index/plugInRisk.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 首页插件-项目会议获取数据
	 * url:/index/index!plugInRiskGetData.do
	 * @return
	 */
	public String plugInRiskGetData(){
		try{
			this.logger.info("plugInRiskGetData()");
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			DataTableBean dtb = new DataTableBean();
			
			int start = Integer.parseInt(this.getReq().getParameter("start").toString());
			int pageSize = Integer.parseInt(this.getReq().getParameter("length").toString());
			
			dtb.setCurrentPage(start/pageSize + 1);
			dtb.setPageSize(Integer.parseInt(this.getReq().getParameter("length")));
			
			Map m = new HashMap();
			m.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			m.put("RISK_CONTENT", this.getReq().getParameter("RISK_CONTENT"));
			m.put("IS_CLOSE", "0");
			
			dtb.setConditions(m);
			dtb = seService.querySeRiskForBootstrap(dtb);
			this.setMsg(gson.toJson(dtb));
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 首页插件-公共模块列表
	 * url:/index/index!plugInPubModule.do
	 * @return
	 */
	public String plugInPubModule(){
		try{
			this.logger.info("plugInPubModule()");
			List classifyList = this.commonService.queryDicForOption("module_classify");
			this.getRequest().put("classifyList", classifyList);
			this.setForwardPage("/pages/index/plugInPubModule.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 首页插件-公共模块获取数据
	 * url:/index/index!plugInPubModuleGetData.do
	 * @return
	 */
	public String plugInPubModuleGetData(){
		try{
			this.logger.info("plugInRiskGetData()");
			
			
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			DataTableBean dtb = new DataTableBean();
			
			int start = Integer.parseInt(this.getReq().getParameter("start").toString());
			int pageSize = Integer.parseInt(this.getReq().getParameter("length").toString());
			
			dtb.setCurrentPage(start/pageSize + 1);
			dtb.setPageSize(Integer.parseInt(this.getReq().getParameter("length")));
			
			Map m = new HashMap();
			m.put("PROJECT_ID", this.getReq().getParameter("PROJECT_ID"));
			m.put("MODULE_TITLE", this.getReq().getParameter("MODULE_TITLE"));
			m.put("MODULE_CLASSIFY", this.getReq().getParameter("MODULE_CLASSIFY"));
			
			dtb.setConditions(m);
			dtb = seService.querySePubModuleForBootstrap(dtb);
			this.setMsg(gson.toJson(dtb));
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	/**
	 * 首页插件-个人备忘列表
	 * url:/index/index!plugInBacklog.do
	 * @return
	 */
	public String plugInBacklog(){
		try{
			this.logger.info("plugInBacklog()");
			this.setForwardPage("/pages/index/plugInBacklog.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 首页插件-公共模块获取数据
	 * url:/index/index!plugInBacklogGetData.do
	 * @return
	 */
	public String plugInBacklogGetData(){
		try{
			this.logger.info("plugInBacklogGetData()");
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			DataTableBean dtb = new DataTableBean();
			
			int start = Integer.parseInt(this.getReq().getParameter("start").toString());
			int pageSize = Integer.parseInt(this.getReq().getParameter("length").toString());
			
			dtb.setCurrentPage(start/pageSize + 1);
			dtb.setPageSize(Integer.parseInt(this.getReq().getParameter("length")));
			
			Map m = new HashMap();
			m.put("blSys", this.getReq().getParameter("PROJECT_ID"));
			m.put("blContent", this.getReq().getParameter("blContent"));
			m.put("blStatus", this.getReq().getParameter("blStatus"));
			dtb.setConditions(m);
			dtb = backlogInfoService.queryBacklogForIndexPlugin(dtb);
			this.setMsg(gson.toJson(dtb));
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 首页插件-登录人信息
	 * url:/index/index!plugInLoginUserInfo.do
	 * @return
	 */
	public String plugInLoginUserInfo(){
		try{
			this.logger.info("plugInLoginUserInfo()");
			
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			this.getRequest().put("lui", lui);
			this.setForwardPage("/pages/index/plugInLoginUserInfo.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 首页插件-个人天计划
	 * url:/index/index!plugInDayPlan.do
	 * @return
	 */
	public String plugInDayPlan(){
		try{
			this.logger.info("plugInDayPlan()");
			LoginUserInfo lui = (LoginUserInfo)this.getSession().get("loginUserInfo");
			this.getRequest().put("lui", lui);
			this.getRequest().put("currentDate", MyDateUtils.toString(new Date()));
			this.setForwardPage("/pages/index/plugInDayPlan.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 首页插件-个人天计划获取数据
	 * url:/index/index!plugInDayPlanGetData.do
	 * @return
	 */
	public String plugInDayPlanGetData(){
		try{
			this.logger.info("plugInDayPlanGetData()");
			
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			DataTableBean dtb = new DataTableBean();
			
			//int start = Integer.parseInt(this.getReq().getParameter("start").toString());
			//int pageSize = Integer.parseInt(this.getReq().getParameter("length").toString());
			
			//dtb.setCurrentPage(start/pageSize + 1);
			//dtb.setPageSize(Integer.parseInt(this.getReq().getParameter("length")));
			
			Map map = new HashMap();
			//日计划内容
			map.put("PLAN_CONTENT", this.getReq().getParameter("PLAN_CONTENT"));
			//所属人员
			map.put("USER_ID", this.getReq().getParameter("USER_ID"));
			//所属日期
			map.put("PLAN_DATE", this.getReq().getParameter("PLAN_DATE"));
			//备注
			map.put("PLAN_REMARK", this.getReq().getParameter("PLAN_REMARK"));
			//状态
			map.put("STATUS", this.getReq().getParameter("STATUS"));
			//是否删除
			map.put("IS_DELETE", this.getReq().getParameter("IS_DELETE"));
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			dtb.setConditions(map);
			dtb = this.seService.queryDayPlanForIndexPlugin(dtb);
			this.setMsg(gson.toJson(dtb));
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	
	
	
	
	public void setSysDicPub( SysDicPub sysDicPub) {
		this.sysDicPub = sysDicPub;
	}
	public SysDicPub getSysDicPub() {
		return sysDicPub;
	}
	public SeMapUser getSeMapUser() {
		return seMapUser;
	}
	public void setSeMapUser(SeMapUser seMapUser) {
		this.seMapUser = seMapUser;
	}
	public SeUser getSeUser() {
		return seUser;
	}


	public void setSeUser(SeUser seUser) {
		this.seUser = seUser;
	}

	public String getProjectId() {
		return projectId;
	}

	public void setProjectId(String projectId) {
		this.projectId = projectId;
	}
	
}
