package cn.thd.service.vita;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import cn.thd.pojo.vita.VitaEduHis;
import cn.thd.pojo.vita.VitaInfo;
import cn.thd.pojo.vita.VitaProjectDuty;
import cn.thd.pojo.vita.VitaProjectHis;
import cn.thd.pojo.vita.VitaProjectTec;
import cn.thd.pojo.vita.VitaTechnical;
import cn.thd.pojo.vita.VitaWorkHis;

import com.thd.core.dao.PubDao;
import com.thd.core.service.PubServiceImpl;
import com.thd.util.Page;
import com.thd.util.StringUtil;
/**
 * file autogenerated by ThirdteenDevils's CodeGenUtil 
 */
@Service("vitaService")
public class VitaServiceImpl extends PubServiceImpl implements VitaService {
	@Resource 
	private PubDao pubDao;
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaInfoService#queryVitaInfo(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List queryVitaInfo(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.VITA_ID as VITA_ID, " + //0   
			" t.USER_ID as USER_ID, " + //0  			
			" t.VITA_NAME as VITA_NAME, " + //1  			
			" t.SEX as SEX, " + //2  			
			" t.BIRTHDAY as BIRTHDAY, " + //3  			
			" t.PHOTO as PHOTO, " + //4  			
			" t.EDU as EDU, " + //5  			
			" t.TEL as TEL, " + //6  			
			" t.INTERDUCE as INTERDUCE, " + //7  			
			" t.IS_VALID as IS_VALID, " + //8  			
			" t.PRE_PAY as PRE_PAY, " + //9  			
			" t.CREATE_TIME as CREATE_TIME " + //10  			
			
			" from VITA_INFO t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("VITA_ID"))){
				sql += " and t.VITA_ID like ? ";
				param.add("%" + m.get("VITA_ID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("USER_ID"))){
					sql += " and upper(t.USER_ID) like upper(?) ";
					param.add("%" + m.get("USER_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("VITA_NAME"))){
					sql += " and upper(t.VITA_NAME) like upper(?) ";
					param.add("%" + m.get("VITA_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("SEX"))){
					sql += " and upper(t.SEX) like upper(?) ";
					param.add("%" + m.get("SEX").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("BIRTHDAY"))){
					sql += " and t.BIRTHDAY = ? ";
					param.add(m.get("BIRTHDAY").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("PHOTO"))){
					sql += " and upper(t.PHOTO) like upper(?) ";
					param.add("%" + m.get("PHOTO").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("EDU"))){
					sql += " and upper(t.EDU) like upper(?) ";
					param.add("%" + m.get("EDU").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("TEL"))){
					sql += " and upper(t.TEL) like upper(?) ";
					param.add("%" + m.get("TEL").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("INTERDUCE"))){
					sql += " and upper(t.INTERDUCE) like upper(?) ";
					param.add("%" + m.get("INTERDUCE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_VALID"))){
					sql += " and upper(t.IS_VALID) like upper(?) ";
					param.add("%" + m.get("IS_VALID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("PRE_PAY"))){
					sql += " and upper(t.PRE_PAY) like upper(?) ";
					param.add("%" + m.get("PRE_PAY").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("CREATE_TIME"))){
					sql += " and t.CREATE_TIME = ? ";
					param.add(m.get("CREATE_TIME").toString().trim());
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaInfoService#saveVitaInfo(cn.thd.pojo.vita.VitaInfo)
	 */
	public void saveVitaInfo(VitaInfo obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaInfoService#updateVitaInfo(cn.thd.pojo.vita.VitaInfo)
	 */
	public void updateVitaInfo(VitaInfo obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaInfoService#queryVitaInfoById(java.lang.String)
	 */
	public VitaInfo queryVitaInfoById(java.lang.String pk){
		return (VitaInfo)this.pubDao.findById(VitaInfo.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaInfoService#deleteVitaInfoById(java.lang.String)
	 */
	public void deleteVitaInfoById(java.lang.String pk){
		VitaInfo obj = this.queryVitaInfoById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除简历信息对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteVitaInfoByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteVitaInfoById(id);
						
						
					}
				}
			}
		}
	};
	
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaEduHisService#queryVitaEduHis(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List queryVitaEduHis(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.EDU_HIS_ID as EDU_HIS_ID, " + //0   
			" t.VITA_ID as VITA_ID, " + //0  			
			" t.SCHOOL_NAME as SCHOOL_NAME, " + //1  			
			" t.BEGIN_DATE as BEGIN_DATE, " + //2  			
			" t.FINISH_DATE as FINISH_DATE, " + //3  			
			" t.EDU_LEVEL as EDU_LEVEL, " + //4  			
			" t.IS_VALID as IS_VALID, " + //5  			
			" t.CREATE_TIME as CREATE_TIME " + //6  			
			
			" from VITA_EDU_HIS t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("EDU_HIS_ID"))){
				sql += " and t.EDU_HIS_ID like ? ";
				param.add("%" + m.get("EDU_HIS_ID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("VITA_ID"))){
					sql += " and upper(t.VITA_ID) like upper(?) ";
					param.add("%" + m.get("VITA_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("SCHOOL_NAME"))){
					sql += " and upper(t.SCHOOL_NAME) like upper(?) ";
					param.add("%" + m.get("SCHOOL_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("BEGIN_DATE"))){
					sql += " and t.BEGIN_DATE = ? ";
					param.add(m.get("BEGIN_DATE").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("FINISH_DATE"))){
					sql += " and t.FINISH_DATE = ? ";
					param.add(m.get("FINISH_DATE").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("EDU_LEVEL"))){
					sql += " and upper(t.EDU_LEVEL) like upper(?) ";
					param.add("%" + m.get("EDU_LEVEL").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_VALID"))){
					sql += " and upper(t.IS_VALID) like upper(?) ";
					param.add("%" + m.get("IS_VALID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("CREATE_TIME"))){
					sql += " and t.CREATE_TIME = ? ";
					param.add(m.get("CREATE_TIME").toString().trim());
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaEduHisService#saveVitaEduHis(cn.thd.pojo.vita.VitaEduHis)
	 */
	public void saveVitaEduHis(VitaEduHis obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaEduHisService#updateVitaEduHis(cn.thd.pojo.vita.VitaEduHis)
	 */
	public void updateVitaEduHis(VitaEduHis obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaEduHisService#queryVitaEduHisById(java.lang.String)
	 */
	public VitaEduHis queryVitaEduHisById(java.lang.String pk){
		return (VitaEduHis)this.pubDao.findById(VitaEduHis.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaEduHisService#deleteVitaEduHisById(java.lang.String)
	 */
	public void deleteVitaEduHisById(java.lang.String pk){
		VitaEduHis obj = this.queryVitaEduHisById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除教育经历对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteVitaEduHisByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteVitaEduHisById(id);
						
						
					}
				}
			}
		}
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaProjectDutyService#queryVitaProjectDuty(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List queryVitaProjectDuty(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.DUTY_ID as DUTY_ID, " + //0   
			" t.PROJECT_HIS_ID as PROJECT_HIS_ID, " + //0  			
			" t.DUTY_DESC as DUTY_DESC, " + //1  			
			" t.IS_VALID as IS_VALID, " + //2  			
			" t.CREATE_TIME as CREATE_TIME " + //3  			
			
			" from VITA_PROJECT_DUTY t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("DUTY_ID"))){
				sql += " and t.DUTY_ID like ? ";
				param.add("%" + m.get("DUTY_ID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("PROJECT_HIS_ID"))){
					sql += " and upper(t.PROJECT_HIS_ID) like upper(?) ";
					param.add("%" + m.get("PROJECT_HIS_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("DUTY_DESC"))){
					sql += " and upper(t.DUTY_DESC) like upper(?) ";
					param.add("%" + m.get("DUTY_DESC").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_VALID"))){
					sql += " and upper(t.IS_VALID) like upper(?) ";
					param.add("%" + m.get("IS_VALID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("CREATE_TIME"))){
					sql += " and t.CREATE_TIME = ? ";
					param.add(m.get("CREATE_TIME").toString().trim());
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaProjectDutyService#saveVitaProjectDuty(cn.thd.pojo.vita.VitaProjectDuty)
	 */
	public void saveVitaProjectDuty(VitaProjectDuty obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaProjectDutyService#updateVitaProjectDuty(cn.thd.pojo.vita.VitaProjectDuty)
	 */
	public void updateVitaProjectDuty(VitaProjectDuty obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaProjectDutyService#queryVitaProjectDutyById(java.lang.String)
	 */
	public VitaProjectDuty queryVitaProjectDutyById(java.lang.String pk){
		return (VitaProjectDuty)this.pubDao.findById(VitaProjectDuty.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaProjectDutyService#deleteVitaProjectDutyById(java.lang.String)
	 */
	public void deleteVitaProjectDutyById(java.lang.String pk){
		VitaProjectDuty obj = this.queryVitaProjectDutyById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除项目经历对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteVitaProjectDutyByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteVitaProjectDutyById(id);
						
						
					}
				}
			}
		}
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaProjectHisService#queryVitaProjectHis(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List queryVitaProjectHis(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.PROJECT_HIS_ID as PROJECT_HIS_ID, " + //0   
			" t.WORK_HIS_ID as WORK_HIS_ID, " + //0  			
			" t.PROJECT_NAME as PROJECT_NAME, " + //1  			
			" t.POSITION as POSITION, " + //2  			
			" t.DUTY as DUTY, " + //3  			
			" t.BEGIN_DATE as BEGIN_DATE, " + //4  			
			" t.FINISH_DATE as FINISH_DATE, " + //5  			
			" t.PROJECT_DESC as PROJECT_DESC, " + //6  			
			" t.IS_VALID as IS_VALID, " + //7  			
			" t.CREATE_TIME as CREATE_TIME " + //8  			
			
			" from VITA_PROJECT_HIS t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("PROJECT_HIS_ID"))){
				sql += " and t.PROJECT_HIS_ID like ? ";
				param.add("%" + m.get("PROJECT_HIS_ID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("WORK_HIS_ID"))){
					sql += " and upper(t.WORK_HIS_ID) like upper(?) ";
					param.add("%" + m.get("WORK_HIS_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("PROJECT_NAME"))){
					sql += " and upper(t.PROJECT_NAME) like upper(?) ";
					param.add("%" + m.get("PROJECT_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("POSITION"))){
					sql += " and upper(t.POSITION) like upper(?) ";
					param.add("%" + m.get("POSITION").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("DUTY"))){
					sql += " and upper(t.DUTY) like upper(?) ";
					param.add("%" + m.get("DUTY").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("BEGIN_DATE"))){
					sql += " and t.BEGIN_DATE = ? ";
					param.add(m.get("BEGIN_DATE").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("FINISH_DATE"))){
					sql += " and t.FINISH_DATE = ? ";
					param.add(m.get("FINISH_DATE").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("PROJECT_DESC"))){
					sql += " and upper(t.PROJECT_DESC) like upper(?) ";
					param.add("%" + m.get("PROJECT_DESC").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_VALID"))){
					sql += " and upper(t.IS_VALID) like upper(?) ";
					param.add("%" + m.get("IS_VALID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("CREATE_TIME"))){
					sql += " and t.CREATE_TIME = ? ";
					param.add(m.get("CREATE_TIME").toString().trim());
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaProjectHisService#saveVitaProjectHis(cn.thd.pojo.vita.VitaProjectHis)
	 */
	public void saveVitaProjectHis(VitaProjectHis obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaProjectHisService#updateVitaProjectHis(cn.thd.pojo.vita.VitaProjectHis)
	 */
	public void updateVitaProjectHis(VitaProjectHis obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaProjectHisService#queryVitaProjectHisById(java.lang.String)
	 */
	public VitaProjectHis queryVitaProjectHisById(java.lang.String pk){
		return (VitaProjectHis)this.pubDao.findById(VitaProjectHis.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaProjectHisService#deleteVitaProjectHisById(java.lang.String)
	 */
	public void deleteVitaProjectHisById(java.lang.String pk){
		VitaProjectHis obj = this.queryVitaProjectHisById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除项目经历对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteVitaProjectHisByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteVitaProjectHisById(id);
						
						
					}
				}
			}
		}
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaProjectTecService#queryVitaProjectTec(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List queryVitaProjectTec(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.PROJECT_TEC_ID as PROJECT_TEC_ID, " + //0   
			" t.PROJECT_HIS_ID as PROJECT_HIS_ID, " + //0  			
			" t.TEC_NAME as TEC_NAME, " + //1  			
			" t.TEC_CLASSIFY as TEC_CLASSIFY, " + //2  			
			" t.IS_VALID as IS_VALID, " + //3  			
			" t.CREATE_TIME as CREATE_TIME " + //4  			
			
			" from VITA_PROJECT_TEC t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("PROJECT_TEC_ID"))){
				sql += " and t.PROJECT_TEC_ID like ? ";
				param.add("%" + m.get("PROJECT_TEC_ID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("PROJECT_HIS_ID"))){
					sql += " and upper(t.PROJECT_HIS_ID) like upper(?) ";
					param.add("%" + m.get("PROJECT_HIS_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("TEC_NAME"))){
					sql += " and upper(t.TEC_NAME) like upper(?) ";
					param.add("%" + m.get("TEC_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("TEC_CLASSIFY"))){
					sql += " and upper(t.TEC_CLASSIFY) like upper(?) ";
					param.add("%" + m.get("TEC_CLASSIFY").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_VALID"))){
					sql += " and upper(t.IS_VALID) like upper(?) ";
					param.add("%" + m.get("IS_VALID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("CREATE_TIME"))){
					sql += " and t.CREATE_TIME = ? ";
					param.add(m.get("CREATE_TIME").toString().trim());
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaProjectTecService#saveVitaProjectTec(cn.thd.pojo.vita.VitaProjectTec)
	 */
	public void saveVitaProjectTec(VitaProjectTec obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaProjectTecService#updateVitaProjectTec(cn.thd.pojo.vita.VitaProjectTec)
	 */
	public void updateVitaProjectTec(VitaProjectTec obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaProjectTecService#queryVitaProjectTecById(java.lang.String)
	 */
	public VitaProjectTec queryVitaProjectTecById(java.lang.String pk){
		return (VitaProjectTec)this.pubDao.findById(VitaProjectTec.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaProjectTecService#deleteVitaProjectTecById(java.lang.String)
	 */
	public void deleteVitaProjectTecById(java.lang.String pk){
		VitaProjectTec obj = this.queryVitaProjectTecById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除项目包含技术对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteVitaProjectTecByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteVitaProjectTecById(id);
						
						
					}
				}
			}
		}
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaTechnicalService#queryVitaTechnical(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List queryVitaTechnical(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.TEC_ID as TEC_ID, " + //0   
			" t.VITA_ID as VITA_ID, " + //0  			
			" t.TEC_NAME as TEC_NAME, " + //1  			
			" t.BEGIN_TIME as BEGIN_TIME, " + //2  			
			" t.PROFICIENCY as PROFICIENCY, " + //3  			
			" t.IS_VALID as IS_VALID, " + //4  			
			" t.CREATE_TIME as CREATE_TIME " + //5  			
			
			" from VITA_TECHNICAL t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("TEC_ID"))){
				sql += " and t.TEC_ID like ? ";
				param.add("%" + m.get("TEC_ID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("VITA_ID"))){
					sql += " and upper(t.VITA_ID) like upper(?) ";
					param.add("%" + m.get("VITA_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("TEC_NAME"))){
					sql += " and upper(t.TEC_NAME) like upper(?) ";
					param.add("%" + m.get("TEC_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("BEGIN_TIME"))){
					sql += " and t.BEGIN_TIME = ? ";
					param.add(m.get("BEGIN_TIME").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("PROFICIENCY"))){
					sql += " and upper(t.PROFICIENCY) like upper(?) ";
					param.add("%" + m.get("PROFICIENCY").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_VALID"))){
					sql += " and upper(t.IS_VALID) like upper(?) ";
					param.add("%" + m.get("IS_VALID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("CREATE_TIME"))){
					sql += " and t.CREATE_TIME = ? ";
					param.add(m.get("CREATE_TIME").toString().trim());
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaTechnicalService#saveVitaTechnical(cn.thd.pojo.vita.VitaTechnical)
	 */
	public void saveVitaTechnical(VitaTechnical obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaTechnicalService#updateVitaTechnical(cn.thd.pojo.vita.VitaTechnical)
	 */
	public void updateVitaTechnical(VitaTechnical obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaTechnicalService#queryVitaTechnicalById(java.lang.String)
	 */
	public VitaTechnical queryVitaTechnicalById(java.lang.String pk){
		return (VitaTechnical)this.pubDao.findById(VitaTechnical.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaTechnicalService#deleteVitaTechnicalById(java.lang.String)
	 */
	public void deleteVitaTechnicalById(java.lang.String pk){
		VitaTechnical obj = this.queryVitaTechnicalById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除技能熟练度对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteVitaTechnicalByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteVitaTechnicalById(id);
						
						
					}
				}
			}
		}
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaWorkHisService#queryVitaWorkHis(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List queryVitaWorkHis(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.WORK_HIS_ID as WORK_HIS_ID, " + //0   
			" t.VITA_ID as VITA_ID, " + //0  			
			" t.COMPANY_NAME as COMPANY_NAME, " + //1  			
			" t.BEGIN_DATE as BEGIN_DATE, " + //2  			
			" t.FINISH_DATE as FINISH_DATE, " + //3  			
			" t.COMPANY_SCALE as COMPANY_SCALE, " + //4  			
			" t.IS_VALID as IS_VALID, " + //5  			
			" t.CREATE_TIME as CREATE_TIME " + //6  			
			
			" from VITA_WORK_HIS t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("WORK_HIS_ID"))){
				sql += " and t.WORK_HIS_ID like ? ";
				param.add("%" + m.get("WORK_HIS_ID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("VITA_ID"))){
					sql += " and upper(t.VITA_ID) like upper(?) ";
					param.add("%" + m.get("VITA_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("COMPANY_NAME"))){
					sql += " and upper(t.COMPANY_NAME) like upper(?) ";
					param.add("%" + m.get("COMPANY_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("BEGIN_DATE"))){
					sql += " and t.BEGIN_DATE = ? ";
					param.add(m.get("BEGIN_DATE").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("FINISH_DATE"))){
					sql += " and t.FINISH_DATE = ? ";
					param.add(m.get("FINISH_DATE").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("COMPANY_SCALE"))){
					sql += " and upper(t.COMPANY_SCALE) like upper(?) ";
					param.add("%" + m.get("COMPANY_SCALE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_VALID"))){
					sql += " and upper(t.IS_VALID) like upper(?) ";
					param.add("%" + m.get("IS_VALID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("CREATE_TIME"))){
					sql += " and t.CREATE_TIME = ? ";
					param.add(m.get("CREATE_TIME").toString().trim());
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaWorkHisService#saveVitaWorkHis(cn.thd.pojo.vita.VitaWorkHis)
	 */
	public void saveVitaWorkHis(VitaWorkHis obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaWorkHisService#updateVitaWorkHis(cn.thd.pojo.vita.VitaWorkHis)
	 */
	public void updateVitaWorkHis(VitaWorkHis obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaWorkHisService#queryVitaWorkHisById(java.lang.String)
	 */
	public VitaWorkHis queryVitaWorkHisById(java.lang.String pk){
		return (VitaWorkHis)this.pubDao.findById(VitaWorkHis.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.vita.VitaWorkHisService#deleteVitaWorkHisById(java.lang.String)
	 */
	public void deleteVitaWorkHisById(java.lang.String pk){
		VitaWorkHis obj = this.queryVitaWorkHisById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除工作经历对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteVitaWorkHisByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteVitaWorkHisById(id);
						
						
					}
				}
			}
		}
	};
	
}
