package cn.thd.service.se;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import cn.thd.bean.DataGrid;
import cn.thd.bean.LoginUserInfo;
import cn.thd.bean.MenuBean;
import cn.thd.bean.StaticVar;
import cn.thd.dto.DataTableBean;
import cn.thd.pojo.se.SeAuth;
import cn.thd.pojo.se.SeDayNote;
import cn.thd.pojo.se.SeDayPlan;
import cn.thd.pojo.se.SeMapProjectUser;
import cn.thd.pojo.se.SeMapRoleAuth;
import cn.thd.pojo.se.SeMapRoleMenu;
import cn.thd.pojo.se.SeMapUserRole;
import cn.thd.pojo.se.SeMeeting;
import cn.thd.pojo.se.SeMeetingRecord;
import cn.thd.pojo.se.SeMenu;
import cn.thd.pojo.se.SePersonLog;
import cn.thd.pojo.se.SeProjectDoc;
import cn.thd.pojo.se.SeProjectInfo;
import cn.thd.pojo.se.SePubModule;
import cn.thd.pojo.se.SeRequirementTrace;
import cn.thd.pojo.se.SeRisk;
import cn.thd.pojo.se.SeRole;
import cn.thd.pojo.se.SeTraceDefect;
import cn.thd.pojo.se.SeTraceDefectRepair;
import cn.thd.pojo.se.SeTraceKey;
import cn.thd.pojo.se.SeTraceNote;
import cn.thd.pojo.se.SeTraceTask;
import cn.thd.pojo.se.SeTraceValueString;
import cn.thd.pojo.se.SeTraceValueText;
import cn.thd.pojo.se.SeUser;
import cn.thd.pojo.se.SeUserRewardAmerce;
import cn.thd.service.common.CommonService;
import cn.thd.service.sys.SysService;

import com.thd.core.dao.JdbcDao;
import com.thd.core.dao.PubDao;
import com.thd.core.service.PubServiceImpl;
import com.thd.util.ListUtil;
import com.thd.util.MyDateUtils;
import com.thd.util.MyListUtils;
import com.thd.util.MyStringUtils;
import com.thd.util.Page;
import com.thd.util.StringUtil;
import com.thd.util.TreeUtil;
/**
 * file autogenerated by ThirdteenDevils's CodeGenUtil 
 */
@Service("seService")
public class SeServiceImpl extends PubServiceImpl implements SeService {
	@Resource 
	private PubDao pubDao;
	@Resource
	private JdbcDao jdbcDao;
	@Resource
	private SeRequirementTraceService seRequirementTraceService;
	@Resource 
	private CommonService commonService;
	@Resource
	private SysService sysService;
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeDayNoteService#querySeDayNote(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeDayNote(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.NOTE_ID as NOTE_ID, " + //0  日记id 
			" t.PROJECT_ID as PROJECT_ID, " + //0 项目id 			
			" t.NOTE_DATE as NOTE_DATE, " + //1 日记日期 			
			" t.NOTE_TITLE as NOTE_TITLE, " + //2 日记标题 			
			" t.NOTE_CONTENT as NOTE_CONTENT, " + //3 日记内容 			
			" t.IS_VALID as IS_VALID, " + //4 是否有效 			
			" t.IS_DELETE as IS_DELETE, " + //5 是否删除 			
			" t.CREATE_TIME as CREATE_TIME, " + //6 创建时间 			
			" t.UPDATE_TIME as UPDATE_TIME, " + //8 修改时间 
			" t.NOTE_TYPE as NOTE_TYPE, " + //9 类别
			" p.PRO_NAME as PROJECTNAME, " + //10 修改时间 
			" d.DIC_NAME as DIC_NAME " + //10 修改时间 
			" from SE_DAY_NOTE t  left join SE_PROJECT_INFO p on p.project_id = t.project_id "+ 
			" left join SYS_DIC_PUB d on t.NOTE_TYPE = d.DIC_ID where t.IS_DELETE = ? ";
		param.add(StaticVar.ISDELETE_UNDELETE);
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("NOTE_ID"))){
				sql += " and t.NOTE_ID like ? ";
				param.add("%" + m.get("NOTE_ID").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("PROJECT_ID"))){
				sql += " and (upper(t.PROJECT_ID) like upper(?) or t.PROJECT_ID is null or t.PROJECT_ID = '')";
				param.add("%" + m.get("PROJECT_ID").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("NOTE_TYPE"))){
				sql += " and upper(t.NOTE_TYPE) = upper(?) ";
				param.add( m.get("NOTE_TYPE").toString().trim() );
			}
			if(StringUtil.isNotEmpty(m.get("NOTE_DATE"))){
				sql += " and t.NOTE_DATE = ? ";
				param.add(m.get("NOTE_DATE").toString().trim());
			}
			if(StringUtil.isNotEmpty(m.get("NOTE_TITLE"))){
				sql += " and upper(t.NOTE_TITLE) like upper(?) ";
				param.add("%" + m.get("NOTE_TITLE").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("NOTE_CONTENT"))){
				sql += " and upper(t.NOTE_CONTENT) like upper(?) ";
				param.add("%" + m.get("NOTE_CONTENT").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("IS_VALID"))){
				sql += " and upper(t.IS_VALID) like upper(?) ";
				param.add("%" + m.get("IS_VALID").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("IS_DELETE"))){
				sql += " and upper(t.IS_DELETE) like upper(?) ";
				param.add("%" + m.get("IS_DELETE").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("CREATE_TIME"))){
				sql += " and t.CREATE_TIME = ? ";
				param.add(m.get("CREATE_TIME").toString().trim());
			}
			if(StringUtil.isNotEmpty(m.get("UPDATE_TIME"))){
				sql += " and t.UPDATE_TIME = ? ";
				param.add(m.get("UPDATE_TIME").toString().trim());
			}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		//List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		List l = this.jdbcDao.query(sql,param.toArray(), p);	
		return l;

	};
	
	
	public DataTableBean querySeDayNote(DataTableBean dtb){
		Page p = new Page();
		p.setCurrentPage(dtb.getCurrentPage());
		p.setPageSize(dtb.getPageSize());
		List r = this.querySeDayNote(dtb.getConditions(),p);
		if(MyListUtils.isEmpty(r)){
			r = new ArrayList();
		}
		dtb.setData(r);
		dtb.setRecordsTotal(p.getListSize());
		dtb.setRecordsFiltered(p.getListSize());
		return dtb;
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeDayNoteService#saveSeDayNote(cn.thd.pojo.se.SeDayNote)
	 */
	public void saveSeDayNote(SeDayNote obj) {
		obj.setIsValid(StaticVar.ISVALID_VALID);
		obj.setIsDelete(StaticVar.ISDELETE_UNDELETE);
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeDayNoteService#updateSeDayNote(cn.thd.pojo.se.SeDayNote)
	 */
	public void updateSeDayNote(SeDayNote obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeDayNoteService#querySeDayNoteById(java.lang.String)
	 */
	public SeDayNote querySeDayNoteById(java.lang.String pk){
		return (SeDayNote)this.pubDao.findById(SeDayNote.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeDayNoteService#deleteSeDayNoteById(java.lang.String)
	 */
	public void deleteSeDayNoteById(java.lang.String pk){
		SeDayNote obj = this.querySeDayNoteById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除项目日志对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeDayNoteByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeDayNoteById(id);
						
						
					}
				}
			}
		}
	};
	
	
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceKeyService#querySeTraceKey(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeTraceKey(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.KID as KID, " + //0  主键 
			" t.TRACE_ID as TRACE_ID, " + //0 矩阵id 			
			" t.KNAME as KNAME, " + //1 属性名称 			
			" t.KCODE as KCODE, " + //2 属性代码(小写英文字母) 			
			" t.KTYPE as KTYPE, " + //3 属性类型 STRING:字符串 CLOB:大文本 DIC:字典  INT:整数  FLOAT:小数  DATE:日期 			
			" t.KDESC as KDESC, " + //4 属性备注 	
			" trace.TRACE_NAME as TRACE_NAME " + //5 矩阵名称
			
			" from SE_TRACE_KEY t left join SE_REQUIREMENT_TRACE trace on t.TRACE_ID = trace.TRACE_ID  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("KID"))){
				sql += " and t.KID like ? ";
				param.add("%" + m.get("KID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("TRACE_ID"))){
					sql += " and t.TRACE_ID = ? ";
					param.add(m.get("TRACE_ID").toString().trim() );
				}
				if(StringUtil.isNotEmpty(m.get("KNAME"))){
					sql += " and upper(t.KNAME) like upper(?) ";
					param.add("%" + m.get("KNAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("KCODE"))){
					sql += " and upper(t.KCODE) like upper(?) ";
					param.add("%" + m.get("KCODE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("KTYPE"))){
					sql += " and upper(t.KTYPE) like upper(?) ";
					param.add("%" + m.get("KTYPE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("KDESC"))){
					sql += " and upper(t.KDESC) like upper(?) ";
					param.add("%" + m.get("KDESC").toString().trim() + "%");
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	public List traceFileter(String key){
		String sql = 
				" select "+ 
				"t.trace_id as traceId,"+ 
				"t.trace_name as traceName "+
				"from se_requirement_trace t "+ 
				"where UPPER(t.trace_name) like UPPER(?)";
		List<String> param = new ArrayList<String>();
		param.add("%" + key.trim().toUpperCase()+ "%");
		List l = this.jdbcDao.query(sql, param.toArray(), null);
//		System.out.println(l);
		return l;
//		String r = "";
//		if(MyListUtils.isNotEmpty(l)){
//			for(Object obj : l){
//				if(obj != null){
//					try{
//						Map m = (Map)obj;
//						r += m.get("trace_id").toString()+",";
//					}catch(Exception e){
//						e.printStackTrace();
//					}
//				}
//			}
//		}
//		return r;
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceKeyService#saveSeTraceKey(cn.thd.pojo.se.SeTraceKey)
	 */
	public void saveSeTraceKey(SeTraceKey obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceKeyService#updateSeTraceKey(cn.thd.pojo.se.SeTraceKey)
	 */
	public void updateSeTraceKey(SeTraceKey obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceKeyService#querySeTraceKeyById(java.lang.String)
	 */
	public SeTraceKey querySeTraceKeyById(java.lang.String pk){
		return (SeTraceKey)this.pubDao.findById(SeTraceKey.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceKeyService#deleteSeTraceKeyById(java.lang.String)
	 */
	public void deleteSeTraceKeyById(java.lang.String pk){
		SeTraceKey obj = this.querySeTraceKeyById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除矩阵属性对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeTraceKeyByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeTraceKeyById(id);
						
						
					}
				}
			}
		}
	};
	
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeService#queryTracePros(java.lang.String, java.lang.String)
	 */
	public List queryTracePros(String traceId,String proType){
		String sql = "select "+
				" t.KID as KID, " + //0  主键 
				" t.TRACE_ID as TRACE_ID, " + //0 矩阵id 			
				" t.KNAME as KNAME, " + //1 属性名称 			
				" t.KCODE as KCODE, " + //2 属性代码(小写英文字母) 			
				" t.KTYPE as KTYPE, " + //3 属性类型 STRING:字符串 CLOB:大文本 DIC:字典  INT:整数  FLOAT:小数  DATE:日期 			
				" t.KDESC as KDESC, " + //4 属性备注 	
				" trace.TRACE_NAME as TRACE_NAME, " + //5 矩阵名称
				" v.V " + //6 属性值
				" from SE_TRACE_KEY t " + 
				" left join SE_REQUIREMENT_TRACE trace on t.TRACE_ID = trace.TRACE_ID" + 
				" left join V_SE_TRACE_VALUE v on t.KCODE=v.KCODE and t.TRACE_ID = v.TRACE_ID and t.KTYPE = v.KTYPE " + 
				" where t.TRACE_ID = '" + traceId + "' ";
		if(StringUtil.isNotEmpty(proType)){
			if("CLOB".equals(proType.toUpperCase())){
				sql += " and t.KTYPE = 'CLOB' ";
			}else if("STRING".equals(proType.toUpperCase())){
				sql += " and t.KTYPE <> 'CLOB' ";
			}
		}
		List l = this.pubDao.findBySqlToMap(sql);
		return l;
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeService#saveTracePros(java.lang.String, java.util.List)
	 */
	public void saveTracePros(String traceId,List<Map<String,String>> params){
		
		//遍历属性值
		for(Object obj : params){
			Map<String,String> m = (Map<String,String>)obj;
			System.out.println(m.get("name") + ":" + m.get("value"));
			
			//获取属性名称(去掉前面的"V_")
			String key = m.get("name").substring(2, m.get("name").length());
			//属性的值
			String value = m.get("value");
			
			//查询该矩阵的属性值对象 有则更新 没有则新增
			SeTraceKey stk = this.queryTraceKeyByTraceIdAndKey(traceId,key);
			if(stk == null){
				throw new RuntimeException("未找到该矩阵下的[" + key + "]属性");
			}
			
			//如果是大文本字段则 查询se_trace_value_text表  否则查询se_trace_value_string表
			if("CLOB".equals(stk.getKtype())){
				SeTraceValueText stv =  (SeTraceValueText)this.queryTraceValueObjByTraceIdAndKey(traceId, key);
				if(stv == null){
					stv = new  SeTraceValueText();
					stv.setTraceId(traceId);
					stv.setKcode(key);
					stv.setV(value);
					stv.setKtype(stk.getKtype());
					this.pubDao.save(stv);
				}else{
					stv.setV(value);
					stv.setKtype(stk.getKtype());
					this.pubDao.update(stv);
				}
			}else{
				SeTraceValueString stv =  (SeTraceValueString)this.queryTraceValueObjByTraceIdAndKey(traceId, key);
				if(stv == null){
					stv = new SeTraceValueString();
					stv.setTraceId(traceId);
					stv.setKcode(key);
					stv.setV(value);
					stv.setKtype(stk.getKtype());
					this.pubDao.save(stv);
				}else{
					stv.setV(value);
					stv.setKtype(stk.getKtype());
					this.pubDao.update(stv);
				}
			}
			
		}
		
		
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeService#queryTraceKeyByTraceIdAndKey(java.lang.String, java.lang.String)
	 */
	public SeTraceKey queryTraceKeyByTraceIdAndKey(String traceId,String key){
		String sql = "select KID from SE_TRACE_KEY where TRACE_ID = '" + traceId + "' and KCODE = '" + key + "'";
		List l = this.pubDao.findBySql(sql);
		if(!ListUtil.isNotEmpty(l)){
			throw new RuntimeException("该矩阵未找到[" + key + "]属性");
		}
		String id = ListUtil.getOne(l).toString();
		SeTraceKey stk = (SeTraceKey)this.pubDao.findById(SeTraceKey.class, id);
		return stk;
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeService#queryTraceValueByTraceIdAndKey(java.lang.String, java.lang.String)
	 */
	public String queryTraceValueByTraceIdAndKey(String traceId,String key){
		SeTraceKey stk = this.queryTraceKeyByTraceIdAndKey(traceId,key); 
		String tabName = "";
		if("CLOB".equals(stk.getKtype())){
			tabName = "SE_TRACE_VALUE_TEXT";
		}else{
			tabName = "SE_TRACE_VALUE_STRING";
		}
		
		String sql = "select V from " + tabName + " where TRACE_ID = '" + traceId + "' and KCODE = '" + key + "'";
		List l = this.pubDao.findBySql(sql);
		try{
			return ListUtil.getOne(l).toString();
		}catch(Exception e){
			return null;
		}
		
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeService#queryTraceValueObjByTraceIdAndKey(java.lang.String, java.lang.String)
	 */
	public Object queryTraceValueObjByTraceIdAndKey(String traceId,String key){
		SeTraceKey stk = this.queryTraceKeyByTraceIdAndKey(traceId,key); 
		String tabName = "";
		
		if("CLOB".equals(stk.getKtype())){
			tabName = "SE_TRACE_VALUE_TEXT";
		}else{
			tabName = "SE_TRACE_VALUE_STRING";
		}
		
		String sql = "select VID from " + tabName + " where TRACE_ID = '" + traceId + "' and KCODE = '" + key + "' and KTYPE ='" + stk.getKtype() + "'";
		List l = this.pubDao.findBySql(sql);
		if(!ListUtil.isNotEmpty(l)){
			return null;
		}
		String id = ListUtil.getOne(l).toString();
		if("CLOB".equals(stk.getKtype())){
			SeTraceValueText stv = (SeTraceValueText)this.getPubDaoImpl().findById(SeTraceValueText.class,id);
			return stv;
		}else{
			SeTraceValueString stv = (SeTraceValueString)this.getPubDaoImpl().findById(SeTraceValueString.class,id);
			return stv;
		}
		
		
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeService#copyTracePro(java.lang.String, java.lang.String)
	 */
	public void copyTracePro(String sourceTraceId,String targetTraceId){
		SeRequirementTrace sourceTrace = this.queryNodeById(sourceTraceId);
		SeRequirementTrace targetTrace = this.queryNodeById(targetTraceId);
		if(sourceTrace == null){
			throw new RuntimeException("未找到源矩阵");
		}
		if(targetTrace == null){
			throw new RuntimeException("未找到目标矩阵");
		}
		
		//节点的所有属性
		List proList = queryTracePros(sourceTraceId,"ALL");
		if(ListUtil.isNotEmpty(proList)){
			for(Object obj : proList){
				Map<String,String> m = (Map<String,String>)obj;
				SeTraceKey k = (SeTraceKey)this.pubDao.findById(SeTraceKey.class, m.get("KID").toString());
				String sql = "select KID from SE_TRACE_KEY "
						+ "where trace_id = '" + targetTraceId + "' "
						+ "and kcode = '" + k.getKcode() + "' "
						+ "and ktype = '" + k.getKtype()+ "'";
				List l = this.pubDao.findBySql(sql);
				if(!ListUtil.isNotEmpty(l)){
					SeTraceKey newKey = new SeTraceKey();
					BeanUtils.copyProperties(k, newKey);
					newKey.setKid(null);
					newKey.setTraceId(targetTraceId);
					this.pubDao.save(newKey);
				}
				
			}
		}
		
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeService#traceProExtend(java.lang.String, java.lang.String)
	 */
	public void traceProExtend(String traceId,String direction){
		//向下覆盖
		if("D".equals(direction.toUpperCase())){
			//节点的所有属性
			SeRequirementTrace sourceTrace = this.queryNodeById(traceId);
			if(sourceTrace == null){
				throw new RuntimeException("未找到源矩阵");
			}
			//获取所有子孙节点
			List childTraces = seRequirementTraceService.queryChildNodeByCode(sourceTrace.getTreeCode());
			for(Object obj : childTraces){
				SeRequirementTrace childTrace = (SeRequirementTrace)obj;
				//拷贝属性
				this.copyTracePro(traceId, childTrace.getTraceId());
			}
		
		//向上继承
		}else if("U".equals(direction.toUpperCase())){
			SeRequirementTrace parentTrace = seRequirementTraceService.queryParentNode(traceId);
			this.copyTracePro(parentTrace.getTraceId(), traceId);
		}else{
			throw new RuntimeException("请指定属性覆盖还是继承");
		}
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeService#queryNodeById(java.lang.String)
	 */
	public SeRequirementTrace queryNodeById(String nodeId) {
		return (SeRequirementTrace)this.pubDao.findById(SeRequirementTrace.class, nodeId);
	}
	

	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceNoteService#querySeTraceNote(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeTraceNote(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.NOTE_ID as NOTE_ID, " + //0  遗留备忘id 
			" t.NOTE_TYPE as NOTE_TYPE, " + //0 记事种类  遗留 备忘 缺陷 			
			" t.NOTE_TITLE as NOTE_TITLE, " + //1 遗留备忘标题 			
			" t.NOTE_CONTENT as NOTE_CONTENT, " + //2 遗留备忘内容 			
			" t.NOTE_STATUS as NOTE_STATUS, " + //3 遗留备忘状态 			
			" t.TRACE_ID as TRACE_ID, " + //4 矩阵ID 			
			" t.ALARM_DATE as ALARM_DATE, " + //5 提醒日期 			
			" t.ALARM_DAYS as ALARM_DAYS, " + //6 预警天数 			
			" t.IS_VALID as IS_VALID, " + //7 是否有效 			
			" t.IS_DELETE as IS_DELETE, " + //8 是否删除 			
			" t.CREATE_TIME as CREATE_TIME, " + //9 创建时间 			
			" t.UPDATE_TIME as UPDATE_TIME, " + //10 修改时间 			
			" trace.TRACE_NAME as TRACE_NAME, " + //11 矩阵名称
			" u.USER_NAME as USER_NAME, " + //12 执行人
			" issueuser.USER_NAME as ISSUE_USER  " + //13 签发人
			" from SE_TRACE_NOTE t left join SE_REQUIREMENT_TRACE trace on t.TRACE_ID = trace.TRACE_ID "+ 
			" left join SE_USER u on t.EXE_USER = u.USER_ID " +
			" left join SE_USER issueuser on t.ISSUE_USER = issueuser.USER_ID " +
			"where t.IS_DELETE =  " + StaticVar.ISDELETE_UNDELETE ;
		
		if(m!=null){
				if(StringUtil.isNotEmpty(m.get("NOTE_ID"))){
					sql += " and t.NOTE_ID like ? ";
					param.add("%" + m.get("NOTE_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("NOTE_TYPE"))){
					sql += " and upper(t.NOTE_TYPE) like upper(?) ";
					param.add("%" + m.get("NOTE_TYPE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("NOTE_TITLE"))){
					sql += " and (upper(t.NOTE_TITLE) like upper(?) or upper(t.NOTE_CONTENT) like upper(?))";
					param.add("%" + m.get("NOTE_TITLE").toString().trim() + "%");
					param.add("%" + m.get("NOTE_TITLE").toString().trim() + "%");
				}
				/*if(StringUtil.isNotEmpty(m.get("NOTE_CONTENT"))){
					sql += " and upper(t.NOTE_CONTENT) like upper(?) ";
					param.add("%" + m.get("NOTE_CONTENT").toString().trim() + "%");
				}*/
				if(StringUtil.isNotEmpty(m.get("NOTE_STATUS"))){
					sql += " and t.NOTE_STATUS = ? ";
					param.add( m.get("NOTE_STATUS"));
				}
//				if(StringUtil.isNotEmpty(m.get("TRACE_ID"))){
//					sql += " and upper(t.TRACE_ID) like upper(?) ";
//					param.add("%" + m.get("TRACE_ID").toString().trim() + "%");
//				}
				if(StringUtil.isNotEmpty(m.get("TRACE_ID"))){
					SeRequirementTrace srt = (SeRequirementTrace)this.findById(SeRequirementTrace.class,m.get("TRACE_ID").toString());
					String treeCode = srt.getTreeCode();
					sql += " and trace.TREE_CODE like ?  ";
					param.add(treeCode + "%");
				}
				
				
				if(StringUtil.isNotEmpty(m.get("ALARM_DATE"))){
					sql += " and t.ALARM_DATE = ? ";
					param.add(m.get("ALARM_DATE").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("ALARM_DAYS"))){
					sql += " and t.ALARM_DAYS = ? ";
					param.add(m.get("ALARM_DAYS").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("IS_VALID"))){
					sql += " and upper(t.IS_VALID) like upper(?) ";
					param.add("%" + m.get("IS_VALID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_DELETE"))){
					sql += " and upper(t.IS_DELETE) like upper(?) ";
					param.add("%" + m.get("IS_DELETE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("CREATE_TIME"))){
					sql += " and t.CREATE_TIME = ? ";
					param.add(m.get("CREATE_TIME").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("UPDATE_TIME"))){
					sql += " and t.UPDATE_TIME = ? ";
					param.add(m.get("UPDATE_TIME").toString().trim());
				}
				
				if(StringUtil.isNotEmpty(m.get("USER_ID"))){
					sql += " and u.USER_ID = ? ";
					param.add(m.get("USER_ID").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("ISSUE_USER"))){
					sql += " and t.ISSUE_USER = ? ";
					param.add(m.get("ISSUE_USER").toString().trim());
				}
				
				if(StringUtil.isNotEmpty(m.get("PROJECT_ID"))){
					sql += " and trace.PROJECT_ID = ? ";
					param.add(m.get("PROJECT_ID").toString().trim());
				}
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		//System.out.println(sql);
		//List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return this.jdbcDao.query(sql,param.toArray(), p);

	};
	
	
	
	public DataTableBean queryMySeTraceNote(DataTableBean dtb){
		Page p = new Page();
		p.setCurrentPage(dtb.getCurrentPage());
		p.setPageSize(dtb.getPageSize());
		List r = this.querySeTraceNote(dtb.getConditions(),p);
		if(MyListUtils.isEmpty(r)){
			r = new ArrayList();
		}
		dtb.setData(r);
		dtb.setRecordsTotal(p.getListSize());
		dtb.setRecordsFiltered(p.getListSize());
		return dtb;
	};
	
	public String queryContentOfTraceNote(String noteId){
		SeTraceNote stn = this.querySeTraceNoteById(noteId);
		return stn.getNoteContent();
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceNoteService#saveSeTraceNote(cn.thd.pojo.se.SeTraceNote)
	 */
	public void saveSeTraceNote(SeTraceNote obj) {
		
		if(MyStringUtils.isEmpty(obj.getCreator())){
			throw new RuntimeException("creator of Object can't be found");
		}
		obj.setModifier(obj.getCreator());
		obj.setCreateTime(new Date());
		obj.setUpdateTime(new Date());
		obj.setIsDelete(StaticVar.ISDELETE_UNDELETE);
		this.pubDao.save(obj);
	};
	
	public void saveSeTraceNoteContent(String id,String content,String status,String modifier){
		SeTraceNote stn = this.querySeTraceNoteById(id);
		stn.setNoteContent(content);
		stn.setModifier(modifier);
		if("1".equals(status)){
			stn.setNoteStatus("已落实");
			stn.setResolveDate(new Date());
		}
		updateSeTraceNote(stn);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceNoteService#updateSeTraceNote(cn.thd.pojo.se.SeTraceNote)
	 */
	public void updateSeTraceNote(SeTraceNote obj){
		obj.setUpdateTime(new Date());
		
		
		try{
			if(MyStringUtils.isEmpty(obj.getCreator())){
				throw new RuntimeException("creator of Object[" + obj.getClass() + "] can't be found [ID:" + obj.getTraceId() + "]");
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		if(MyStringUtils.isEmpty(obj.getModifier())){
			throw new RuntimeException("modifier of Object can't be found");
		}
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceNoteService#querySeTraceNoteById(java.lang.String)
	 */
	public SeTraceNote querySeTraceNoteById(java.lang.String pk){
		return (SeTraceNote)this.pubDao.findById(SeTraceNote.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceNoteService#deleteSeTraceNoteById(java.lang.String)
	 */
	public void deleteSeTraceNoteById(java.lang.String pk){
		SeTraceNote obj = this.querySeTraceNoteById(pk);
		obj.setIsDelete(StaticVar.ISDELETE_DELETED);
		this.pubDao.update(obj);
	};
	
	
	/**
	 * 批量删除矩阵记事对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeTraceNoteByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeTraceNoteById(id);
						
						
					}
				}
			}
		}
	};
	

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeRiskService#querySeRisk(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeRisk(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.RISK_ID as RISK_ID, " + //0  风险ID 
			" t.PROJECT_ID as PROJECT_ID, " + //0 项目ID 			
			" t.IDENT_DATE as IDENT_DATE, " + //1 识别日期 			
			" t.RISK_CLASSIFY as RISK_CLASSIFY, " + //2 风险类别 			
			" t.RISK_CONTENT as RISK_CONTENT, " + //3 风险描述 			
			" t.RISK_PROBABILITY as RISK_PROBABILITY, " + //4 概率 			
			" t.RISK_SWAY as RISK_SWAY, " + //5 影响 			
			" t.RISK_VALUE as RISK_VALUE, " + //6 风险值 			
			" t.RISK_LEVEL as RISK_LEVEL, " + //7 风险等级 			
			" t.RISK_PRIORITY as RISK_PRIORITY, " + //8 优先级 			
			" t.DEAL_TYPE as DEAL_TYPE, " + //9 应对方式 			
			" t.EMERGENCY_PREPLAN as EMERGENCY_PREPLAN, " + //10 应急预案 			
			" t.PERSON_IN_CHARGE as PERSON_IN_CHARGE, " + //11 责任人 			
			" t.RISK_DEAL_CONTENT as RISK_DEAL_CONTENT, " + //12 风险处理措施 			
			" t.RISK_STATUS as RISK_STATUS, " + //13 状态 			
			" t.MONITOR as MONITOR, " + //14 监控人 			
			" t.IS_CLOSE as IS_CLOSE, " + //15 是否关闭 			
			" t.CLOSE_DATE as CLOSE_DATE " + //16 关闭日期 			
			
			" from SE_RISK t  where t.is_delete = ? ";
		param.add(StaticVar.ISDELETE_UNDELETE);
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("RISK_ID"))){
				sql += " and t.RISK_ID like ? ";
				param.add("%" + m.get("RISK_ID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("PROJECT_ID"))){
					sql += " and upper(t.PROJECT_ID) like upper(?) ";
					param.add("%" + m.get("PROJECT_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IDENT_DATE"))){
					sql += " and t.IDENT_DATE = ? ";
					param.add(m.get("IDENT_DATE").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("RISK_CLASSIFY"))){
					sql += " and upper(t.RISK_CLASSIFY) like upper(?) ";
					param.add("%" + m.get("RISK_CLASSIFY").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("RISK_CONTENT"))){
					sql += " and upper(t.RISK_CONTENT) like upper(?) ";
					param.add("%" + m.get("RISK_CONTENT").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("RISK_PROBABILITY"))){
					sql += " and upper(t.RISK_PROBABILITY) like upper(?) ";
					param.add("%" + m.get("RISK_PROBABILITY").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("RISK_SWAY"))){
					sql += " and upper(t.RISK_SWAY) like upper(?) ";
					param.add("%" + m.get("RISK_SWAY").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("RISK_VALUE"))){
					sql += " and t.RISK_VALUE = ? ";
					param.add(m.get("RISK_VALUE").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("RISK_LEVEL"))){
					sql += " and upper(t.RISK_LEVEL) like upper(?) ";
					param.add("%" + m.get("RISK_LEVEL").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("RISK_PRIORITY"))){
					sql += " and upper(t.RISK_PRIORITY) like upper(?) ";
					param.add("%" + m.get("RISK_PRIORITY").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("DEAL_TYPE"))){
					sql += " and upper(t.DEAL_TYPE) like upper(?) ";
					param.add("%" + m.get("DEAL_TYPE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("EMERGENCY_PREPLAN"))){
					sql += " and upper(t.EMERGENCY_PREPLAN) like upper(?) ";
					param.add("%" + m.get("EMERGENCY_PREPLAN").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("PERSON_IN_CHARGE"))){
					sql += " and upper(t.PERSON_IN_CHARGE) like upper(?) ";
					param.add("%" + m.get("PERSON_IN_CHARGE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("RISK_DEAL_CONTENT"))){
					sql += " and upper(t.RISK_DEAL_CONTENT) like upper(?) ";
					param.add("%" + m.get("RISK_DEAL_CONTENT").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("RISK_STATUS"))){
					sql += " and upper(t.RISK_STATUS) like upper(?) ";
					param.add("%" + m.get("RISK_STATUS").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("MONITOR"))){
					sql += " and upper(t.MONITOR) like upper(?) ";
					param.add("%" + m.get("MONITOR").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_CLOSE"))){
					sql += " and upper(t.IS_CLOSE) like upper(?) ";
					param.add("%" + m.get("IS_CLOSE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("CLOSE_DATE"))){
					sql += " and t.CLOSE_DATE = ? ";
					param.add(m.get("CLOSE_DATE").toString().trim());
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		//System.out.println(sql);
		//List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		List l = this.jdbcDao.query(sql,param.toArray(), p);
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeRiskService#saveSeRisk(cn.thd.pojo.se.SeRisk)
	 */
	public void saveSeRisk(SeRisk obj) {
		obj.setIsDelete(StaticVar.ISDELETE_UNDELETE);
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeRiskService#updateSeRisk(cn.thd.pojo.se.SeRisk)
	 */
	public void updateSeRisk(SeRisk obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeRiskService#querySeRiskById(java.lang.String)
	 */
	public SeRisk querySeRiskById(java.lang.String pk){
		return (SeRisk)this.pubDao.findById(SeRisk.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeRiskService#deleteSeRiskById(java.lang.String)
	 */
	public void deleteSeRiskById(java.lang.String pk){
		SeRisk obj = this.querySeRiskById(pk);
		obj.setIsDelete(StaticVar.ISDELETE_DELETED);
		this.pubDao.update(obj);
	};
	
	
	/**
	 * 批量删除项目风险对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeRiskByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeRiskById(id);
						
						
					}
				}
			}
		}
	};
	

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeUserService#querySeUser(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeUser(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.USER_ID as USER_ID, " + //0  用户ID 
			" t.USER_NAME as USER_NAME, " + //0 用户姓名 			
			" t.COMPANY_NAME as COMPANY_NAME, " + //1 所在公司 			
			" t.USER_MAIL as USER_MAIL, " + //2 邮箱 			
			" t.USER_ACCOUNT as USER_ACCOUNT "+//3账号
			
			" from SE_USER t  where 1=1 ";
		
		if(m!=null){
				if(m.get("USER_IDS") != null){
					sql += " and t.USER_ID in ( '' ";
					String[] ids = m.get("USER_IDS").toString().split(",");
					String rids = "";
					for(String uid: ids){
						if(MyStringUtils.isNotEmpty(uid)){
							//rids+=(","+uid );
							sql += ", ? ";
							param.add(uid);
						}
					}
//					if(MyStringUtils.isNotEmpty(rids)){
//						rids = rids.substring(1,rids.length());
//						sql += " and t.USER_ID in ? ";
//						param.add(rids);
//					}
					sql +=")";
					
					
					
				}
				if(StringUtil.isNotEmpty(m.get("USER_ID"))){
					sql += " and t.USER_ID like ? ";
					param.add("%" + m.get("USER_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("USER_NAME"))){
					sql += " and upper(t.USER_NAME) like upper(?) ";
					param.add("%" + m.get("USER_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("COMPANY_NAME"))){
					sql += " and upper(t.COMPANY_NAME) like upper(?) ";
					param.add("%" + m.get("COMPANY_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("USER_MAIL"))){
					sql += " and upper(t.USER_MAIL) like upper(?) ";
					param.add("%" + m.get("USER_MAIL").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("PROJECT_ID"))){
					sql += " and t.USER_ID in (select user_id from se_map_project_user where on_position = ? and project_id = ? ) ";
					param.add(StaticVar.ISPOS_ONPOSITION);
					param.add(m.get("PROJECT_ID").toString());
				}
			
				//排序
				if(StringUtil.isNotEmpty((String)m.get("sort"))){
					sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
				}
		}
		
		
		
		
		System.out.println(sql);
		List l = this.jdbcDao.query(sql,param.toArray(), p);	
		return l;

	};
	
	public List queryProjectUser(String projectId){
		String sql = "";
		List params = new ArrayList();
		/*if(StringUtil.isNotEmpty(projectId)){
			sql = "select u.user_id as USER_ID,u.user_name as USER_NAME "
					+ " from se_map_project_user m left join se_user u on m.user_id = u.user_id"
					+ " where m.project_id = ? ";
			params.add(projectId);
			return this.jdbcDao.query(sql, params.toArray(),null);
		}else{
			sql = "select u.user_id as USER_ID,u.user_name as USER_NAME "
					+ " from se_user u ";
			return this.jdbcDao.query(sql, null,null);
		}*/
		
		
			sql = " select "+ 
					" u.user_id as USER_ID, "+ 
					" u.user_name as USER_NAME "+ 
					" from se_map_project_user m left join se_user u on m.user_id = u.user_id "+ 
					" where on_position = ? ";
			params.add(StaticVar.ISPOS_ONPOSITION);
			if(StringUtil.isNotEmpty(projectId)){
				sql+=" and m.project_id = ? ";
				params.add(projectId);
			}
			
			return this.jdbcDao.query(sql, params.toArray(),null);
	};
	
	
	public List queryProjectUserForAll(String projectId){
		String sql = "";
		List params = new ArrayList();
		/*if(StringUtil.isNotEmpty(projectId)){
			sql = "select u.user_id as USER_ID,u.user_name as USER_NAME "
					+ " from se_map_project_user m left join se_user u on m.user_id = u.user_id"
					+ " where m.project_id = ? ";
			params.add(projectId);
			return this.jdbcDao.query(sql, params.toArray(),null);
		}else{
			sql = "select u.user_id as USER_ID,u.user_name as USER_NAME "
					+ " from se_user u ";
			return this.jdbcDao.query(sql, null,null);
		}*/
		
		
			sql = " select "+ 
					" u.user_id as USER_ID, "+ 
					" u.user_name as USER_NAME "+ 
					" from se_map_project_user m left join se_user u on m.user_id = u.user_id "+ 
					" where  1=1  ";
			if(StringUtil.isNotEmpty(projectId)){
				sql+=" and m.project_id = ? ";
				params.add(projectId);
			}
			
			return this.jdbcDao.query(sql, params.toArray(),null);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeUserService#saveSeUser(cn.thd.pojo.se.SeUser)
	 */
	public void saveSeUser(SeUser obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeUserService#updateSeUser(cn.thd.pojo.se.SeUser)
	 */
	public void updateSeUser(SeUser obj){
		this.pubDao.update(obj);
	};
	
	public String validateUserAndPassword(String userName,String password){
		String sql = "select user_account from se_user where user_account = ? and user_password = ?";
		List l = new ArrayList();
		l.add(userName);
		l.add(password);
		int i = this.jdbcDao.queryCount(sql, l.toArray());
		if(i == 1){
			return StaticVar.STATUS_SUCCESS;
		}else{
			return StaticVar.STATUS_FAILURE;
		}
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeUserService#querySeUserById(java.lang.String)
	 */
	public SeUser querySeUserById(java.lang.String pk){
		return (SeUser)this.pubDao.findById(SeUser.class,pk);
	};
	
	public SeUser querySeUserByAccount(String account){
		String sql = "select user_id,user_password from se_user u where u.user_account = ? ";
		List params = new ArrayList();
		params.add(account);
		List l = this.jdbcDao.query(sql, params.toArray(), null);
		
		if(MyListUtils.isEmpty(l)){
			throw new RuntimeException( "未找到用户名为[" + account + "]的用户");
		}
		
		if(l.size() > 1){
			throw new RuntimeException( "存在用户名为[" + account + "]的多个用户");
		}
		Map obj = (Map)l.get(0);
		String userId = obj.get("user_id").toString();
		return this.querySeUserById(userId);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeUserService#deleteSeUserById(java.lang.String)
	 */
	public void deleteSeUserById(java.lang.String pk){
		SeUser obj = this.querySeUserById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除项目风险对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeUserByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeUserById(id);
						
						
					}
				}
			}
		}
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProjectInfoService#querySeProjectInfo(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeProjectInfo(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.PROJECT_ID as PROJECT_ID, " + //0  项目ID 
			" t.PRO_NO as PRO_NO, " + //0 项目标号 			
			" t.PRO_NAME as PRO_NAME, " + //1 项目名称 			
			" t.PRO_DESCRIPTION as PRO_DESCRIPTION, " + //2 项目描述 			
			" t.PRO_TARGET as PRO_TARGET, " + //3 项目目标 			
			" t.PRO_BACKGROUND as PRO_BACKGROUND, " + //4 项目背景 			
			" t.FINAL_CONSIGN as FINAL_CONSIGN, " + //5 最终交付物 			
			" t.PRO_LEADER as PRO_LEADER, " + //6 项目经理 			
			" t.PRO_MEMBER as PRO_MEMBER " + //7 项目成员 			
			
			" from SE_PROJECT_INFO t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("PROJECT_ID"))){
				sql += " and t.PROJECT_ID like ? ";
				param.add("%" + m.get("PROJECT_ID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("PRO_NO"))){
					sql += " and upper(t.PRO_NO) like upper(?) ";
					param.add("%" + m.get("PRO_NO").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("PRO_NAME"))){
					sql += " and upper(t.PRO_NAME) like upper(?) ";
					param.add("%" + m.get("PRO_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("PRO_DESCRIPTION"))){
					sql += " and upper(t.PRO_DESCRIPTION) like upper(?) ";
					param.add("%" + m.get("PRO_DESCRIPTION").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("PRO_TARGET"))){
					sql += " and upper(t.PRO_TARGET) like upper(?) ";
					param.add("%" + m.get("PRO_TARGET").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("PRO_BACKGROUND"))){
					sql += " and upper(t.PRO_BACKGROUND) like upper(?) ";
					param.add("%" + m.get("PRO_BACKGROUND").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("FINAL_CONSIGN"))){
					sql += " and upper(t.FINAL_CONSIGN) like upper(?) ";
					param.add("%" + m.get("FINAL_CONSIGN").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("PRO_LEADER"))){
					sql += " and upper(t.PRO_LEADER) like upper(?) ";
					param.add("%" + m.get("PRO_LEADER").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("PRO_MEMBER"))){
					sql += " and upper(t.PRO_MEMBER) like upper(?) ";
					param.add("%" + m.get("PRO_MEMBER").toString().trim() + "%");
				}
				
				if(StringUtil.isNotEmpty(m.get("USER_ID"))){
					sql += " and t.PROJECT_ID in (select project_id from se_map_project_user where user_id = ? and on_position = ?) ";
					param.add(m.get("USER_ID").toString());
					param.add(StaticVar.ISPOS_ONPOSITION);
				}
				
				
				
				
				//排序
				if(StringUtil.isNotEmpty(m.get("sort"))){
					sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
				}
		}
		
		
		
		
		System.out.println(sql);
		//List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		List l = this.jdbcDao.query(sql, param.toArray(),null);
		return l;

	};
	
	
	public List querySeProjectOptions(){
		List l = this.querySeProjectInfo(null, null);
		return MyListUtils.convertOptionList(l, "PROJECT_ID", "PRO_NAME");
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProjectInfoService#saveSeProjectInfo(cn.thd.pojo.se.SeProjectInfo)
	 */
	public void saveSeProjectInfo(SeProjectInfo obj) {
		this.pubDao.save(obj);
		//创建需求矩阵根目录
		
		SeRequirementTrace trace = new SeRequirementTrace();
		trace.setIsLeaf(StaticVar.ISLEAF_FOLDER);
		trace.setIsDelete(StaticVar.ISDELETE_UNDELETE);
		trace.setIsValid(StaticVar.ISVALID_VALID);
		trace.setProjectId(obj.getProjectId());
		trace.setTraceName(obj.getProName()+"需求矩阵");
		trace.setTreeCode("00000");
		trace.setCreateTime(new Date());
		trace.setUpdateTime(new Date());
		this.pubDao.save(trace);
		
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProjectInfoService#updateSeProjectInfo(cn.thd.pojo.se.SeProjectInfo)
	 */
	public void updateSeProjectInfo(SeProjectInfo obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProjectInfoService#querySeProjectInfoById(java.lang.String)
	 */
	public SeProjectInfo querySeProjectInfoById(java.lang.String pk){
		return (SeProjectInfo)this.pubDao.findById(SeProjectInfo.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProjectInfoService#deleteSeProjectInfoById(java.lang.String)
	 */
	public void deleteSeProjectInfoById(java.lang.String pk){
		SeProjectInfo obj = this.querySeProjectInfoById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除项目信息对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeProjectInfoByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeProjectInfoById(id);
						
						
					}
				}
			}
		}
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMapProjectUserService#querySeMapProjectUser(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeMapProjectUser(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.RID as RID, " + //0   
			" t.PROJECT_ID as PROJECT_ID, " + //0 项目ID 			
			" t.USER_ID as USER_ID, " + //1 用户ID 			
			" t.USER_NAME as USER_NAME, " + //2 用户姓名 			
			" t.USER_COST as USER_COST, " + //3 个人成本 			
			" t.USER_POS as USER_POS, " + //4 岗位 			
			" t.USER_LEVEL as USER_LEVEL, " + //5 用户级别 			
			" t.PLAN_DUTY as PLAN_DUTY, " + //6 计划到港日期 			
			" t.PLAN_UNDUTY as PLAN_UNDUTY, " + //7 计划离岗日期 			
			" t.ACT_DUTY as ACT_DUTY, " + //8 实际到岗日期 			
			" t.ACT_UNDUTY as ACT_UNDUTY, " + //9 实际离岗日期 			
			" t.ON_POSITION as ON_POSITION " + //是否在岗
			" from SE_MAP_PROJECT_USER t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("RID"))){
				sql += " and t.RID like ? ";
				param.add("%" + m.get("RID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("PROJECT_ID"))){
					sql += " and upper(t.PROJECT_ID) like upper(?) ";
					param.add("%" + m.get("PROJECT_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("USER_ID"))){
					sql += " and upper(t.USER_ID) like upper(?) ";
					param.add("%" + m.get("USER_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("USER_NAME"))){
					sql += " and upper(t.USER_NAME) like upper(?) ";
					param.add("%" + m.get("USER_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("USER_COST"))){
					sql += " and t.USER_COST = ? ";
					param.add(m.get("USER_COST").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("USER_POS"))){
					sql += " and upper(t.USER_POS) like upper(?) ";
					param.add("%" + m.get("USER_POS").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("USER_LEVEL"))){
					sql += " and upper(t.USER_LEVEL) like upper(?) ";
					param.add("%" + m.get("USER_LEVEL").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("PLAN_DUTY"))){
					sql += " and t.PLAN_DUTY = ? ";
					param.add(m.get("PLAN_DUTY").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("PLAN_UNDUTY"))){
					sql += " and t.PLAN_UNDUTY = ? ";
					param.add(m.get("PLAN_UNDUTY").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("ACT_DUTY"))){
					sql += " and t.ACT_DUTY = ? ";
					param.add(m.get("ACT_DUTY").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("ACT_UNDUTY"))){
					sql += " and t.ACT_UNDUTY = ? ";
					param.add(m.get("ACT_UNDUTY").toString().trim());
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.jdbcDao.query(sql,param.toArray(), p);
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMapProjectUserService#saveSeMapProjectUser(cn.thd.pojo.se.SeMapProjectUser)
	 */
	public void saveSeMapProjectUser(SeMapProjectUser obj) {
		if(MyStringUtils.isNotEmpty(obj.getUserId())){
			SeUser u = this.querySeUserById(obj.getUserId());
			if(u!=null){
				obj.setUserName(u.getUserName());
			}
		}
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMapProjectUserService#updateSeMapProjectUser(cn.thd.pojo.se.SeMapProjectUser)
	 */
	public void updateSeMapProjectUser(SeMapProjectUser obj){
		if(MyStringUtils.isNotEmpty(obj.getUserId())){
			SeUser u = this.querySeUserById(obj.getUserId());
			if(u!=null){
				obj.setUserName(u.getUserName());
			}
		}
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMapProjectUserService#querySeMapProjectUserById(java.lang.String)
	 */
	public SeMapProjectUser querySeMapProjectUserById(java.lang.String pk){
		return (SeMapProjectUser)this.pubDao.findById(SeMapProjectUser.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMapProjectUserService#deleteSeMapProjectUserById(java.lang.String)
	 */
	public void deleteSeMapProjectUserById(java.lang.String pk){
		SeMapProjectUser obj = this.querySeMapProjectUserById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除项目人员信息对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeMapProjectUserByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeMapProjectUserById(id);
					}
				}
			}
		}
	};
	
	public List queryUserLogForEdit(Map<String,String> m,Page p){
		/*String sql = 
				" select "+//
				" ul.plog_id as plogId, "+//0
				" ul.project_id as projectId, "+//1
				" ul.user_id as userId, "+//2
				" ul.plog_date as plogDate, "+//3
				" ul.plog_workload plogWorkload, "+//4
				" ul.is_leave as isLeave, "+//5
				" ul.plog_remark as plogRemark, "+//6
				" ul.task_id as taskId,"+//7
				" u.user_mail as userMail, "+//8
				" u.user_name as userName, "+//9
				" p.pro_name as proName,"+//10
				" ul.is_delete as isDelete " + //11
				" from se_person_log ul "+
				" left join se_user u on ul.user_id = u.user_id "+//
				" left join se_project_info p on p.project_id = ul.project_id "+ 
				" where is_delete = '" + StaticVar.ISDELETE_UNDELETE + "' ";*/
		String sql = 
				" select "+//
				" ul.plog_id as plogId, "+//0
				" ul.project_id as projectId, "+//1
				" ul.user_id as userId, "+//2
				" ul.plog_date as plogDate, "+//3
				" ul.plog_workload plogWorkload, "+//4
				" ul.is_leave as isLeave, "+//5
				" ul.plog_remark as plogRemark, "+//6
				" ul.task_id as taskId,"+//7
				" u.user_mail as userMail, "+//8
				" u.user_name as userName, "+//9
				" p.pro_name as proName,"+//10
				" ul.is_delete as isDelete, " + //11
				" task.task_title as taskTitle, " + 
				" trace.trace_name as traceName " +
				" from se_person_log ul "+
				" left join se_user u on ul.user_id = u.user_id "+//
				" left join se_trace_task task on task.task_id = ul.task_id "+
				" left join se_requirement_trace trace on trace.trace_id = task.trace_id " + 
				" left join se_project_info p on trace.project_id = p.project_id " +
				" where ul.is_delete = '" + StaticVar.ISDELETE_UNDELETE + "' ";
		List params = new ArrayList();
		if(m != null){
			String userId = m.get("userId");
			String projectId = m.get("projectId");
			String logDateL = m.get("logDateL");
			String logDateH = m.get("logDateH");
			
			if(StringUtil.isNotEmpty(userId)){
				sql += " and ul.user_id = ? ";
				params.add(userId);
			}
			if(StringUtil.isNotEmpty(projectId)){
				sql += " and ul.project_id = ? ";
				params.add(projectId);
			}
			if(StringUtil.isNotEmpty(logDateL)){
				sql += " and ul.plog_date >= ? ";
				params.add(logDateL);
			}
			if(StringUtil.isNotEmpty(logDateH)){
				sql += " and ul.plog_date <= ? ";
				params.add(logDateH);
			}
		}
		sql += " order by  ul.plog_date desc ";
		return this.jdbcDao.query(sql, params.toArray(), p);

	};
	
	
	public DataGrid queryUserLog(Map<String,String> m,Page p){
		String selectSql =
				" select "+
				" u.user_name as userName, "+
				" pro.pro_name as proName, "+
				" lg.plog_id as plogId, "+//0
				" lg.project_id as projectId, "+//1
				" lg.user_id as userId, "+//2
				" lg.plog_date as plogDate, "+//3
				" lg.plog_workload plogWorkload, "+//4
				" lg.is_leave as isLeave, "+//5
				" lg.plog_remark as plogRemark, "+//6
				" lg.task_id as taskId,"+//7
				" lg.is_delete as isDelete, " + //11
				" lg.create_date as createDate,"+
				" trace.trace_name as traceName, "+
				" trace.tree_code as traceTreeCode, "+
				" task.task_title as taskTitle, "+
				" task.begin_date as beginDate, "+
				" task.finish_date as finishDate, "+
				" task.work_load as workLoad, "+
				" task.task_require as taskRequire, "+
				" task.task_status as taskStatus, "+
				" trace.trace_id as traceId, "+
				" pu.user_cost as userCost, " + 
				" FORMAT(pu.user_cost*10000/21.75/8*lg.plog_workload,2) as dailyCost";
				
		String fromSql = 
				" from "+ 
				" se_person_log lg "+
				" left join se_user u on lg.user_id = u.user_id "+
				" left join se_trace_task task on lg.task_id = task.task_id "+ 
				" left join se_requirement_trace trace on task.trace_id = trace.trace_id "+
				" left join se_project_info pro on trace.project_id = pro.project_id "+
				" left join se_map_project_user pu on u.user_id = pu.user_id and pro.project_id = pu.project_id ";
				
				
		List params = new ArrayList();
		
		String whereSql = " where lg.is_delete = '1' ";
		if(m != null){
			String userId = m.get("userId");
			String projectId = m.get("projectId");
			String logDateL = m.get("logDateL");
			String logDateH = m.get("logDateH");
			String traceId = m.get("traceId");
			String taskId = m.get("taskId");
			String icl = m.get("icl");
			
			String sort = m.get("sort");
			String order = m.get("order");
			
			
			if(StringUtil.isNotEmpty(userId)){
				whereSql += " and lg.user_id = ? ";
				params.add(userId);
			}
			if(StringUtil.isNotEmpty(projectId)){
				whereSql += " and lg.project_id = ? ";
				params.add(projectId);
			}
			if(StringUtil.isNotEmpty(logDateL)){
				whereSql += " and DATE_FORMAT(lg.plog_date,'%Y-%m-%d') >= ? ";
				params.add(logDateL);
			}
			if(StringUtil.isNotEmpty(logDateH)){
				whereSql += " and DATE_FORMAT(lg.plog_date,'%Y-%m-%d') <= ? ";
				params.add(logDateH);
			}
			if(StringUtil.isNotEmpty(traceId)){
				SeRequirementTrace trace = (SeRequirementTrace)this.findById(SeRequirementTrace.class, traceId);
				if(StringUtil.isNotEmpty(icl) && "1".equals(icl)){
					whereSql += " and trace.tree_code like ? ";
					params.add( trace.getTreeCode() + "%");
				}else{
					whereSql += " and trace.tree_code like ? ";
					params.add( trace.getTreeCode());
				}
				
			}
			if(StringUtil.isNotEmpty(taskId)){
				whereSql += " and task.task_id = ? ";
				params.add(taskId);
			}
		}
		
		String orderSql = " order by  lg.plog_date desc ";
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			orderSql = " order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase() + ",lg.plog_date desc";
		}
		
		
		List r = this.jdbcDao.query(selectSql + fromSql + whereSql + orderSql, params.toArray(), p);
		
		
		
		String countSelectSql = " select '总工时：' as plogDate, sum(lg.plog_workload)  as plogWorkload , '成本:' as plogRemark,FORMAT(sum(pu.user_cost*10000/21.75/8*lg.plog_workload),2) as dailyCost ";
		List footerData = this.jdbcDao.query(countSelectSql + fromSql + whereSql, params.toArray(),null);
		
		
		
		DataGrid dg = new DataGrid();
		
		if(p!=null){
			dg.setTotal(p.getListSize());
		}else{
			dg.setTotal(r.size());
		}
		dg.setRows(r);
		dg.setFooter(footerData);
		return dg;
	};
	
	
	public void updateUserLog(SePersonLog log){
		this.pubDao.update(log);
		
	};
	
	public SePersonLog createBlankUserLog(){
		SePersonLog log = new SePersonLog();
		log.setPlogDate(new Date());
		log.setCreateDate(new Date());
		log.setIsDelete(StaticVar.ISDELETE_UNDELETE);
		this.pubDao.save(log);
		return log;
	};
	
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SePersonLogService#deleteSePersonLogById(java.lang.String)
	 */
	public void deleteSePersonLogById(java.lang.String pk){
		SePersonLog obj = (SePersonLog)this.findById(SePersonLog.class, pk);
		obj.setIsDelete(StaticVar.ISDELETE_DELETED);
		this.pubDao.update(obj);
	};
	
	
	/**
	 * 批量删除用户日志对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSePersonLogByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSePersonLogById(id);
					}
				}
			}
		}
	};
	
	public String linkTaskForLog(String logIds,String taskId){
		/*
		SePersonLog log = (SePersonLog)this.pubDao.findById(SePersonLog.class, logId);
		if(log == null){
			return "SePersonLog not be found --  id [" + logId + "];";
		}
		SeTraceTask task = (SeTraceTask)this.pubDao.findById(SeTraceTask.class, taskId);
		if(task == null){
			return "SeTraceTask not be found --  id [" + taskId + "];";
		}
		log.setTaskId(task.getTaskId());
		this.pubDao.update(log);
		return StaticVar.STATUS_SUCCESS;
		*/
		
		SeTraceTask task = (SeTraceTask)this.pubDao.findById(SeTraceTask.class, taskId);
		if(task == null){
			return "SeTraceTask not be found --  id [" + taskId + "];";
		}
		List<String> logIdsList = MyListUtils.stringToList(logIds, ",");
		for(String logId : logIdsList){
			try{
				SePersonLog log = (SePersonLog)this.pubDao.findById(SePersonLog.class, logId);
				log.setTaskId(task.getTaskId());
				this.pubDao.update(log);
			}catch(Exception e){
				e.printStackTrace();
			}
		}
		
		return StaticVar.STATUS_SUCCESS;
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SePubModuleService#querySePubModule(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySePubModule(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.MODULE_ID as MODULE_ID, " + //0  组件ID 
			" t.MODULE_TITLE as MODULE_TITLE, " + //0 组件标题 			
			" t.MODULE_CLASSIFY as MODULE_CLASSIFY, " + //1 组件分类 			
			" t.MODULE_NAME as MODULE_NAME, " + //2 组件方法名 			
			" t.MODULE_INPUT as MODULE_INPUT, " + //3 组件输入 			
			" t.MODULE_OUTPUT as MODULE_OUTPUT, " + //4 组件输出 			
			" t.MODULE_DESC as MODULE_DESC, " + //5 组件描述 			
			" t.MODULE_FILE as MODULE_FILE, " + //6 组件所在文件 			
			" t.MODULE_EXAMPLE as MODULE_EXAMPLE, " + //7 组件示例 			
			" t.MODULE_DATE as MODULE_DATE, " + //8 组件发布日期 			
			" u.USER_NAME as MODULE_USER_NAME, " + //9 组件负责人 			
			" t.PROJECT_ID as PROJECT_ID, " + //10 所属项目 			
			" d.DIC_NAME as DIC_NAME " + //11 分类	
			" from SE_PUB_MODULE t  " +
			" left join SE_USER u on t.MODULE_USER = u.USER_ID " + 
			" left join SYS_DIC_PUB d on t.MODULE_CLASSIFY = d.DIC_ID " + 
			" where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("MODULE_ID"))){
				sql += " and t.MODULE_ID like ? ";
				param.add("%" + m.get("MODULE_ID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("MODULE_TITLE"))){
					sql += " and upper(t.MODULE_TITLE) like upper(?) ";
					param.add("%" + m.get("MODULE_TITLE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("MODULE_CLASSIFY"))){
					sql += " and upper(t.MODULE_CLASSIFY) like upper(?) ";
					param.add("%" + m.get("MODULE_CLASSIFY").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("MODULE_NAME"))){
					sql += " and upper(t.MODULE_NAME) like upper(?) ";
					param.add("%" + m.get("MODULE_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("MODULE_INPUT"))){
					sql += " and upper(t.MODULE_INPUT) like upper(?) ";
					param.add("%" + m.get("MODULE_INPUT").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("MODULE_OUTPUT"))){
					sql += " and upper(t.MODULE_OUTPUT) like upper(?) ";
					param.add("%" + m.get("MODULE_OUTPUT").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("MODULE_DESC"))){
					sql += " and upper(t.MODULE_DESC) like upper(?) ";
					param.add("%" + m.get("MODULE_DESC").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("MODULE_FILE"))){
					sql += " and upper(t.MODULE_FILE) like upper(?) ";
					param.add("%" + m.get("MODULE_FILE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("MODULE_EXAMPLE"))){
					sql += " and upper(t.MODULE_EXAMPLE) like upper(?) ";
					param.add("%" + m.get("MODULE_EXAMPLE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("MODULE_DATE"))){
					sql += " and t.MODULE_DATE = ? ";
					param.add(m.get("MODULE_DATE").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("MODULE_USER"))){
					sql += " and upper(t.MODULE_USER) like upper(?) ";
					param.add("%" + m.get("MODULE_USER").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("PROJECT_ID"))){
					sql += " and upper(t.PROJECT_ID) like upper(?) ";
					param.add("%" + m.get("PROJECT_ID").toString().trim() + "%");
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		//List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		List l  = this.jdbcDao.query(sql, param.toArray(), p);
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SePubModuleService#saveSePubModule(cn.thd.pojo.se.SePubModule)
	 */
	public void saveSePubModule(SePubModule obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SePubModuleService#updateSePubModule(cn.thd.pojo.se.SePubModule)
	 */
	public void updateSePubModule(SePubModule obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SePubModuleService#querySePubModuleById(java.lang.String)
	 */
	public SePubModule querySePubModuleById(java.lang.String pk){
		return (SePubModule)this.pubDao.findById(SePubModule.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SePubModuleService#deleteSePubModuleById(java.lang.String)
	 */
	public void deleteSePubModuleById(java.lang.String pk){
		SePubModule obj = this.querySePubModuleById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除公共组件对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSePubModuleByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSePubModuleById(id);
						
						
					}
				}
			}
		}
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceTaskService#querySeTraceTask(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeTraceTask(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.TASK_ID as TASK_ID, " + //0  任务ID 
			" t.TRACE_ID as TRACE_ID, " + //0 矩阵ID 			
			" t.BEGIN_DATE as BEGIN_DATE, " + //1 开始日期 			
			" t.FINISH_DATE as FINISH_DATE, " + //2 结束日期 
			" t.WORK_LOAD as WORK_LOAD_D, " + //3 工作量(day) 	
			" t.WORK_LOAD*8 as WORK_LOAD_H, " + //3 工作量(hours) 			
			" (select sum(PLOG_WORKLOAD) from SE_PERSON_LOG lg  where lg.IS_DELETE='1' and t.TASK_ID = lg.TASK_ID) as ACT_WORKLOAD, " + //4 实际工作量
			" t.TASK_TITLE as TASK_TITLE, " + //4 标题 			
			" t.TASK_REQUIRE as TASK_REQUIRE, " + //5 要求 			
			" t.TASK_STATUS as TASK_STATUS, " + //6 状态 	
			" r.TRACE_NAME as TRACE_NAME, " +//7矩阵名称
			" r.TREE_CODE as TREE_CODE " + //8树形编码
			
			" from SE_TRACE_TASK t  left join SE_REQUIREMENT_TRACE r on t.TRACE_ID = r.TRACE_ID where 1=1 ";
		
			if(m!=null){
				
				
				if(StringUtil.isNotEmpty(m.get("PROJECT_ID"))){
					sql += " and r.PROJECT_ID = ? ";
					param.add(m.get("PROJECT_ID").toString());
				}
				if(StringUtil.isNotEmpty(m.get("TASK_ID"))){
					sql += " and t.TASK_ID = ? ";
					param.add(m.get("TASK_ID").toString());
				}
				if(StringUtil.isNotEmpty(m.get("TRACE_ID"))){
					//sql += " and t.TRACE_ID = ? ";
					//param.add(m.get("TRACE_ID").toString());
					SeRequirementTrace srt = (SeRequirementTrace)this.findById(SeRequirementTrace.class,m.get("TRACE_ID").toString());
					String treeCode = srt.getTreeCode();
					sql += " and r.TREE_CODE like ?  ";
					param.add(treeCode + "%");
					
					
				}
				if(StringUtil.isNotEmpty(m.get("BEGIN_DATE"))){
					sql += " and t.BEGIN_DATE = ? ";
					param.add(m.get("BEGIN_DATE").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("FINISH_DATE"))){
					sql += " and t.FINISH_DATE = ? ";
					param.add(m.get("FINISH_DATE").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("WORK_LOAD"))){
					sql += " and t.WORK_LOAD = ? ";
					param.add(m.get("WORK_LOAD").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("TASK_TITLE"))){
					sql += " and upper(t.TASK_TITLE) like upper(?) ";
					param.add("%" + m.get("TASK_TITLE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("TASK_REQUIRE"))){
					sql += " and upper(t.TASK_REQUIRE) like upper(?) ";
					param.add("%" + m.get("TASK_REQUIRE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("TASK_STATUS"))){
					sql += " and upper(t.TASK_STATUS) like upper(?) ";
					param.add("%" + m.get("TASK_STATUS").toString().trim() + "%");
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		//List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		List l = this.jdbcDao.query(sql,param.toArray(), p);	
		return l;

	};
	
	
	
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceTaskService#saveSeTraceTask(cn.thd.pojo.se.SeTraceTask)
	 */
	public void saveSeTraceTask(SeTraceTask obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceTaskService#updateSeTraceTask(cn.thd.pojo.se.SeTraceTask)
	 */
	public void updateSeTraceTask(SeTraceTask obj){
		this.pubDao.update(obj);
	};
	
	public String updateSeTraceTaskForAjax(String id,SeTraceTask obj, Object[] nullProperties){
		try {
			this.pubDao.update(obj, id, nullProperties);
			return StaticVar.STATUS_SUCCESS;
		} catch (Exception e) {
			return e.getMessage();
		}
	}
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeService#updateProcessOfTraceTask(java.lang.String, java.lang.Integer)
	 */
	public void updateProcessOfTraceTask(String taskId,Integer process){
		SeTraceTask task = this.querySeTraceTaskById(taskId);
		if(task == null){
			throw new RuntimeException("can't find seTraceTask object");
		}
		task.setCurrentProcess(process);
		this.save(task);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceTaskService#querySeTraceTaskById(java.lang.String)
	 */
	public SeTraceTask querySeTraceTaskById(java.lang.String pk){
		return (SeTraceTask)this.pubDao.findById(SeTraceTask.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceTaskService#deleteSeTraceTaskById(java.lang.String)
	 */
	public void deleteSeTraceTaskById(java.lang.String pk){
		SeTraceTask obj = this.querySeTraceTaskById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除待办任务对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeTraceTaskByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeTraceTaskById(id);
						
						
					}
				}
			}
		}
	};
	
	
	public void transformATaskToLog(String userIds,String taskId,String date,Float workLoad){
		SeTraceTask stt = (SeTraceTask)this.findById(SeTraceTask.class, taskId);
		if(stt == null){
			throw new RuntimeException(" seTraceTask not be fount [" + taskId + "]");
		}
		SeRequirementTrace srt = (SeRequirementTrace)this.findById(SeRequirementTrace.class, stt.getTraceId());
		if(MyStringUtils.isNotEmpty(userIds)){
			String[] userArray = userIds.split(",");
			for(String userId : userArray){
				if(MyStringUtils.isNotEmpty(userId)){
					SeUser su = (SeUser)this.findById(SeUser.class, userId);
					if(su !=null){
						SePersonLog spl = new SePersonLog();
						spl.setPlogDate(MyDateUtils.toDate(date));
						spl.setPlogRemark(stt.getTaskTitle());
						spl.setPlogWorkload(workLoad);
						spl.setTaskId(stt.getTaskId());
						spl.setUserId(userId);
						spl.setProjectId(srt.getProjectId());
						spl.setIsDelete(StaticVar.ISDELETE_UNDELETE);
						spl.setCreateDate(new Date());
						this.pubDao.save(spl);
					}
				}
			}
		}else{
			throw new RuntimeException(" userIds is null");
		}
		
		
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeUserRewardAmerceService#querySeUserRewardAmerce(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeUserRewardAmerce(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.ID as ID, " + //0  主键 
			" t.PROJECT_ID as PROJECT_ID, " + //0 所属系统 			
			" t.USER_ID as USER_ID, " + //1 用户ID 			
			" t.RA_LEVEL as RA_LEVEL, " + //2 登记 			
			" t.REMARK as REMARK, " + //3 备注 			
			" t.IS_DELETE as IS_DELETE, " + //4 是否删除 		
			" u.USER_NAME as USER_NAME "+//5用户名称
			
			" from SE_USER_REWARD_AMERCE t left join SE_USER u on t.USER_ID = u.USER_ID  where IS_DELETE = '" + StaticVar.ISDELETE_UNDELETE + "'";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("ID"))){
				sql += " and t.ID = ? ";
				param.add(m.get("ID").toString());
			}
				if(StringUtil.isNotEmpty(m.get("PROJECT_ID"))){
					sql += " and t.PROJECT_ID = ? ";
					param.add(m.get("PROJECT_ID").toString());
				}
				if(StringUtil.isNotEmpty(m.get("USER_ID"))){
					sql += " and t.USER_ID = ? ";
					param.add(m.get("USER_ID").toString());
				}
				if(StringUtil.isNotEmpty(m.get("RA_LEVEL"))){
					sql += " and t.RA_LEVEL = ? ";
					param.add(m.get("RA_LEVEL").toString());
				}
				if(StringUtil.isNotEmpty(m.get("REMARK"))){
					sql += " and upper(t.REMARK) like upper(?) ";
					param.add("%" + m.get("REMARK").toString().trim() + "%");
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeUserRewardAmerceService#saveSeUserRewardAmerce(cn.thd.pojo.se.SeUserRewardAmerce)
	 */
	public void saveSeUserRewardAmerce(SeUserRewardAmerce obj) {
		obj.setIsDelete(StaticVar.ISDELETE_UNDELETE);
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeUserRewardAmerceService#updateSeUserRewardAmerce(cn.thd.pojo.se.SeUserRewardAmerce)
	 */
	public void updateSeUserRewardAmerce(SeUserRewardAmerce obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeUserRewardAmerceService#querySeUserRewardAmerceById(java.lang.String)
	 */
	public SeUserRewardAmerce querySeUserRewardAmerceById(java.lang.String pk){
		return (SeUserRewardAmerce)this.pubDao.findById(SeUserRewardAmerce.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeUserRewardAmerceService#deleteSeUserRewardAmerceById(java.lang.String)
	 */
	public void deleteSeUserRewardAmerceById(java.lang.String pk){
		SeUserRewardAmerce obj = this.querySeUserRewardAmerceById(pk);
		obj.setIsDelete(StaticVar.ISDELETE_DELETED);
		this.pubDao.update(obj);
	};
	
	
	/**
	 * 批量删除人员奖惩记录对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeUserRewardAmerceByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeUserRewardAmerceById(id);
					}
				}
			}
		}
	};
	
	public List queryTaskListForUserView(Map<String,String> m , Page p){
		String sql = 
				" select " +
				" u.user_id as userId, "  +
				" u.user_mail as userMail, " + 
				" u.user_name as userName, "  +
				" task.task_id as taskId, "  +
				" task.task_title as taskTitle, "  +
				" task.finish_date as planFinishDate, "  +
				" task.work_load as planWorkLoad, "  +
				" (select sum(lg.plog_workload)/8 from se_person_log lg where lg.task_id = task.task_id) as actWorkLoad, "  +
				" (task.work_load - (select sum(lg.plog_workload)/8 from se_person_log lg where lg.task_id = task.task_id) ) as ableTime, "+
				" task.task_status as taskStatus, "  +
				" trace.trace_id as traceId, "  +
				" trace.trace_name as traceName, "  +
				" trace.tree_code as traceTreeCode "  +
				" from se_map_user mu left join se_user u on mu.user_id = u.user_id "  +
				" left join se_trace_task task on mu.rela_tab = 'TASK' and mu.tab_key_value = task.task_id "  + 
				" left join se_requirement_trace trace on trace.trace_id = task.trace_id "  +
				" where mu.rela_tab = 'TASK'  "  ;
		
		List params = new ArrayList();
		//params.add(StaticVar.ISDELETE_UNDELETE);
		if(m!=null){
			String userId = m.get("userId");
			String projectId = m.get("projectId");
			String taskStatus = m.get("taskStatus");
			String expireStatus = m.get("expireStatus");
			if(MyStringUtils.isNotEmpty(userId)){
				sql += " and mu.user_id = ?";
				params.add(userId);
			}
			if(MyStringUtils.isNotEmpty(projectId)){
				sql += " and trace.project_id = ? ";
				params.add(projectId);
			}
			if(MyStringUtils.isNotEmpty(taskStatus)){
				sql += " and task.task_status = ? ";
				params.add(taskStatus);
			}
			if(MyStringUtils.isNotEmpty(expireStatus)){
				if("-1".equals(expireStatus)){
					sql += " and (task.work_load - (select sum(lg.plog_workload)/8 from se_person_log lg where lg.task_id = task.task_id) ) < 0 ";
				}else if("1".equals(expireStatus)){
					sql += " and (task.work_load - (select sum(lg.plog_workload)/8 from se_person_log lg where lg.task_id = task.task_id) ) >= 0 ";
					
				}
			}
			
			
			
			
		}
		List l = this.jdbcDao.query(sql, params.toArray(), p);
		return l;
		
	};
	
	
	public List queryNoteListForUserView(Map<String,String> m , Page p){
		String sql = 
				" select "+
				" u.user_id as userId, "+
				" u.user_name as userName, "+
				" note.alarm_date as alarmDate, "+
				" note.alarm_days as alarmDays, "+
				" note.note_title as noteTitle, "+
				" note.note_status as noteStatus, "+
				" note.note_type as noteType, "+
				" note.note_id as noteId " + 
				" from se_trace_note note  "+
				" left join se_user u on note.exe_user = u.user_id  "+ 
				" left join se_requirement_trace trace on trace.trace_id = note.trace_id "+
				" where note.is_delete = ? ";
		List params = new ArrayList();
		params.add(StaticVar.ISDELETE_UNDELETE);
		if(m!=null){
			String userId = m.get("userId");
			String projectId = m.get("projectId");
			String noteStatus = m.get("noteStatus");
			if(MyStringUtils.isNotEmpty(userId)){
				sql += " and u.user_id = ?";
				params.add(userId);
			}
			if(MyStringUtils.isNotEmpty(projectId)){
				sql += " and trace.project_id = ? ";
				params.add(projectId);
			}
			if(MyStringUtils.isNotEmpty(noteStatus)){
				sql += " and note.note_status = ? ";
				params.add(noteStatus);
			}
		}
		sql += " order by note.create_time ";
		List l = this.jdbcDao.query(sql, params.toArray(), p);
		return l;
	};
	
	public List queryLogListForUserView(Map<String,String> m , Page p){
		String sql = 
				" select "+
				" lg.user_id as userId, "+
				" u.user_name as userName, "+
				" lg.plog_date as plogDate, "+
				" lg.plog_workload as plogWorkLoad, "+
				" lg.plog_remark as plogRemark, "+
				" task.task_title as taskTitle, "+
				" trace.trace_name as traceName, "+
				" lg.plog_id as plogId " + 
				" from se_person_log lg  "+
				" left join se_user u on lg.user_id = u.user_id  "+
				" left join se_trace_task task on lg.task_id = task.task_id  "+
				" left join se_requirement_trace trace on trace.trace_id = task.trace_id where lg.is_delete = ? ";
		List params = new ArrayList();
		params.add(StaticVar.ISDELETE_UNDELETE);
		if(m!=null){
			String userId = m.get("userId");
			String projectId = m.get("projectId");
			String logDateH = m.get("logDateH");
			String logDateL = m.get("logDateL");
			
			if(MyStringUtils.isNotEmpty(userId)){
				sql += " and lg.user_id = ?";
				params.add(userId);
			}
			if(MyStringUtils.isNotEmpty(projectId)){
				sql += " and trace.project_id = ? ";
				params.add(projectId);
			}
			if(MyStringUtils.isNotEmpty(logDateH)){
				sql += " and lg.plog_date <= ? ";
				params.add(logDateH);
			}
			if(MyStringUtils.isNotEmpty(logDateL)){
				sql += " and lg.plog_date >= ? ";
				params.add(logDateL);
			}
		}
		sql += " order by lg.plog_date desc ";
		List l = this.jdbcDao.query(sql, params.toArray(), p);
		return l;
	};
	
	
	
	public List queryAllSeTrace(String rootId){
		SeRequirementTrace trace = this.queryNodeById(rootId);
		List l = new ArrayList();
		Map item = new HashMap();
		item.put("id", trace.getTraceId());
		item.put("name", trace.getTraceName());
		item.put("treeCode", trace.getTreeCode());
		item.put("pId", "root");
		item.put("isParent", "1".equals(trace.getIsLeaf()) ? "true" : "false");
		l.add(item);
		queryChildTraceData(trace.getTraceId(),l);
		return l;
	};
	
	public void queryChildTraceData(String traceId,List r ){
		SeRequirementTrace trace = this.queryNodeById(traceId);
		String treeCode = trace.getTreeCode();
		String sql = "select trace.trace_id as traceId ,trace.tree_code as treeCode from se_requirement_trace trace where trace.tree_code like ? and trace.tree_code not like ? and project_id = ?";
		List params = new ArrayList();
		params.add(treeCode+".%");
		params.add(treeCode+".%.%");
		params.add(trace.getProjectId());
		List l = this.jdbcDao.query(sql, params.toArray(),null);
		if(ListUtil.isNotEmpty(l)){
			for(Object obj : l){
				Map m = (Map)obj;
				String tid = m.get("traceId").toString();
				String tc = m.get("treeCode").toString();
				System.out.println(tid);
				System.out.println(tc);
				SeRequirementTrace cTrace = this.queryNodeById(tid);
				Map item = new HashMap();
				item.put("id", cTrace.getTraceId());
				item.put("name", cTrace.getTraceName());
				item.put("treeCode", cTrace.getTreeCode());
				item.put("pId", traceId);
				item.put("isParent", "1".equals(cTrace.getIsLeaf()) ? "false" : "true");
				
				r.add(item);
				if("0".equals(cTrace.getIsLeaf())){
					queryChildTraceData(cTrace.getTraceId(),r);
				}
			}
		}
		
	}
	
	public List seCountWorkLoadGetData(Map<String,String> m ){
		String sql = 
				" select " + 
				" u.user_id as userId," + 
				" pro.project_id as projectId," + 
				" pro.pro_name as projectName," + 
				" u.user_name as userName," + 
				" sum(lg.plog_workload) as workLoad"+
				" from se_person_log lg left join se_project_info pro on pro.project_id = lg.project_id "+
				" left join se_user u on lg.user_id = u.user_id "+
				" where lg.is_delete = ?   ";
				
		List params = new ArrayList();
		params.add(StaticVar.ISDELETE_UNDELETE);
		if(m!=null){
			String userId = m.get("userId");
			String projectId = m.get("projectId");
			String logDateH = m.get("logDateH");
			String logDateL = m.get("logDateL");
			
			if(MyStringUtils.isNotEmpty(userId)){
				sql += " and lg.user_id = ?";
				params.add(userId);
			}
			if(MyStringUtils.isNotEmpty(projectId)){
				sql += " and lg.project_id = ? ";
				params.add(projectId);
			}
			if(MyStringUtils.isNotEmpty(logDateH)){
				sql += " and DATE_FORMAT(lg.plog_date,'%Y-%m-%d') <= ? ";
				params.add(logDateH);
			}
			if(MyStringUtils.isNotEmpty(logDateL)){
				sql += " and DATE_FORMAT(lg.plog_date,'%Y-%m-%d') >= ? ";
				params.add(logDateL);
			}
		}
		
		
		
		sql += " group by pro.pro_name,u.user_name ";
		
		
		String order = m.get("order");
		String sort = m.get("sort");
		if(MyStringUtils.isNotEmpty(sort)){
			sql += " order by  " + sort + " " + order;
		}
		
		List l = this.jdbcDao.query(sql, params.toArray(), null);
		return l;
	};
	
	
	
	public DataTableBean seCountWorkLoadGetDataForBootstrap(DataTableBean dtb){
		Page p = new Page();
		p.setCurrentPage(dtb.getCurrentPage());
		p.setPageSize(dtb.getPageSize());
		List r = this.seCountWorkLoadGetData(dtb.getConditions());
		if(MyListUtils.isEmpty(r)){
			r = new ArrayList();
		}
		dtb.setData(r);
		dtb.setRecordsTotal(p.getListSize());
		dtb.setRecordsFiltered(p.getListSize());
		return dtb;
	};
	
	public List seCountTaskGetData(Map<String,String> m ){
		String sql = 
				" select distinct "+  
				" pro.pro_name as proName,  "+ 
				" trace.trace_name as traceName, "+ 
				" task.task_title as taskTitle , "+
				" task.current_process as progress , "+
				" task.begin_date as beginDate , "+
				" task.finish_date as finishDate , "+
				" lg.project_id as projectId,    "+ 
				" lg.task_id as taskId, "+ 
				" trace.trace_id as traceId "+ 
				" from  se_person_log lg  left join se_user u on lg.user_id = u.user_id "+  
				" left join se_trace_task task on lg.task_id = task.task_id "+  
				" left join se_requirement_trace trace on task.trace_id = trace.trace_id "+  
				" left join se_project_info pro on trace.project_id = pro.project_id "+  
				" left join se_map_project_user pu on u.user_id = pu.user_id and pro.project_id = pu.project_id "+ 
				" where  lg.is_delete = ? ";

				
		List params = new ArrayList();
		params.add(StaticVar.ISDELETE_UNDELETE);
		if(m!=null){
			String userId = m.get("userId");
			String projectId = m.get("projectId");
			String logDateH = m.get("logDateH");
			String logDateL = m.get("logDateL");
			
			if(MyStringUtils.isNotEmpty(userId)){
				sql += " and lg.user_id = ?";
				params.add(userId);
			}
			if(MyStringUtils.isNotEmpty(projectId)){
				sql += " and lg.project_id = ? ";
				params.add(projectId);
			}
			if(MyStringUtils.isNotEmpty(logDateH)){
				sql += " and lg.plog_date <= ? ";
				params.add(logDateH);
			}
			if(MyStringUtils.isNotEmpty(logDateL)){
				sql += " and lg.plog_date >= ? ";
				params.add(logDateL);
			}
		}
		
		String order = m.get("order");
		String sort = m.get("sort");
		if(MyStringUtils.isNotEmpty(sort)){
			sql += " order by  " + sort + " " + order;
		}
		
		
		//sql += " group by pro.pro_name,u.user_name ";
		List l = this.jdbcDao.query(sql, params.toArray(), null);
		return l;
	};
	
	public DataTableBean seCountTaskGetDataForBootstrap(DataTableBean dtb){
		
		Page p = new Page();
		p.setCurrentPage(dtb.getCurrentPage());
		p.setPageSize(dtb.getPageSize());
		List r = this.seCountTaskGetData(dtb.getConditions());
		if(MyListUtils.isEmpty(r)){
			r = new ArrayList();
		}
		dtb.setData(r);
		dtb.setRecordsTotal(p.getListSize());
		dtb.setRecordsFiltered(p.getListSize());
		
		return dtb;
	};
	
	
	public List seCountTraceGetData(Map<String,String> m ){
		String sql = 
				" select distinct "+  
				" pro.pro_name as proName,  "+ 
				" trace.trace_name as traceName, "+ 
				" lg.project_id as projectId,    "+ 
				" trace.trace_id as traceId "+ 
				" from  se_person_log lg  left join se_user u on lg.user_id = u.user_id "+  
				" left join se_trace_task task on lg.task_id = task.task_id "+  
				" left join se_requirement_trace trace on task.trace_id = trace.trace_id "+  
				" left join se_project_info pro on trace.project_id = pro.project_id "+  
				" left join se_map_project_user pu on u.user_id = pu.user_id and pro.project_id = pu.project_id "+ 
				" where  lg.is_delete = ? ";

				
		List params = new ArrayList();
		params.add(StaticVar.ISDELETE_UNDELETE);
		if(m!=null){
			String userId = m.get("userId");
			String projectId = m.get("projectId");
			String logDateH = m.get("logDateH");
			String logDateL = m.get("logDateL");
			
			if(MyStringUtils.isNotEmpty(userId)){
				sql += " and lg.user_id = ?";
				params.add(userId);
			}
			if(MyStringUtils.isNotEmpty(projectId)){
				sql += " and lg.project_id = ? ";
				params.add(projectId);
			}
			if(MyStringUtils.isNotEmpty(logDateH)){
				sql += " and lg.plog_date <= ? ";
				params.add(logDateH);
			}
			if(MyStringUtils.isNotEmpty(logDateL)){
				sql += " and lg.plog_date >= ? ";
				params.add(logDateL);
			}
		}
		
		String order = m.get("order");
		String sort = m.get("sort");
		if(MyStringUtils.isNotEmpty(sort)){
			sql += " order by  " + sort + " " + order;
		}
		//sql += " group by pro.pro_name,u.user_name ";
		List l = this.jdbcDao.query(sql, params.toArray(), null);
		return l;
	};
	
	
	
	
	
	public List seCountWorkLoadOfDay(Map<String,String> m){
		if(m != null){
			String user_id = m.get("userId") != null ? m.get("userId").toLowerCase() : null;
			String project_id = m.get("projectId") != null ? m.get("projectId").toLowerCase() : null;
			String from_date = m.get("logDateL") != null ? m.get("logDateL").toLowerCase() : null;
			String to_date = m.get("logDateH") != null ? m.get("logDateH").toLowerCase() : null;
			
			String subWhereSql = "";
			String viewSql = 
					" select "+
					" lg.plog_date as nd, "+
					" lg.user_id as user_id , "+
					" lg.project_id as project_id , "+
					" sum(lg.plog_workload) as work_load  "+
					" from  se_person_log lg "+ 
					" where lg.is_delete = ? ";
			String subGroupSql = 
					" group by lg.plog_date,lg.user_id,lg.project_id ";
			
			List params = new ArrayList();
			params.add(StaticVar.ISDELETE_UNDELETE);
			String selectSql = "select sum(v.work_load) as work_load ";
			String groupSql = " group by sd.day ";
			
			
			if(MyStringUtils.isNotEmpty(user_id)){
				selectSql += " ,u.user_name as userName,v.user_id as userId";
				groupSql += " ,v.user_id ";
				subWhereSql += " and lg.user_id = ? ";
				params.add(user_id);
			}else{
				selectSql += " ,'' as userName ,'' as userId";
			}
			
			if(MyStringUtils.isNotEmpty(project_id)){
				selectSql += " ,v.project_id as projectId ";
				groupSql += " ,v.project_id ";
				subWhereSql += " and lg.project_id = ? ";
				params.add(project_id);
			}else{
				selectSql += " , '' as projectId ";
			}
			
			
			String whereSql = " where 1 = 1 ";
			if(MyStringUtils.isNotEmpty(from_date)){
				whereSql += " and DATE_FORMAT(sd.day, '%Y-%m-%d') >= ? ";
				params.add(from_date);
			}
			
			if(MyStringUtils.isNotEmpty(to_date)){
				whereSql += " and DATE_FORMAT(sd.day, '%Y-%m-%d') <= ? ";
				params.add(to_date);
			}
			
			String sql = 
					selectSql + 
					", sd.day ,sd.status from sys_day sd "+ 
					" left join  (" + viewSql + subWhereSql + subGroupSql +") v  on DATE_FORMAT(sd.day, '%Y-%m-%d') = DATE_FORMAT(v.nd, '%Y-%m-%d') "+
					" left join se_user u on v.user_id = u.user_id "
					+ whereSql +  groupSql;
			
			return this.jdbcDao.query(sql, params.toArray(), null);
		}else{
			return new ArrayList();
		}
		
	};
	
	
	
	
	
	
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceDefectService#querySeTraceDefect(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeTraceDefect(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.DEFECT_ID as DEFECT_ID, " + //0  记录id 
			" t.TRACE_ID as TRACE_ID, " + //0 矩阵id 			
			" t.DEFECT_DESC as DEFECT_DESC, " + //1 缺陷标题			
			" t.DEFECT_PIC as DEFECT_PIC, " + //2 截图 			
			" t.DEFECT_CLASSIFY as DEFECT_CLASSIFY, " + //3 缺陷分类 			
			" t.DEFECT_STATUS as DEFECT_STATUS, " + //4 缺陷状态 	
			" dev.USER_NAME as DEVELOPER, " + //5 开发人员 			
			" tes.USER_NAME as TEST_USER, " + //6 测试人员 	
			" t.DEVELOPER as DEVELOPER_ID," + //开发人员ID
			" t.TEST_USER as TEST_USER_ID," + //测试ID
			" t.CREATE_TIME as CREATE_TIME, " + //7 创建时间 			
			" t.UPDATE_TIME as UPDATE_TIME, " + //8 更新时间 			
			" trace.TRACE_NAME as TRACE_NAME " + //9 矩阵名称
			" from SE_TRACE_DEFECT t  left join SE_REQUIREMENT_TRACE trace on t.TRACE_ID = trace.TRACE_ID "+ 
			" left join SE_USER dev on t.DEVELOPER = dev.USER_ID " +
			" left join SE_USER tes on t.TEST_USER = tes.USER_ID " +
		    " where t.IS_DELETE = ?  ";
		param.add(StaticVar.ISDELETE_UNDELETE);
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("DEFECT_ID"))){
				sql += " and t.DEFECT_ID like ? ";
				param.add("%" + m.get("DEFECT_ID").toString().trim() + "%");
			}
				/*if(StringUtil.isNotEmpty(m.get("TRACE_ID"))){
					sql += " and upper(t.TRACE_ID) like upper(?) ";
					param.add("%" + m.get("TRACE_ID").toString().trim() + "%");
				}*/
			
				if(StringUtil.isNotEmpty(m.get("TRACE_ID"))){
					SeRequirementTrace srt = (SeRequirementTrace)this.findById(SeRequirementTrace.class,m.get("TRACE_ID").toString());
					String treeCode = srt.getTreeCode();
					sql += " and trace.TREE_CODE like ?  ";
					param.add(treeCode + "%");
				}
			
				if(StringUtil.isNotEmpty(m.get("DEFECT_DESC"))){
					sql += " and upper(t.DEFECT_DESC) like upper(?) ";
					param.add("%" + m.get("DEFECT_DESC").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("DEFECT_PIC"))){
					sql += " and upper(t.DEFECT_PIC) like upper(?) ";
					param.add("%" + m.get("DEFECT_PIC").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("DEFECT_CLASSIFY"))){
					sql += " and upper(t.DEFECT_CLASSIFY) like upper(?) ";
					param.add("%" + m.get("DEFECT_CLASSIFY").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("DEFECT_STATUS"))){
					sql += " and upper(t.DEFECT_STATUS) like upper(?) ";
					param.add("%" + m.get("DEFECT_STATUS").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("DEVELOPER"))){
					sql += " and upper(t.DEVELOPER) like upper(?) ";
					param.add("%" + m.get("DEVELOPER").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("TEST_USER"))){
					sql += " and upper(t.TEST_USER) like upper(?) ";
					param.add("%" + m.get("TEST_USER").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("CREATE_TIME"))){
					sql += " and t.CREATE_TIME = ? ";
					param.add(m.get("CREATE_TIME").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("UPDATE_TIME"))){
					sql += " and t.UPDATE_TIME = ? ";
					param.add(m.get("UPDATE_TIME").toString().trim());
				}
				
				
				if(StringUtil.isNotEmpty(m.get("PROJECT_ID"))){
					sql += " and trace.PROJECT_ID = ? ";
					param.add(m.get("PROJECT_ID").toString().trim());
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		//List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		List l = this.jdbcDao.query(sql, param.toArray(), p);
		return l;

	};
	
	public DataTableBean queryMySeTraceDefect(DataTableBean dtb){
		Page p = new Page();
		p.setCurrentPage(dtb.getCurrentPage());
		p.setPageSize(dtb.getPageSize());
		List r = this.querySeTraceDefect(dtb.getConditions(),p);
		if(MyListUtils.isEmpty(r)){
			r = new ArrayList();
		}
		dtb.setData(r);
		dtb.setRecordsTotal(p.getListSize());
		dtb.setRecordsFiltered(p.getListSize());
		return dtb;
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceDefectService#saveSeTraceDefect(cn.thd.pojo.se.SeTraceDefect)
	 */
	public void saveSeTraceDefect(SeTraceDefect obj) {
		obj.setCreateTime(new Date());
		obj.setUpdateTime(new Date());
		obj.setIsDelete(StaticVar.ISDELETE_UNDELETE);
		this.pubDao.save(obj);
		
		SeTraceDefectRepair rp = new SeTraceDefectRepair();
		rp.setCreateTime(new Date());
		rp.setDefectId(obj.getDefectId());
		rp.setOperateStatus("问题提出");
		rp.setOperateUser(obj.getTestUser());
		rp.setRemark(obj.getDefectPic());
		this.pubDao.save(rp);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceDefectService#updateSeTraceDefect(cn.thd.pojo.se.SeTraceDefect)
	 */
	public void updateSeTraceDefect(SeTraceDefect obj){
		obj.setUpdateTime(new Date());
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceDefectService#querySeTraceDefectById(java.lang.String)
	 */
	public SeTraceDefect querySeTraceDefectById(java.lang.String pk){
		return (SeTraceDefect)this.pubDao.findById(SeTraceDefect.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceDefectService#deleteSeTraceDefectById(java.lang.String)
	 */
	public void deleteSeTraceDefectById(java.lang.String pk){
		SeTraceDefect obj = this.querySeTraceDefectById(pk);
		obj.setIsDelete(StaticVar.ISDELETE_DELETED);
		this.pubDao.update(obj);
	};
	
	
	/**
	 * 批量删除矩阵缺陷对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeTraceDefectByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
						deleteSeTraceDefectById(id);
					}
				}
			}
		}
	};
	
	public String queryContentOfTraceDefect(String defectId){
		SeTraceDefect std = this.querySeTraceDefectById(defectId);
		return std.getDefectPic();
	};
	
	public void updateTraceDefectStatus(String defectId,String status,String userId,String desc){
		SeTraceDefect std = this.querySeTraceDefectById(defectId);
		std.setDefectStatus(status);
		this.updateSeTraceDefect(std);
		
		SeTraceDefectRepair rp = new SeTraceDefectRepair();
		rp.setCreateTime(new Date());
		rp.setDefectId(defectId);
		rp.setOperateStatus(status);
		rp.setOperateUser(userId);
		rp.setRemark(desc);
		this.pubDao.save(rp);
	};
	
	public List queryTraceDefectStatusList(String defectId){
		String sql = 
				" select " +
				" tdr.repair_id as repairId, " +
				" tdr.defect_id as defectId, " +
				" u.user_name as userName, "+
				" tdr.operate_user as operater, " +
				" tdr.operate_status as operateStatus, " +
				" tdr.remark as remark, " +
				" tdr.create_time as createTime " +
				" from se_trace_defect_repair tdr left join se_user u on tdr.operate_user = u.user_id "+ 
				" where defect_id = ? order by tdr.create_time desc " ;
		List<String> param = new ArrayList<String>();
		param.add(defectId);
		return this.jdbcDao.query(sql, param.toArray(), null);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceDefectRepairService#querySeTraceDefectRepair(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeTraceDefectRepair(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.REPAIR_ID as REPAIR_ID, " + //0   
			" t.DEFECT_ID as DEFECT_ID, " + //0  			
			" t.OPERATE_USER as OPERATE_USER, " + //1  			
			" t.OPERATE_STATUS as OPERATE_STATUS, " + //2  			
			" t.REMARK as REMARK, " + //3  			
			" t.CREATE_TIME as CREATE_TIME " + //4  			
			
			" from SE_TRACE_DEFECT_REPAIR t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("REPAIR_ID"))){
				sql += " and t.REPAIR_ID like ? ";
				param.add("%" + m.get("REPAIR_ID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("DEFECT_ID"))){
					sql += " and upper(t.DEFECT_ID) like upper(?) ";
					param.add("%" + m.get("DEFECT_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("OPERATE_USER"))){
					sql += " and upper(t.OPERATE_USER) like upper(?) ";
					param.add("%" + m.get("OPERATE_USER").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("OPERATE_STATUS"))){
					sql += " and upper(t.OPERATE_STATUS) like upper(?) ";
					param.add("%" + m.get("OPERATE_STATUS").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("REMARK"))){
					sql += " and upper(t.REMARK) like upper(?) ";
					param.add("%" + m.get("REMARK").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("CREATE_TIME"))){
					sql += " and t.CREATE_TIME = ? ";
					param.add(m.get("CREATE_TIME").toString().trim());
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceDefectRepairService#saveSeTraceDefectRepair(cn.thd.pojo.se.SeTraceDefectRepair)
	 */
	public void saveSeTraceDefectRepair(SeTraceDefectRepair obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceDefectRepairService#updateSeTraceDefectRepair(cn.thd.pojo.se.SeTraceDefectRepair)
	 */
	public void updateSeTraceDefectRepair(SeTraceDefectRepair obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceDefectRepairService#querySeTraceDefectRepairById(java.lang.String)
	 */
	public SeTraceDefectRepair querySeTraceDefectRepairById(java.lang.String pk){
		return (SeTraceDefectRepair)this.pubDao.findById(SeTraceDefectRepair.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeTraceDefectRepairService#deleteSeTraceDefectRepairById(java.lang.String)
	 */
	public void deleteSeTraceDefectRepairById(java.lang.String pk){
		SeTraceDefectRepair obj = this.querySeTraceDefectRepairById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除矩阵缺陷对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeTraceDefectRepairByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeTraceDefectRepairById(id);
						
						
					}
				}
			}
		}
	};
	
	
	public List queryMyProject(String userId){
		String sql = " select "
				+ " projectId, "
				+ " projectName, "
				+ " userId, "
				+ " userName, "
				+ " lvId, "
				+ " lvName, "
				+ " posId, "
				+ " posName "
				+ " from view_project_user where userId = ? ";
		List params = new ArrayList();
		params.add(userId);
		return this.jdbcDao.query(sql, params.toArray(), null);
	};
	
	public String assignOperator(String traceTaskId,String userIds){
		try{
			String r = commonService.saveMapUser("TASK", traceTaskId, userIds);
			if(!StaticVar.STATUS_SUCCESS.equals(r)){
				throw new RuntimeException(r);
			}
			SeTraceTask task = this.querySeTraceTaskById(traceTaskId);
			List l = commonService.queryMapUser("TASK", traceTaskId);
			String names = MyListUtils.listMapToString(l, "USER_NAME", ",");
			task.setOperator(names);
			this.pubDao.save(task);
			return StaticVar.STATUS_SUCCESS;
		}catch(Exception e){
			throw new RuntimeException(e);
		}
		
		
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeRoleService#querySeRole(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeRole(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.ROLE_CODE as ROLE_CODE, " + //0  角色Code 
			" t.ROLE_NAME as ROLE_NAME, " + //0 角色名称 			
			" t.ROLE_LEVEL as ROLE_LEVEL, " + //1 角色等级 			
			" t.ROLE_CLASSIFY as ROLE_CLASSIFY, " + //2 角色分类 			
			" t.IS_VALID as IS_VALID, " + //3 是否有效 			
			" t.CREATOR as CREATOR, " + //4 创建人 			
			" t.CREATE_TIME as CREATE_TIME, " + //5 创建时间 			
			" t.MODIFIER as MODIFIER, " + //6 修改人 			
			" t.MODI_TIME as MODI_TIME " + //7 修改时间 			
			
			" from SE_ROLE t  where t.IS_VALID = ? ";
		param.add(StaticVar.ISVALID_VALID);
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("ROLE_CODE"))){
				sql += " and t.ROLE_CODE like ? ";
				param.add("%" + m.get("ROLE_CODE").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("ROLE_NAME"))){
					sql += " and (upper(t.ROLE_NAME) like upper(?) or upper(t.ROLE_CODE) like upper(?)) ";
					param.add("%" + m.get("ROLE_NAME").toString().trim() + "%");
					param.add("%" + m.get("ROLE_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("ROLE_LEVEL"))){
					sql += " and upper(t.ROLE_LEVEL) like upper(?) ";
					param.add("%" + m.get("ROLE_LEVEL").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("ROLE_CLASSIFY"))){
					sql += " and upper(t.ROLE_CLASSIFY) like upper(?) ";
					param.add("%" + m.get("ROLE_CLASSIFY").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_VALID"))){
					sql += " and upper(t.IS_VALID) like upper(?) ";
					param.add("%" + m.get("IS_VALID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("CREATOR"))){
					sql += " and upper(t.CREATOR) like upper(?) ";
					param.add("%" + m.get("CREATOR").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("CREATE_TIME"))){
					sql += " and t.CREATE_TIME = ? ";
					param.add(m.get("CREATE_TIME").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("MODIFIER"))){
					sql += " and upper(t.MODIFIER) like upper(?) ";
					param.add("%" + m.get("MODIFIER").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("MODI_TIME"))){
					sql += " and t.MODI_TIME = ? ";
					param.add(m.get("MODI_TIME").toString().trim());
				}
				
				
			
		}
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.jdbcDao.query(sql,param.toArray(), p);	
		return l;
	}
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeRoleService#querySeRole(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeRoleForList(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.ROLE_CODE as ROLE_CODE, " + //0  角色Code 
			" t.ROLE_NAME as ROLE_NAME, " + //0 角色名称 			
			" t.ROLE_LEVEL as ROLE_LEVEL, " + //1 角色等级 			
			" t.ROLE_CLASSIFY as ROLE_CLASSIFY, " + //2 角色分类 			
			" t.IS_VALID as IS_VALID, " + //3 是否有效 			
			" t.CREATOR as CREATOR, " + //4 创建人 			
			" t.CREATE_TIME as CREATE_TIME, " + //5 创建时间 			
			" t.MODIFIER as MODIFIER, " + //6 修改人 			
			" t.MODI_TIME as MODI_TIME " + //7 修改时间 			
			
			" from SE_ROLE t  where t.IS_VALID = ? ";
		param.add(StaticVar.ISVALID_VALID);
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("ROLE_CODE"))){
				sql += " and t.ROLE_CODE like ? ";
				param.add("%" + m.get("ROLE_CODE").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("ROLE_NAME"))){
					sql += " and (upper(t.ROLE_NAME) like upper(?) or upper(t.ROLE_CODE) like upper(?)) ";
					param.add("%" + m.get("ROLE_NAME").toString().trim() + "%");
					param.add("%" + m.get("ROLE_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("ROLE_LEVEL"))){
					sql += " and upper(t.ROLE_LEVEL) like upper(?) ";
					param.add("%" + m.get("ROLE_LEVEL").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("ROLE_CLASSIFY"))){
					sql += " and upper(t.ROLE_CLASSIFY) like upper(?) ";
					param.add("%" + m.get("ROLE_CLASSIFY").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_VALID"))){
					sql += " and upper(t.IS_VALID) like upper(?) ";
					param.add("%" + m.get("IS_VALID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("CREATOR"))){
					sql += " and upper(t.CREATOR) like upper(?) ";
					param.add("%" + m.get("CREATOR").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("CREATE_TIME"))){
					sql += " and t.CREATE_TIME = ? ";
					param.add(m.get("CREATE_TIME").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("MODIFIER"))){
					sql += " and upper(t.MODIFIER) like upper(?) ";
					param.add("%" + m.get("MODIFIER").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("MODI_TIME"))){
					sql += " and t.MODI_TIME = ? ";
					param.add(m.get("MODI_TIME").toString().trim());
				}
				
				if(StringUtil.isNotEmpty(m.get("PROJECT_ID"))){
					sql += " and t.ROLE_CLASSIFY = ? ";
					param.add(StaticVar.ROLECLASSIFY_PROJECT);
				}else{
					sql += " and t.ROLE_CLASSIFY = ? ";
					param.add(StaticVar.ROLECLASSIFY_SYSTEM);
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.jdbcDao.query(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeRoleService#saveSeRole(cn.thd.pojo.se.SeRole)
	 */
	public void saveSeRole(SeRole obj) {
		obj.setCreateTime(new Date());
		obj.setIsValid(StaticVar.ISVALID_VALID);
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeRoleService#updateSeRole(cn.thd.pojo.se.SeRole)
	 */
	public void updateSeRole(SeRole obj){
		obj.setModiTime(new Date());
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeRoleService#querySeRoleById(java.lang.String)
	 */
	public SeRole querySeRoleById(java.lang.String pk){
		return (SeRole)this.pubDao.findById(SeRole.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeRoleService#deleteSeRoleById(java.lang.String)
	 */
	public void deleteSeRoleById(java.lang.String pk){
		SeRole obj = this.querySeRoleById(pk);
		obj.setIsValid(StaticVar.ISVALID_INVALID);
		this.updateSeRole(obj);
	};
	
	
	/**
	 * 批量删除系统角色对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeRoleByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
						deleteSeRoleById(id);
					}
				}
			}
		}
	};
	
	
	public List queryUserRole(String projectId,String userId){
		String sql = 				
				" select "+
				" u.user_name as USER_NAME, "+
				" u.user_id as USER_ID, "+
				" r.role_code as ROLE_CODE, "+
				" r.role_level as ROLE_LEVEL, "+
				" r.role_name as ROLE_NAME, "+
				" r.role_classify as ROLE_CLASSIFY, "+
				" m.project_id as PROJECT_ID "+
				" from se_map_user_role m  "+
				" left join se_user u on m.user_id = u.user_id "+
				" left join se_role r on m.role_code = r.role_code "+
				" where 1=1  ";
		List params = new ArrayList();
		
		if(MyStringUtils.isNotEmpty(userId)){
			sql += " and m.user_id = ? ";
			params.add(userId);
		}
		
		if(MyStringUtils.isNotEmpty(projectId)){
			sql += " and m.project_id = ? ";
			sql += " and r.role_classify = ? ";
			params.add(projectId);
			params.add(StaticVar.ROLECLASSIFY_PROJECT);
		}else{
			sql += " and r.role_classify = ? ";
			params.add(StaticVar.ROLECLASSIFY_SYSTEM);
		}
		
		return this.jdbcDao.query(sql, params.toArray(),null);
				
	};
	
	
	public String saveUserRole(String projectId,String userId,String roleCodes){
		try{
			
			if(MyStringUtils.isEmpty(userId)){
				throw new RuntimeException("user id can't be found");
			}
			String sql = "";
			List params = new ArrayList();
			if(MyStringUtils.isNotEmpty(projectId)){
				sql = "delete from se_map_user_role where user_id = ? and project_id = ? ";
				params.add(userId);
				params.add(projectId);
			}else{
				sql = "delete from se_map_user_role where user_id = ? and (project_id is null or project_id = '')";
				params.add(userId);
			}
			
			
			this.pubDao.executeSql(sql, params.toArray());
			if(StringUtil.isNotEmpty(roleCodes)){
				String[] codes = roleCodes.split(",");
				if(codes.length > 0){
					for(String code : codes){
						if(StringUtil.isNotEmpty(code)){
							SeMapUserRole m = new SeMapUserRole();
							m.setProjectId(projectId);
							m.setUserId(userId);
							m.setRoleCode(code);
							this.pubDao.save(m);
						}
					}
				}
			}
			this.pubDao.flush();
			return StaticVar.STATUS_SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return "saveMapUser failure !";
		}
	}
	
	
	public LoginUserInfo createLoginUserInfo(String userAccount){
		SeUser seUser = this.querySeUserByAccount(userAccount);
		LoginUserInfo loginUserInfo = new LoginUserInfo();
		loginUserInfo.setAccount(seUser.getUserAccount());
		loginUserInfo.setUserId(seUser.getUserId());
		loginUserInfo.setUserName(seUser.getUserName());
		loginUserInfo.setSeUser(seUser);
		
		List sysRoleList = this.queryUserRole(null, seUser.getUserId());
		List<String> sysRoles = new ArrayList<String>();
		for(Object sysRoleObj : sysRoleList){
			try {
				Map sRole = (Map)sysRoleObj;
				sysRoles.add(sRole.get("ROLE_CODE").toString());
			} catch (Exception e) {
				e.printStackTrace();
				this.getLog().warn("查询系统角色错误");
			}
		}
		loginUserInfo.setSysRoles(sysRoles);
		List projectList = this.queryMyProject(seUser.getUserId());
		
		
		
		
		
		
		Map projects = new HashMap();
		if(MyListUtils.isNotEmpty(projectList)){
			for(Object objs : projectList){
				Map obj = (Map)objs;
				try{
					String projectId = obj.get("projectId").toString();
					
					List projectRoleList = this.queryUserRole(projectId, seUser.getUserId());
					List projectRoles = new ArrayList();
					for(Object proRoles : projectRoleList){
						
						try {
							Map proRole = (Map)proRoles;
							projectRoles.add(proRole.get("ROLE_CODE").toString());
						} catch (Exception e) {
							e.printStackTrace();
							this.getLog().warn("查询项目角色错误");
						}
						projects.put(projectId, projectRoles);
					}
					
					
				}catch(Exception e){
					e.printStackTrace();
					this.getLog().warn("查询系统错误");
				}
				
			}
		}
		
		loginUserInfo.setProjects(projects);
		
		if("lwang".equals(userAccount)){
			loginUserInfo.setUserRole("admin");
			loginUserInfo.setCanReadCost("1");
		}
		return loginUserInfo;
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMenuService#querySeMenu(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeMenu(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.MENU_ID as MENU_ID, " + //0  菜单ID 
			" t.MENU_NAME as MENU_NAME, " + //0 菜单名称 			
			" t.TREE_CODE as TREE_CODE, " + //1 树形代码 			
			" t.IS_LEAF as IS_LEAF, " + //2 是否叶子节点 			
			" t.MENU_URL as MENU_URL, " + //3 菜单URL 			
			" t.MENU_DESC as MENU_DESC, " + //4 功能描述 			
			" t.IS_VALID as IS_VALID, " + //5 是否有效 			
			" t.MENU_ICO as MENU_ICO, " + //6 图标样式 	
			" t.MENU_ORDER as MENU_ORDER, " + //7排序号	
			" t.OPEN_TYPE as OPEN_TYPE " + //8打开方式 			
			
			" from SE_MENU t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isEmpty(m.get("MENU_ID"))){
				sql += " and t.TREE_CODE like ? and t.TREE_CODE not like ? ";
				param.add("root.%");
				param.add("root.%.%");
			}else{
				
				
				
			}
			if(StringUtil.isNotEmpty(m.get("MENU_NAME"))){
				sql += " and upper(t.MENU_NAME) like upper(?) ";
				param.add("%" + m.get("MENU_NAME").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("TREE_CODE"))){
				sql += " and upper(t.TREE_CODE) like upper(?) ";
				param.add("%" + m.get("TREE_CODE").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("IS_LEAF"))){
				sql += " and upper(t.IS_LEAF) like upper(?) ";
				param.add("%" + m.get("IS_LEAF").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("MENU_URL"))){
				sql += " and upper(t.MENU_URL) like upper(?) ";
				param.add("%" + m.get("MENU_URL").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("MENU_DESC"))){
				sql += " and upper(t.MENU_DESC) like upper(?) ";
				param.add("%" + m.get("MENU_DESC").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("IS_VALID"))){
				sql += " and upper(t.IS_VALID) like upper(?) ";
				param.add("%" + m.get("IS_VALID").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("MENU_ICO"))){
				sql += " and upper(t.MENU_ICO) like upper(?) ";
				param.add("%" + m.get("MENU_ICO").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("OPEN_TYPE"))){
				sql += " and upper(t.OPEN_TYPE) like upper(?) ";
				param.add("%" + m.get("OPEN_TYPE").toString().trim() + "%");
			}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	
	public String queryMenuMaxTreeCode(String code) {
		String sql = "select tree_code from se_menu where tree_code like '" + code + ".%' and tree_code not like '" + code + ".%.%' order by tree_code desc";
		List l = this.pubDao.findBySql(sql);
		if(ListUtil.isNotEmpty(l)){
			return l.get(0).toString();
		}else{
			return null;
		}
	}

	
	
	public String makeMenuChildCode(String treeCode){
		String str = "";
		String maxCode = this.queryMenuMaxTreeCode(treeCode);
		int ct = 1;
		if(StringUtil.isNotEmpty(maxCode)){
			ct = TreeUtil.getCount(maxCode) + 1;
		}
		treeCode = treeCode + "." + TreeUtil.createCode("00000", ct);
		return treeCode;

	}
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMenuService#saveSeMenu(cn.thd.pojo.se.SeMenu)
	 */
	public void saveSeMenu(SeMenu obj,String parentId) {
		String parentCode = "root";
		SeMenu parentMenu = null;
		if(MyStringUtils.isNotEmpty(parentId)){
			parentMenu = this.querySeMenuById(parentId);
			if(parentMenu == null){
				throw new RuntimeException("未找到父节点");
			}
			parentCode = parentMenu.getTreeCode();
		}
		String treeCode = makeMenuChildCode(parentCode);
		obj.setTreeCode(treeCode);
		obj.setIsValid(StaticVar.ISVALID_VALID);
		obj.setParentId(parentId);
		obj.setIsLeaf(StaticVar.ISLEAF_LEAF);
		this.pubDao.save(obj);
		if(parentMenu != null){
			parentMenu.setIsLeaf(StaticVar.ISLEAF_FOLDER);
			this.pubDao.update(parentMenu);
		}
		
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMenuService#updateSeMenu(cn.thd.pojo.se.SeMenu)
	 */
	public void updateSeMenu(SeMenu obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMenuService#querySeMenuById(java.lang.String)
	 */
	public SeMenu querySeMenuById(java.lang.String pk){
		return (SeMenu)this.pubDao.findById(SeMenu.class,pk);
	};
	
	public List querySeMenuForDataGrid(String id, Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.MENU_ID as MENU_ID, " + //0  菜单ID 
			" t.MENU_NAME as MENU_NAME, " + //0 菜单名称 	
			" t.MENU_NAME_EN as MENU_NAME_EN, " + //0 菜单英文名称 	
			" t.TREE_CODE as TREE_CODE, " + //1 树形代码 			
			" t.IS_LEAF as IS_LEAF, " + //2 是否叶子节点 			
			" t.MENU_URL as MENU_URL, " + //3 菜单URL 			
			" t.MENU_DESC as MENU_DESC, " + //4 功能描述 			
			" t.IS_VALID as IS_VALID, " + //5 是否有效 			
			" t.MENU_ICO as MENU_ICO, " + //6 图标样式 	
			" t.MENU_ORDER as MENU_ORDER, " + //7排序号	
			" t.OPEN_TYPE as OPEN_TYPE, " + //8 打开方式 			
			" (select count(1) from se_menu x where  " +
			" 		   x.TREE_CODE like  CONCAT(t.TREE_CODE , '.%')  " +
			" 		   and x.TREE_CODE not like  CONCAT(t.TREE_CODE , '.%.%') " +
			" ) as state " +
			" from SE_MENU t  where t.IS_VALID = ?  ";
		param.add(StaticVar.ISVALID_VALID);
		if(StringUtil.isEmpty(id)){
			sql += " and t.TREE_CODE like ? and t.TREE_CODE not like ? ";
			param.add("root.%");
			param.add("root.%.%");
		}else{
			SeMenu menu = this.querySeMenuById(id);
			sql += " and t.TREE_CODE like ? and t.TREE_CODE not like ? ";
			param.add(menu.getTreeCode() + ".%");
			param.add(menu.getTreeCode() + ".%.%");
		}
		sql += " order by t.MENU_ORDER asc" ;
		List l  = new ArrayList();
		if(StringUtil.isEmpty(id)){
			l = this.jdbcDao.query(sql, param.toArray(), p);	
		}else{
			l = this.jdbcDao.query(sql, param.toArray(),null);	
		}
		
		System.out.println(sql);
		
		
		String parentId = "0";
		if(id != null){
			parentId = id;
		}
		if(MyListUtils.isNotEmpty(l)){
			for(Object objs : l){
				Map obj = (Map)objs;
				//该属性必须存在
				obj.put("parentId", parentId);
				//设置文件夹加点还是叶子节点
				if(!"0".equals(obj.get("state").toString())){
					obj.put("state","closed");
				}
			}
		}
		
		
		return l;
	}
	
	public List querySeMenuForZtree(){
		String sql = " select menu_id as id,parent_id as pId,menu_name as name,is_leaf as isParent from se_menu where is_valid = ? order by menu_order asc";
		List params = new ArrayList();
		params.add(StaticVar.ISVALID_VALID);
		List l = this.jdbcDao.query(sql, params.toArray(),null);
		return l;
	}
	
	public SeMenu querySeMenuOfParent(String id){
		SeMenu m = this.querySeMenuById(id);
		String pCode = m.getTreeCode();
		String code = TreeUtil.parentCode(pCode);
		return this.querySeMenuByTreeCode(code);
	};
	public String queryTreeCodeById(String menuId){
		SeMenu menu = this.querySeMenuById(menuId);
		return menu.getTreeCode();
	};
	
	public SeMenu querySeMenuByTreeCode(String treeCode){
		String sql = "select menu_id from se_menu where tree_code = ? ";
		List param = new ArrayList();
		param.add(treeCode);
		List l = this.jdbcDao.query(sql, param.toArray(), null);
		Map obj =  (Map)MyListUtils.getOne(l);
		String menuId =  obj.get("menu_id").toString();
		return this.querySeMenuById(menuId);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMenuService#deleteSeMenuById(java.lang.String)
	 */
	public void deleteSeMenuById(java.lang.String pk){
		SeMenu obj = this.querySeMenuById(pk);
		obj.setIsValid(StaticVar.ISVALID_INVALID);
		this.pubDao.update(obj);
	};
	
	
	/**
	 * 批量删除系统菜单对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeMenuByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeMenuById(id);
						
						
					}
				}
			}
		}
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeAuthService#querySeAuth(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeAuth(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.AUTH_CODE as AUTH_CODE, " + //0  标记 
			" t.AUTH_DESC as AUTH_DESC " + //0 说明 			
			
			" from SE_AUTH t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("AUTH_CODE"))){
				sql += " and t.AUTH_CODE like ? ";
				param.add("%" + m.get("AUTH_CODE").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("AUTH_DESC"))){
					sql += " and upper(t.AUTH_DESC) like upper(?) ";
					param.add("%" + m.get("AUTH_DESC").toString().trim() + "%");
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.jdbcDao.query(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeAuthService#saveSeAuth(cn.thd.pojo.se.SeAuth)
	 */
	public void saveSeAuth(SeAuth obj) {
		obj.setAuthCode(obj.getAuthCode().toUpperCase());
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeAuthService#updateSeAuth(cn.thd.pojo.se.SeAuth)
	 */
	public void updateSeAuth(SeAuth obj){
		obj.setAuthCode(obj.getAuthCode().toUpperCase());
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeAuthService#querySeAuthById(java.lang.String)
	 */
	public SeAuth querySeAuthById(java.lang.String pk){
		return (SeAuth)this.pubDao.findById(SeAuth.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeAuthService#deleteSeAuthById(java.lang.String)
	 */
	public void deleteSeAuthById(java.lang.String pk){
		SeAuth obj = this.querySeAuthById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除权限字典对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeAuthByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeAuthById(id);
						
						
					}
				}
			}
		}
	};
	
	public List queryAuthOfRole(String roleCode){
		String sql = " select role_code as roleCode, auth_code as authCode from se_map_role_auth where role_code = ? ";
		List params = new ArrayList();
		params.add(roleCode);
		List l = this.jdbcDao.query(sql, params.toArray(),null);
		return l;
	};
	
	public List queryMenuOfRole(String roleCode){
		String sql = " select role_code as roleCode, menu_id as menuId from se_map_role_menu where role_code = ? ";
		List params = new ArrayList();
		params.add(roleCode);
		List l = this.jdbcDao.query(sql, params.toArray(),null);
		return l;
	};
	
	public List queryAuthOfUser(String userId){
		String sql = " select distinct userId as userId, authCode as authCode from view_user_auth where userId = ? ";
		List params = new ArrayList();
		params.add(userId);
		List l = this.jdbcDao.query(sql, params.toArray(),null);
		return l;
	};
	
	public List queryMenuOfUser(String userId){
		String sql = " select distinct userId as userId, menuId as menuId from view_user_menu where userId = ? ";
		List params = new ArrayList();
		params.add(userId);
		List l = this.jdbcDao.query(sql, params.toArray(),null);
		return l;
	};
	
	public String saveAuthOfRole(String roleCode,String authCodes){
		try{
			
			if(MyStringUtils.isEmpty(roleCode)){
				throw new RuntimeException("role code can't be found");
			}
			String sql = "";
			List params = new ArrayList();
			sql = "delete from se_map_role_auth where role_code = ? ";
			params.add(roleCode);
			this.pubDao.executeSql(sql, params.toArray());
			
			
			if(StringUtil.isNotEmpty(authCodes)){
				String[] codes = authCodes.split(",");
				if(codes.length > 0){
					for(String code : codes){
						if(StringUtil.isNotEmpty(code)){
							SeMapRoleAuth m = new SeMapRoleAuth();
							m.setRoleCode(roleCode);
							m.setAuthCode(code);
							this.pubDao.save(m);
						}
					}
				}
			}
			this.pubDao.flush();
			return StaticVar.STATUS_SUCCESS;
			
			
			
		}catch(Exception e){
			return e.getMessage();
		}
	};
	
	
	public String saveMenuOfRole(String roleCode,String menuIds){
		try{
			
			if(MyStringUtils.isEmpty(roleCode)){
				throw new RuntimeException("role code can't be found");
			}
			String sql = "";
			List params = new ArrayList();
			sql = "delete from se_map_role_menu where role_code = ? ";
			params.add(roleCode);
			this.pubDao.executeSql(sql, params.toArray());
			
			
			if(StringUtil.isNotEmpty(menuIds)){
				String[] codes = menuIds.split(",");
				if(codes.length > 0){
					for(String code : codes){
						if(StringUtil.isNotEmpty(code)){
							SeMapRoleMenu m = new SeMapRoleMenu();
							m.setRoleCode(roleCode);
							m.setMenuId(code);
							this.pubDao.save(m);
						}
					}
				}
			}
			this.pubDao.flush();
			return StaticVar.STATUS_SUCCESS;
		}catch(Exception e){
			return e.getMessage();
		}
	};
	
	public String hasAuth(String userId,String projectId,String authCode){
		String sql = "select  userId,projectId,roleCode,authCode from view_user_auth "
				+ "where (userId = ? and projectId = ? and authCode = ?) or (userId=? and authCode = ? and (projectId is null or projectId = '')) ";
		List params = new ArrayList();
		params.add(userId);
		params.add(projectId);
		params.add(authCode);
		params.add(userId);
		params.add(authCode);
		List l = this.jdbcDao.query(sql, params.toArray(), null);
		
		
		if(MyListUtils.isNotEmpty(l)){
			return StaticVar.Y;
		}else{
			return StaticVar.N;
		}
	}
	
	public Map<String,String> queryAuth(String userId,String projectId){
		String sql = "select  userId,projectId,roleCode,authCode from view_user_auth "
				+ "where (userId = ? and projectId = ? ) or (userId=? and (projectId is null or projectId = '')) ";
		List params = new ArrayList();
		params.add(userId);
		params.add(projectId);
		params.add(userId);
		List l = this.jdbcDao.query(sql, params.toArray(), null);
		Map<String,String> m = new HashMap<String,String>();
		if(MyListUtils.isNotEmpty(l)){
			for(Object objs : l){
				Map obj = (Map)objs;
				if(obj!=null){
					if(obj.get("authCode") != null){
						m.put(obj.get("authCode").toString(),StaticVar.Y);
					}
				}
			}
		}
		return m;
	}
	
	public List<MenuBean> queryMenuOfUser(String userId,String parentCode,Integer level,String onlyLeaf){
		String sql = " select userId,menuName,menuNameEN,menuUrl,menuIco,openType,treeCode from view_user_menu where userId = ? " ;
		List params = new ArrayList();
		params.add(userId);
		
		String levelCode = MyStringUtils.isNotEmpty(parentCode) ? parentCode : "root";
		sql += " and treeCode like ? ";
		params.add(levelCode + ".%");
		
		if(null != level){
			for(int i = 0 , j = level ; i < j ; i++){
				levelCode += ".%";
			}
			
			sql += " and treeCode not like ? ";
			params.add(levelCode+".%");
		}
		
		if(MyStringUtils.isNotEmpty(onlyLeaf)){
			if("1".equals(onlyLeaf)){
				sql += " and isLeaf = '1' ";
			}
		}
		sql += " order by menuOrder asc ";
		List l = this.jdbcDao.query(sql, params.toArray(), null);
		List<MenuBean> r = new ArrayList<MenuBean>();
		if(MyListUtils.isNotEmpty(l)){
			for(Object obj : l){
				Map m = (Map)obj;
				MenuBean mb = new MenuBean();
				mb.setIco(m.get("menuIco") == null ? "" : m.get("menuIco").toString());
				mb.setName(m.get("menuName") == null ? "" : m.get("menuName").toString());
				mb.setNameEn(m.get("menuNameEn") == null ? "" : m.get("menuNameEn").toString());
				mb.setOpenType(m.get("openType") == null ? "" : m.get("openType").toString());
				mb.setTreeCode(m.get("treeCode") == null ? "" : m.get("treeCode").toString());
				mb.setUrl(m.get("menuUrl") == null ? "" : m.get("menuUrl").toString());
				r.add(mb);
			}
		}
		return r;
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMeetingService#querySeMeeting(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeMeeting(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.METTING_CODE as METTING_CODE, " + //0  会议CODE 
			" t.METTING_TYPE as METTING_TYPE, " + //0  会议CODE 
			" t.METTING_NAME as METTING_NAME, " + //0 会议名称 			
			" t.METTING_INTRO as METTING_INTRO, " + //1 会议介绍 			
			" t.METTING_TIME as METTING_TIME, " + //2 会议时间 			
			" t.METTING_ADDR as METTING_ADDR, " + //3 会议地点 			
			" t.METTING_EMCEE as METTING_EMCEE, " + //4 主持人 			
			" t.METTING_PARTICIPANT as METTING_PARTICIPANT, " + //5 参会人员 			
			" t.PROJECT_ID as PROJECT_ID, " + //6 所属项目 			
			" t.METTING_PROCESS as METTING_PROCESS, " + //7 会议议程 			
			" t.METTING_SUMMARY as METTING_SUMMARY, " + //8 会议纪要 			
			" t.IS_DELETE as IS_DELETE " + //9 是否删除 			
			
			" from SE_MEETING t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("METTING_CODE"))){
				sql += " and t.METTING_CODE like ? ";
				param.add("%" + m.get("METTING_CODE").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("METTING_NAME"))){
					sql += " and (upper(t.METTING_NAME) like upper(?) ";
					sql += " or upper(t.METTING_INTRO) like upper(?) ";
					sql += " or upper(t.METTING_ADDR) like upper(?) ";
					sql += " or upper(t.METTING_EMCEE) like upper(?) ";
					sql += " or upper(t.METTING_PARTICIPANT) like upper(?) ";
					sql += " or upper(t.METTING_PROCESS) like upper(?) ";
					sql += " or upper(t.METTING_SUMMARY) like upper(?) )";
					param.add("%" + m.get("METTING_NAME").toString().trim() + "%");
					param.add("%" + m.get("METTING_NAME").toString().trim() + "%");
					param.add("%" + m.get("METTING_NAME").toString().trim() + "%");
					param.add("%" + m.get("METTING_NAME").toString().trim() + "%");
					param.add("%" + m.get("METTING_NAME").toString().trim() + "%");
					param.add("%" + m.get("METTING_NAME").toString().trim() + "%");
					param.add("%" + m.get("METTING_NAME").toString().trim() + "%");
				}
				
				if(StringUtil.isNotEmpty(m.get("METTING_TYPE"))){
					sql += " and upper(t.METTING_TYPE) like upper(?) ";
					param.add("%" + m.get("METTING_TYPE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("METTING_INTRO"))){
					sql += " and upper(t.METTING_INTRO) like upper(?) ";
					param.add("%" + m.get("METTING_INTRO").toString().trim() + "%");
				}
				
				if(StringUtil.isNotEmpty(m.get("METTING_TIME"))){
					sql += " and t.METTING_TIME = ? ";
					param.add(m.get("METTING_TIME").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("METTING_ADDR"))){
					sql += " and upper(t.METTING_ADDR) like upper(?) ";
					param.add("%" + m.get("METTING_ADDR").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("METTING_EMCEE"))){
					sql += " and upper(t.METTING_EMCEE) like upper(?) ";
					param.add("%" + m.get("METTING_EMCEE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("METTING_PARTICIPANT"))){
					sql += " and upper(t.METTING_PARTICIPANT) like upper(?) ";
					param.add("%" + m.get("METTING_PARTICIPANT").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("PROJECT_ID"))){
					sql += " and upper(t.PROJECT_ID) like upper(?) ";
					param.add("%" + m.get("PROJECT_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("METTING_PROCESS"))){
					sql += " and upper(t.METTING_PROCESS) like upper(?) ";
					param.add("%" + m.get("METTING_PROCESS").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("METTING_SUMMARY"))){
					sql += " and upper(t.METTING_SUMMARY) like upper(?) ";
					param.add("%" + m.get("METTING_SUMMARY").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_DELETE"))){
					sql += " and upper(t.IS_DELETE) like upper(?) ";
					param.add("%" + m.get("IS_DELETE").toString().trim() + "%");
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}else{
			sql += " order by t.METTING_TIME desc";
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	
	
	public DataTableBean querySeMeetingForBootstrap(DataTableBean dtb){
		Page p = new Page();
		p.setCurrentPage(dtb.getCurrentPage());
		p.setPageSize(dtb.getPageSize());
		List r = this.querySeMeeting(dtb.getConditions(),p);
		if(MyListUtils.isEmpty(r)){
			r = new ArrayList();
		}
		dtb.setData(r);
		dtb.setRecordsTotal(p.getListSize());
		dtb.setRecordsFiltered(p.getListSize());
		return dtb;

	};
	
	public DataTableBean querySeRiskForBootstrap(DataTableBean dtb){
		Page p = new Page();
		p.setCurrentPage(dtb.getCurrentPage());
		p.setPageSize(dtb.getPageSize());
		List r = this.querySeRisk(dtb.getConditions(),p);
		if(MyListUtils.isEmpty(r)){
			r = new ArrayList();
		}
		dtb.setData(r);
		dtb.setRecordsTotal(p.getListSize());
		dtb.setRecordsFiltered(p.getListSize());
		return dtb;
	};
	
	public DataTableBean querySePubModuleForBootstrap(DataTableBean dtb){
		Page p = new Page();
		p.setCurrentPage(dtb.getCurrentPage());
		p.setPageSize(dtb.getPageSize());
		List r = this.querySePubModule(dtb.getConditions(),p);
		if(MyListUtils.isEmpty(r)){
			r = new ArrayList();
		}
		dtb.setData(r);
		dtb.setRecordsTotal(p.getListSize());
		dtb.setRecordsFiltered(p.getListSize());
		return dtb;
	};
	
	
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMeetingService#saveSeMeeting(cn.thd.pojo.se.SeMeeting)
	 */
	public void saveSeMeeting(SeMeeting obj) {
		String code = this.sysService.createNo("MEET");
		obj.setMettingCode(code);
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMeetingService#updateSeMeeting(cn.thd.pojo.se.SeMeeting)
	 */
	public void updateSeMeeting(SeMeeting obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMeetingService#querySeMeetingById(java.lang.String)
	 */
	public SeMeeting querySeMeetingById(java.lang.String pk){
		return (SeMeeting)this.pubDao.findById(SeMeeting.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMeetingService#deleteSeMeetingById(java.lang.String)
	 */
	public void deleteSeMeetingById(java.lang.String pk){
		SeMeeting obj = this.querySeMeetingById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除会议对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeMeetingByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeMeetingById(id);
						
						
					}
				}
			}
		}
	};
	
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMeetingRecordService#querySeMeetingRecord(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeMeetingRecord(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.ITEM_ID as ITEM_ID, " + //0  条目ID 
			" t.MEETING_CODE as MEETING_CODE, " + //0 会议CODE 			
			" t.ITEM_ISSUER as ITEM_ISSUER, " + //1 提出人 			
			" t.ITEM_CLASSIFY as ITEM_CLASSIFY, " + //2 分类 			
			" t.ITEM_DESC as ITEM_DESC, " + //3 描述 			
			" t.ITEM_PERFORMER as ITEM_PERFORMER, " + //4 执行人 			
			" t.ITEM_STATUS as ITEM_STATUS, " + //5 状态 			
			" t.IS_DELETE as IS_DELETE " + //6 是否删除 			
			
			" from SE_MEETING_RECORD t  where t.IS_DELETE = ?";
		param.add(StaticVar.ISDELETE_UNDELETE);
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("ITEM_ID"))){
				sql += " and t.ITEM_ID like ? ";
				param.add("%" + m.get("ITEM_ID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("MEETING_CODE"))){
					sql += " and upper(t.MEETING_CODE) like upper(?) ";
					param.add("%" + m.get("MEETING_CODE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("ITEM_ISSUER"))){
					sql += " and upper(t.ITEM_ISSUER) like upper(?) ";
					param.add("%" + m.get("ITEM_ISSUER").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("ITEM_CLASSIFY"))){
					sql += " and upper(t.ITEM_CLASSIFY) like upper(?) ";
					param.add("%" + m.get("ITEM_CLASSIFY").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("ITEM_DESC"))){
					sql += " and upper(t.ITEM_DESC) like upper(?) ";
					param.add("%" + m.get("ITEM_DESC").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("ITEM_PERFORMER"))){
					sql += " and upper(t.ITEM_PERFORMER) like upper(?) ";
					param.add("%" + m.get("ITEM_PERFORMER").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("ITEM_STATUS"))){
					sql += " and upper(t.ITEM_STATUS) like upper(?) ";
					param.add("%" + m.get("ITEM_STATUS").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_DELETE"))){
					sql += " and upper(t.IS_DELETE) like upper(?) ";
					param.add("%" + m.get("IS_DELETE").toString().trim() + "%");
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.jdbcDao.query(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMeetingRecordService#saveSeMeetingRecord(cn.thd.pojo.se.SeMeetingRecord)
	 */
	public void saveSeMeetingRecord(SeMeetingRecord obj) {
		obj.setIsDelete(StaticVar.ISDELETE_UNDELETE);
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMeetingRecordService#updateSeMeetingRecord(cn.thd.pojo.se.SeMeetingRecord)
	 */
	public void updateSeMeetingRecord(SeMeetingRecord obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMeetingRecordService#querySeMeetingRecordById(java.lang.String)
	 */
	public SeMeetingRecord querySeMeetingRecordById(java.lang.String pk){
		return (SeMeetingRecord)this.pubDao.findById(SeMeetingRecord.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeMeetingRecordService#deleteSeMeetingRecordById(java.lang.String)
	 */
	public void deleteSeMeetingRecordById(java.lang.String pk){
		SeMeetingRecord obj = this.querySeMeetingRecordById(pk);
		obj.setIsDelete(StaticVar.ISDELETE_DELETED);
		this.pubDao.update(obj);
	};
	
	
	/**
	 * 批量删除会议记录对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeMeetingRecordByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeMeetingRecordById(id);
						
						
					}
				}
			}
		}
	};
	
	
	public DataTableBean querySeMeetingRecordForMetting(String meetingCode,String classify){
		Map m = new HashMap();
		m.put("MEETING_CODE", meetingCode);
		m.put("ITEM_CLASSIFY", classify);
		List r = this.querySeMeetingRecord(m, null);
		DataTableBean db = new DataTableBean();
		db.setData(r);
		return db;
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProjectDocService#querySeProjectDoc(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeProjectDoc(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.DOC_ID as DOC_ID, " + //0  文档ID 
			" t.PROJECT_ID as PROJECT_ID, " + //0 项目ID 			
			" t.DOC_NAME as DOC_NAME, " + //1 文档名称 			
			" t.DOC_CODE as DOC_CODE, " + //2 标准文档CODE 			
			" t.ATTACH_ID as ATTACH_ID, " + //3 文档ID			
			" t.DOC_VERSOIN as DOC_VERSOIN, " + //4 版本 			
			" t.DOC_DESC as DOC_DESC, " + //5 文档说明 			
			" t.UPLOADER as UPLOADER, " + //6 上传人 			
			" t.UPLOAD_TIME as UPLOAD_TIME, " + //7 上传时间 			
			" t.IS_DELETE as IS_DELETE " + //8 是否删除 			
			
			" from SE_PROJECT_DOC t  where t.is_delete = ? ";
		param.add(StaticVar.ISDELETE_UNDELETE);
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("DOC_ID"))){
				sql += " and t.DOC_ID like ? ";
				param.add("%" + m.get("DOC_ID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("PROJECT_ID"))){
					sql += " and upper(t.PROJECT_ID) like upper(?) ";
					param.add("%" + m.get("PROJECT_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("DOC_NAME"))){
					sql += " and upper(t.DOC_NAME) like upper(?) ";
					param.add("%" + m.get("DOC_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("DOC_CODE"))){
					sql += " and upper(t.DOC_CODE) like upper(?) ";
					param.add("%" + m.get("DOC_CODE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("ATTACH_PATH"))){
					sql += " and upper(t.ATTACH_PATH) like upper(?) ";
					param.add("%" + m.get("ATTACH_PATH").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("DOC_VERSOIN"))){
					sql += " and upper(t.DOC_VERSOIN) like upper(?) ";
					param.add("%" + m.get("DOC_VERSOIN").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("DOC_DESC"))){
					sql += " and upper(t.DOC_DESC) like upper(?) ";
					param.add("%" + m.get("DOC_DESC").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("UPLOADER"))){
					sql += " and upper(t.UPLOADER) like upper(?) ";
					param.add("%" + m.get("UPLOADER").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("UPLOAD_TIME"))){
					sql += " and t.UPLOAD_TIME = ? ";
					param.add(m.get("UPLOAD_TIME").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("IS_DELETE"))){
					sql += " and upper(t.IS_DELETE) like upper(?) ";
					param.add("%" + m.get("IS_DELETE").toString().trim() + "%");
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProjectDocService#saveSeProjectDoc(cn.thd.pojo.se.SeProjectDoc)
	 */
	public void saveSeProjectDoc(SeProjectDoc obj) {
		obj.setUploadTime(new Date());
		obj.setIsDelete(StaticVar.ISDELETE_UNDELETE);
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProjectDocService#updateSeProjectDoc(cn.thd.pojo.se.SeProjectDoc)
	 */
	public void updateSeProjectDoc(SeProjectDoc obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProjectDocService#querySeProjectDocById(java.lang.String)
	 */
	public SeProjectDoc querySeProjectDocById(java.lang.String pk){
		return (SeProjectDoc)this.pubDao.findById(SeProjectDoc.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProjectDocService#deleteSeProjectDocById(java.lang.String)
	 */
	public void deleteSeProjectDocById(java.lang.String pk){
		SeProjectDoc obj = this.querySeProjectDocById(pk);
		this.pubDao.delete(obj);
	};
	
	
	public void deleteSeProjectDocByAttachId(java.lang.String attachId){
		String sql = " update se_project_doc set is_delete = ? where attach_id = ? ";
		List params = new ArrayList();
		params.add(StaticVar.ISDELETE_DELETED);
		params.add(attachId);
		this.pubDao.executeSql(sql, params.toArray());
	};
	
	
	/**
	 * 批量删除项目文档对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeProjectDocByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeProjectDocById(id);
						
						
					}
				}
			}
		}
	};
	
	

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeDayPlanService#querySeDayPlan(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeDayPlan(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.DAY_PLAN_ID as DAY_PLAN_ID, " + //0  主键 
			" t.PLAN_CONTENT as PLAN_CONTENT, " + //0 日计划内容 			
			" t.USER_ID as USER_ID, " + //1 所属人员 			
			" t.PLAN_DATE as PLAN_DATE, " + //2 所属日期 			
			" t.PLAN_REMARK as PLAN_REMARK, " + //3 备注 			
			" t.STATUS as STATUS, " + //4 状态 			
			" t.IS_DELETE as IS_DELETE, " + //5 是否删除 	
			" '0' as EDITSTATUS " + //6 用于VUE表格编辑
			
			" from SE_DAY_PLAN t  where t.IS_DELETE = ?  ";
		param.add(StaticVar.ISDELETE_UNDELETE);
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("DAY_PLAN_ID"))){
				sql += " and t.DAY_PLAN_ID like ? ";
				param.add("%" + m.get("DAY_PLAN_ID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("PLAN_CONTENT"))){
					sql += " and upper(t.PLAN_CONTENT) like upper(?) ";
					param.add("%" + m.get("PLAN_CONTENT").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("USER_ID"))){
					sql += " and upper(t.USER_ID) like upper(?) ";
					param.add("%" + m.get("USER_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("PLAN_DATE"))){
					sql += " and t.PLAN_DATE = ? ";
					param.add(m.get("PLAN_DATE").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("PLAN_REMARK"))){
					sql += " and upper(t.PLAN_REMARK) like upper(?) ";
					param.add("%" + m.get("PLAN_REMARK").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("STATUS"))){
					sql += " and upper(t.STATUS) like upper(?) ";
					param.add("%" + m.get("STATUS").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_DELETE"))){
					sql += " and upper(t.IS_DELETE) like upper(?) ";
					param.add("%" + m.get("IS_DELETE").toString().trim() + "%");
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}else{
			sql += " order by t.STATUS DESC,t.PLAN_DATE ";
		}
		
		
		System.out.println(sql);
		List l=  this.jdbcDao.query(sql,param.toArray(), p);
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeDayPlanService#saveSeDayPlan(cn.thd.pojo.se.SeDayPlan)
	 */
	public void saveSeDayPlan(SeDayPlan obj) {
		obj.setIsDelete(StaticVar.ISDELETE_UNDELETE);
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeDayPlanService#updateSeDayPlan(cn.thd.pojo.se.SeDayPlan)
	 */
	public void updateSeDayPlan(SeDayPlan obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeDayPlanService#querySeDayPlanById(java.lang.String)
	 */
	public SeDayPlan querySeDayPlanById(java.lang.String pk){
		return (SeDayPlan)this.pubDao.findById(SeDayPlan.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeDayPlanService#deleteSeDayPlanById(java.lang.String)
	 */
	public void deleteSeDayPlanById(java.lang.String pk){
		SeDayPlan obj = this.querySeDayPlanById(pk);
		obj.setIsDelete(StaticVar.ISDELETE_DELETED);
		this.pubDao.update(obj);
	};
	
	
	/**
	 * 批量删除个人天计划对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeDayPlanByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
						deleteSeDayPlanById(id);
					}
				}
			}
		}
	};
	
	/**
	 * 查询天计划-portal
	 * @param dtb 
	 */
	public DataTableBean queryDayPlanForIndexPlugin(DataTableBean dtb){
		
		Page p = new Page();
		p.setCurrentPage(dtb.getCurrentPage());
		p.setPageSize(dtb.getPageSize());
		List r = this.querySeDayPlan(dtb.getConditions(), p);
		if(MyListUtils.isEmpty(r)){
			r = new ArrayList();
		}
		dtb.setData(r);
		dtb.setRecordsTotal(p.getListSize());
		dtb.setRecordsFiltered(p.getListSize());
		return dtb;
	};
	
	public String saveSimpleSeDayPlan(String dayPlanId,String planContent,String userId){
		SeDayPlan sdp ;
		
		if(MyStringUtils.isNotEmpty(dayPlanId)){
			sdp = this.querySeDayPlanById(dayPlanId);
			sdp.setPlanContent(planContent);
			this.updateSeDayPlan(sdp);
		}else{
			sdp = new SeDayPlan();
			sdp.setPlanDate(new Date());
			sdp.setUserId(userId);
			sdp.setStatus(StaticVar.STATUS_UNFINISH);
			sdp.setPlanContent(planContent);
			this.saveSeDayPlan(sdp);
		}
		
		
		
		return sdp.getDayPlanId();
	};
}
