package cn.thd.service.common.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.activiti.bpmn.model.BpmnModel;
import org.activiti.bpmn.model.FlowElement;
import org.activiti.engine.RepositoryService;
import org.springframework.stereotype.Service;

import cn.thd.bean.Option;
import cn.thd.bean.StaticVar;
import cn.thd.pojo.common.SeAttach;
import cn.thd.pojo.common.SeMapFun;
import cn.thd.pojo.common.SysDay;
import cn.thd.pojo.common.SysDicFunction;
import cn.thd.pojo.common.SysDicProcess;
import cn.thd.pojo.common.SysDicProcessStep;
import cn.thd.pojo.common.SysDicPub;
import cn.thd.pojo.common.SysDicStandardDoc;
import cn.thd.pojo.common.SysTimerList;
import cn.thd.pojo.se.SeMapUser;
import cn.thd.pojo.se.SeUser;
import cn.thd.service.common.CommonService;
import cn.thd.staticbean.FixDicCollection;
import cn.thd.staticbean.FixedDicCollectionBean;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.thd.core.dao.JdbcDao;
import com.thd.core.dao.PubDao;
import com.thd.core.service.PubServiceImpl;
import com.thd.util.ListUtil;
import com.thd.util.MyDateUtils;
import com.thd.util.MyFileUtils;
import com.thd.util.MyListUtils;
import com.thd.util.MyStringUtils;
import com.thd.util.MyTimerUtils;
import com.thd.util.Page;
import com.thd.util.StringUtil;
/**
 * file autogenerated by ThirdteenDevils's CodeGenUtil 
 */
@Service("commonService")
public class CommonServiceImpl extends PubServiceImpl implements CommonService {
	@Resource 
	private PubDao pubDao;
	@Resource
	private JdbcDao jdbcDao;
	@Resource
	public RepositoryService repositoryService;
	
	public List queryMapUser(String tab,String kId){
		String sql = "select " +
				 " u.user_id as USER_ID, "  +
				 " u.user_name as USER_NAME, " +
				 " u.user_account as USER_ACCOUNT,"  +
				 " u.user_mail as USER_MAIL " +
				 " from se_map_user r left join se_user u on u.user_id = r.user_id where 1=1 and r.rela_tab = ? and r.tab_key_value = ?";
		List params = new ArrayList();
		params.add(tab);
		params.add(kId);
		return this.jdbcDao.query(sql,params.toArray(), null);
		
	};
	
	
	public String saveMapUser(String tab,String kId,String userIds){
		try{
			String sql = "delete from se_map_user where rela_tab = ? and tab_key_value = ? ";
			List params = new ArrayList();
			params.add(tab);
			params.add(kId);
			this.pubDao.executeSql(sql, params.toArray());
			if(StringUtil.isNotEmpty(userIds)){
				String[] ids = userIds.split(",");
				if(ids.length > 0){
					for(String id : ids){
						if(StringUtil.isNotEmpty(id)){
							SeMapUser mu = new SeMapUser();
							mu.setRelaTab(tab);
							mu.setTabKeyValue(kId);
							mu.setUserId(id);
							this.pubDao.save(mu);
						}
					}
				}
			}
			this.pubDao.flush();
			return StaticVar.STATUS_SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			throw new RuntimeException("CommonServiceImpl.saveMapUser failure !");
		}
		
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicPubService#querySysDicPub(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySysDicPub(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.DIC_ID as DIC_ID, " + //0   
			" t.DIC_CLASSIFY as DIC_CLASSIFY, " + //0  			
			" t.DIC_NAME as DIC_NAME, " + //1  			
			" t.DIC_DESC as DIC_DESC " + //2  			
			
			" from SYS_DIC_PUB t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("DIC_ID"))){
				sql += " and t.DIC_ID like ? ";
				param.add("%" + m.get("DIC_ID").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("DIC_CLASSIFY"))){
				sql += " and upper(t.DIC_CLASSIFY) like upper(?) ";
				param.add("%" + m.get("DIC_CLASSIFY").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("DIC_NAME"))){
				sql += " and upper(t.DIC_NAME) like upper(?) ";
				param.add("%" + m.get("DIC_NAME").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("DIC_DESC"))){
				sql += " and upper(t.DIC_DESC) like upper(?) ";
				param.add("%" + m.get("DIC_DESC").toString().trim() + "%");
			}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	
	public List querySysDicClassify(){
		String sql = "select distinct dic_classify from sys_dic_pub ";
		List l = this.jdbcDao.query(sql,null,null);
		return l;
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicPubService#saveSysDicPub(cn.thd.pojo.se.SysDicPub)
	 */
	public void saveSysDicPub(SysDicPub obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicPubService#updateSysDicPub(cn.thd.pojo.se.SysDicPub)
	 */
	public void updateSysDicPub(SysDicPub obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicPubService#querySysDicPubById(java.lang.String)
	 */
	public SysDicPub querySysDicPubById(java.lang.String pk){
		return (SysDicPub)this.pubDao.findById(SysDicPub.class,pk);
	};
	
	
	public void initFixedDic(){
		List classifyList = this.querySysDicClassify();
		
		if(MyListUtils.isNotEmpty(classifyList)){
			for(Object obj : classifyList){
				Map m = (Map)obj;
				String classify = m.get("dic_classify").toString();
				System.out.println( " load dic [" +classify+ "] ......" );
				
				List<Option> dicList = this.queryDicForOption(classify);
				FixedDicCollectionBean fdcb = new FixedDicCollectionBean();
				FixDicCollection.DIC_CONTAINER.put(classify,fdcb);
				if(MyListUtils.isNotEmpty(dicList)){
					fdcb.setDicList(dicList);
					Map<String,String> aDic = new HashMap<String,String>();
					fdcb.setDicMap(aDic);
					for(Option opt : dicList){
						aDic.put(opt.getValue(), opt.getText());
					}
				}
			}
			System.out.println(FixDicCollection.DIC_CONTAINER);
			GsonBuilder builder = new GsonBuilder();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			String listStr = gson.toJson(FixDicCollection.DIC_CONTAINER);;
			System.out.println(listStr);
		}
	};
	
	
	public List<Option> getFixedDicList(String dicClassify){
		return FixDicCollection.DIC_CONTAINER.get("post").getDicList();
	};
	/**
	 * 获取固定字典
	 * Method Description : ########
	 * @param dicClassify 字典分类
	 * @return
	 */
	public Map<String,String> getFixedDicMap(String dicClassify){
		return FixDicCollection.DIC_CONTAINER.get("post").getDicMap();
	};
	
	
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicPubService#deleteSysDicPubById(java.lang.String)
	 */
	public void deleteSysDicPubById(java.lang.String pk){
		SysDicPub obj = this.querySysDicPubById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除系统公共字典对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSysDicPubByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSysDicPubById(id);
					}
				}
			}
		}
	};
	
	public String queryDicForJson(String dicType){
		String sql =" select dic_id,dic_name,dic_desc from sys_dic_pub where dic_classify = '" + dicType + "' ";
		List l = this.getPubDaoImpl().findBySqlToMap(sql);
		Map m = new HashMap();
		m.put("dic_id", "");
		m.put("dic_name", "请选择");
		m.put("dic_desc", "请选择");
		l.add(m);
		
		StringBuffer json = new StringBuffer();
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
		String listStr = gson.toJson(l);
		if(l==null || l.size() < 1){
			listStr = "[]";
		}
		json.append(listStr);
		return json.toString();
	};
	
	
	
	public List<Option> queryDicForOption(String dicType){
		String sql =" select dic_id,dic_name,dic_desc from sys_dic_pub where dic_classify = '" + dicType + "' ";
		List l = this.getPubDaoImpl().findBySqlToMap(sql);
		//System.out.println(l);
		List<Option> optList = new ArrayList<Option>();
		if(ListUtil.isNotEmpty(l)){
			for(Object obj : l){
				Option opt = new Option();
				Map<String,String> m = (Map<String,String>)obj;
				opt.setValue(m.get("dic_id"));
				opt.setText(m.get("dic_name"));
				optList.add(opt);
			}
		}
		return optList;
	};
	
	
	public List<Option> querySpecialDicForOption(String tabName,String keyColumn,String valueColumn,String isDeleteColumn){
		String sql =" select " + keyColumn + " as dic_name," + valueColumn + " as dic_id from " + tabName + " where 1=1 ";
		
		if(MyStringUtils.isNotEmpty(isDeleteColumn)){
			sql += " and " +  isDeleteColumn + " =" + StaticVar.ISDELETE_UNDELETE;
		}
		List l = this.getPubDaoImpl().findBySqlToMap(sql);
		//System.out.println(l);
		List<Option> optList = new ArrayList<Option>();
		if(ListUtil.isNotEmpty(l)){
			for(Object obj : l){
				Option opt = new Option();
				Map<String,String> m = (Map<String,String>)obj;
				opt.setValue(m.get("dic_id"));
				opt.setText(m.get("dic_name"));
				optList.add(opt);
			}
		}
		return optList;
	};
	
	/**
	 * 查询人员列表
	 * @return List<Param>
	 */
	public List<Option> queryUserForOption(){
		String sql =" select user_name,user_mail  from se_user";
		List l = this.getPubDaoImpl().findBySqlToMap(sql);
		//System.out.println(l);
		List<Option> optList = new ArrayList<Option>();
		if(ListUtil.isNotEmpty(l)){
			for(Object obj : l){
				Option opt = new Option();
				Map<String,String> m = (Map<String,String>)obj;
				opt.setValue(m.get("user_name"));
				opt.setText(m.get("user_name"));
				optList.add(opt);
			}
		}
		return optList;
	};
	
	
	/**
	 * 查询人员列表
	 * @return List<Param>
	 */
	public List<Option> queryUserForOptionKV(){
		String sql =" select user_name,user_id  from se_user";
		List l = this.getPubDaoImpl().findBySqlToMap(sql);
		//System.out.println(l);
		List<Option> optList = new ArrayList<Option>();
		if(ListUtil.isNotEmpty(l)){
			for(Object obj : l){
				Option opt = new Option();
				Map<String,String> m = (Map<String,String>)obj;
				opt.setValue(m.get("user_id"));
				opt.setText(m.get("user_name"));
				optList.add(opt);
			}
		}
		return optList;
	};
	
	public List<Option> queryUserForOptionKV(String projectId){
		//如果没有projectid则查询所有人员
		if(MyStringUtils.isEmpty(projectId)){
			return queryUserForOptionKV();
		}
		
		//如果有projectid则查询该项目人员
		String sql = 
				" select "+
				" u.user_id, "+
				" u.user_name, "+
				" pro.project_id, "+
				" pro.pro_name "+
				" from  "+
				" se_map_project_user m "+
				" left join se_user u on m.user_id = u.user_id "+
				" left join se_project_info pro on m.project_id = pro.project_id "+ 
				" where m.on_position = ? and pro.project_id = ? ";
		List param = new ArrayList();
		param.add(StaticVar.ISPOS_ONPOSITION);
		param.add(projectId);
		
		
		//List l = this.getPubDaoImpl().findBySqlToMap(sql);
		List l = this.jdbcDao.query(sql, param.toArray(), null);
		//System.out.println(l);
		List<Option> optList = new ArrayList<Option>();
		if(ListUtil.isNotEmpty(l)){
			for(Object obj : l){
				Option opt = new Option();
				Map<String,String> m = (Map<String,String>)obj;
				opt.setValue(m.get("user_id"));
				opt.setText(m.get("user_name"));
				optList.add(opt);
			}
		}
		return optList;
	};
	
	public List<Option> queryUserForOption(String SysId){
		String sql =" select user_name,user_id  from se_user";
		List l = this.getPubDaoImpl().findBySqlToMap(sql);
		//System.out.println(l);
		List<Option> optList = new ArrayList<Option>();
		if(ListUtil.isNotEmpty(l)){
			for(Object obj : l){
				Option opt = new Option();
				Map<String,String> m = (Map<String,String>)obj;
				opt.setValue(m.get("user_id"));
				opt.setText(m.get("user_name"));
				optList.add(opt);
			}
		}
		return optList;
	};
	
	public List queryXxjtHzsgData(String soliderType,String target){
		
		Map<String,String> map = new HashMap<String,String>();
		map.put("y_xss", "仙术士");
		map.put("y_yg", "医官");
		map.put("y_yy", "御医");
		map.put("y_fss", "方术士");
		map.put("s_xnyq", "匈奴游骑");
		map.put("s_gqb", "弓骑兵");
		map.put("s_lsg", "猎射官");
		map.put("s_bmyc", "白马义从");
		map.put("g_xdss", "先登死士");
		map.put("g_gb", "弓兵");
		map.put("g_wdfj", "无当飞军");
		map.put("g_lns", "连弩士");
		map.put("b_bb", "步兵");
		map.put("b_hwj", "虎卫军");
		map.put("b_chxs", "车下虎士");
		map.put("b_xzy", "陷阵营");
		map.put("d_ddb", "大盾兵");
		map.put("d_bmj", "白眊军");
		map.put("d_db", "盾兵");
		map.put("d_tjb", "藤甲兵");
		map.put("m_djs", "大戟士");
		map.put("m_mb", "矛兵");
		map.put("m_tcb", "突陈兵");
		map.put("m_jrmb", "精锐矛兵");
		map.put("c_js", "军师");
		map.put("c_yss", "妖术师");
		map.put("c_ms", "谋士");
		map.put("c_mlj", "谋略家");
		map.put("q_jrqb", "精锐骑兵");
		map.put("q_hbq", "虎豹骑");
		map.put("q_xltq", "西凉铁骑");
		map.put("q_qb", "骑兵");
		
		String solider = map.get(soliderType);
		if(StringUtil.isEmpty(solider)){
			throw new RuntimeException(" solider type err !");
		}
		
		if("gj".equals(target)){
			String sql_gj = 
					"select "+
					" rand() AS xh, "+
					"gj.bzmc AS gjbz, "+
					"hj.bzmc AS fsbz, "+
					" hj.bzfl AS bzfl,"+
					" hj.bzdj AS bzdj,"+
					"bzkz.zy AS jc "+
					"from xxjt_bzkz bzkz "+
					"left join xxjt_bz gj on bzkz.gj = gj.gj "+
					"left join xxjt_bz hj on bzkz.hj = hj.hj "+
					" where 1=1 ";
			sql_gj += " and gj.bzmc = '" + solider + "'";
			sql_gj += "order by bzkz.zy asc,hj.bzfl,hj.bzdj" ;
			return this.pubDao.findBySqlToMap(sql_gj);
		}else{
			String sql_fs=
					" select "+
					" rand() AS xh, "+
					" gj.bzmc AS gjbz, "+
					" hj.bzmc AS fsbz, "+
					" gj.bzfl AS bzfl,"+
					" gj.bzdj AS bzdj,"+
					" bzkz.zy AS jc "+
					" from xxjt_bzkz bzkz "+
					" left join xxjt_bz gj on bzkz.gj = gj.gj "+
					" left join xxjt_bz hj on bzkz.hj = hj.hj "+
					" where 1=1 ";
			sql_fs += " and hj.bzmc = '" + solider + "'";
			sql_fs += " order by bzkz.zy desc,gj.bzfl,gj.bzdj desc" ;
			return this.pubDao.findBySqlToMap(sql_fs);
		}
	};
	
	public String updatePwd(String userId,String pwd){
		/*String sql = "select user_id,user_password from se_user u where u.user_account = ? ";
		List params = new ArrayList();
		params.add(account);
		List l = this.jdbcDao.query(sql, params.toArray(), null);
		
		if(MyListUtils.isEmpty(l)){
			return "未找到用户名为[" + account + "]的用户";
		}
		
		if(l.size() > 1){
			return "存在用户名为[" + account + "]的多个用户";
		}
		Map obj = (Map)l.get(0);
		String userId = obj.get("user_id").toString();*/
		SeUser u = (SeUser)this.findById(SeUser.class, userId);
		u.setUserPassword(pwd);
		this.pubDao.update(u);
		return StaticVar.STATUS_SUCCESS;
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysTimerListService#querySysTimerList(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySysTimerList(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.TIMER_ID as TIMER_ID, " + //0  主键 
			" t.TIMER_CODE as TIMER_CODE, " + //0 标识 			
			" t.TIMER_GROUP as TIMER_GROUP, " + //1 所属组 			
			" t.TIMER_NAME as TIMER_NAME, " + //2 名称 			
			" t.TIMER_DESC as TIMER_DESC, " + //3 描述 			
			" t.TIMER_CLASS_NAME as TIMER_CLASS_NAME, " + //4 类全名 			
			" t.EXECUTION_PLAN as EXECUTION_PLAN, " + //5 执行计划 
			" t.START_TYPE as START_TYPE, " + //7 启动方式
			" t.IS_DELETE as IS_DELETE, " + //6 是否删除 			
			" t.CREATE_TIME as CREATE_TIME " + //7 创建时间 			
			
			" from SYS_TIMER_LIST t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("TIMER_ID"))){
				sql += " and t.TIMER_ID like ? ";
				param.add("%" + m.get("TIMER_ID").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("TIMER_CODE"))){
				sql += " and upper(t.TIMER_CODE) like upper(?) ";
				param.add("%" + m.get("TIMER_CODE").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("TIMER_GROUP"))){
				sql += " and upper(t.TIMER_GROUP) like upper(?) ";
				param.add("%" + m.get("TIMER_GROUP").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("TIMER_NAME"))){
				sql += " and upper(t.TIMER_NAME) like upper(?) ";
				param.add("%" + m.get("TIMER_NAME").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("TIMER_DESC"))){
				sql += " and upper(t.TIMER_DESC) like upper(?) ";
				param.add("%" + m.get("TIMER_DESC").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("TIMER_CLASS_NAME"))){
				sql += " and upper(t.TIMER_CLASS_NAME) like upper(?) ";
				param.add("%" + m.get("TIMER_CLASS_NAME").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("EXECUTION_PLAN"))){
				sql += " and upper(t.EXECUTION_PLAN) like upper(?) ";
				param.add("%" + m.get("EXECUTION_PLAN").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("IS_DELETE"))){
				sql += " and upper(t.IS_DELETE) like upper(?) ";
				param.add("%" + m.get("IS_DELETE").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("CREATE_TIME"))){
				sql += " and t.CREATE_TIME = ? ";
				param.add(m.get("CREATE_TIME").toString().trim());
			}
			
		}
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		System.out.println(sql);
		List l = this.jdbcDao.query(sql, param.toArray(), p);
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysTimerListService#saveSysTimerList(cn.thd.pojo.common.SysTimerList)
	 */
	public void saveSysTimerList(SysTimerList obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysTimerListService#updateSysTimerList(cn.thd.pojo.common.SysTimerList)
	 */
	public void updateSysTimerList(SysTimerList obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysTimerListService#querySysTimerListById(java.lang.String)
	 */
	public SysTimerList querySysTimerListById(java.lang.String pk){
		return (SysTimerList)this.pubDao.findById(SysTimerList.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysTimerListService#deleteSysTimerListById(java.lang.String)
	 */
	public void deleteSysTimerListById(java.lang.String pk){
		SysTimerList obj = this.querySysTimerListById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除定时器列表对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSysTimerListByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSysTimerListById(id);
						
						
					}
				}
			}
		}
	};
	public String addTimer(String timerId){
		try {
			SysTimerList t = this.querySysTimerListById(timerId);
			if(t == null){
				throw new RuntimeException(" not found timer [" + timerId + "]");
			}
			MyTimerUtils timerUtil = MyTimerUtils.getInstance();
			Class c = Class.forName( t.getTimerClassName());
			timerUtil.addTimer(t.getTimerCode(), t.getTimerGroup(),c,t.getExecutionPlan());
			return StaticVar.STATUS_SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			return e.getMessage();
		}
	};
	public String startTimer(String timerId){
		try {
			MyTimerUtils timerUtil = MyTimerUtils.getInstance();
			SysTimerList t = this.querySysTimerListById(timerId);
			if(t == null){
				throw new RuntimeException(" not found timer [" + timerId + "]");
			}
			String state = timerUtil.getState(t.getTimerCode(), t.getTimerGroup());
			if("NORMAL".equals(state)){
				throw new RuntimeException(" already be running ");
			}
			if("NONE".equals(state)){
				Class c = Class.forName(t.getTimerClassName());
				timerUtil.addTimer(t.getTimerCode(), t.getTimerGroup(), c, t.getExecutionPlan());
			}
			
			timerUtil.startJob(t.getTimerCode(), t.getTimerGroup());
			return StaticVar.STATUS_SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			return e.getMessage();
		}
	};
	
	public String pauseTimer(String timerId){
		try {
			SysTimerList t = this.querySysTimerListById(timerId);
			if(t == null){
				throw new RuntimeException(" not found timer [" + timerId + "]");
			}
			MyTimerUtils timerUtil = MyTimerUtils.getInstance();
			String state = timerUtil.getState(t.getTimerCode(), t.getTimerGroup());
			if("NORMAL".equals(state)){
				timerUtil.pauseJob(t.getTimerCode(), t.getTimerGroup());
			}else{
				throw new RuntimeException(" timer state must be NORMAL ");
			}
			
			return StaticVar.STATUS_SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			return e.getMessage();
		}
	};
	
	public String runATimeTimer(String timerId){
		try {
			SysTimerList t = this.querySysTimerListById(timerId);
			if(t == null){
				throw new RuntimeException(" not found timer [" + timerId + "]");
			}
			MyTimerUtils timerUtil = MyTimerUtils.getInstance();
			String state = timerUtil.getState(t.getTimerCode(), t.getTimerGroup());
			
			if("NONE".equals(state)){
				Class c = Class.forName(t.getTimerClassName());
				timerUtil.addTimer(t.getTimerCode(), t.getTimerGroup(), c, t.getExecutionPlan());
			}
			
			
			timerUtil.runOneTime(t.getTimerCode(), t.getTimerGroup());
			//timerUtil.pauseJob(t.getTimerCode(), t.getTimerGroup());
			return StaticVar.STATUS_SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			return e.getMessage();
		}
	};
	
	public String reloadTimer(String timerId){
		try {
			SysTimerList t = this.querySysTimerListById(timerId);
			if(t == null){
				throw new RuntimeException(" not found timer [" + timerId + "]");
			}
			MyTimerUtils timerUtil = MyTimerUtils.getInstance();
			try{
				timerUtil.deleteJob(t.getTimerCode(), t.getTimerGroup());
			}catch(Exception e){
				Class c = Class.forName(t.getTimerClassName());
				timerUtil.addTimer(t.getTimerCode(), t.getTimerGroup(), c, t.getExecutionPlan());
				timerUtil.pauseJob(t.getTimerCode(), t.getTimerGroup());
			}
			
			return StaticVar.STATUS_SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			return e.getMessage();
		}
	};
	public String deleteYear(String year){
		String sql = "delete from sys_day where year(day) = ? ";
		List<String> params = new ArrayList<String>();
		params.add(year);
		this.pubDao.executeSql(sql, params.toArray());
		return StaticVar.STATUS_SUCCESS;
	};
	public String initYearDay(String year){
		if (StringUtil.isEmpty(year)) {
			throw new RuntimeException(" input year first please !");
		}
		String sql = "select " +
		    " d.id" +
			" from sys_day d" +
		    " where year(d.day) = ?";
		List<String> params = new ArrayList<String>();
		params.add(year);
		List<Map<String, Object>> list = jdbcDao.query(sql, params.toArray(), null);
		if (MyListUtils.isNotEmpty(list)) {
			return " year be already init , please delete this year data first !";
		}
				
		int years = Integer.parseInt(year);
		Calendar calendar = Calendar.getInstance();// 设置年初
		calendar.set(Calendar.YEAR, years);
		calendar.set(Calendar.MONTH, 0);
		calendar.set(Calendar.DAY_OF_MONTH, 1);

		Calendar calendarEnd = Calendar.getInstance();// 设置年末
		calendarEnd.set(Calendar.YEAR, years);
		calendarEnd.set(Calendar.MONTH, 11);
		calendarEnd.set(Calendar.DAY_OF_MONTH, 31);
		while (calendar.getTime().getTime() <= calendarEnd.getTime().getTime()) {
			SysDay sysDay = new SysDay();
			sysDay.setDay(calendar.getTime());
			// 判断周末
			if (calendar.get(Calendar.DAY_OF_WEEK) == 7 || calendar.get(Calendar.DAY_OF_WEEK) == 1) {
				sysDay.setStatus(StaticVar.DAYSTATUS_REST);
			} else {
				sysDay.setStatus(StaticVar.DAYSTATUS_WORK);
			}
			this.saveSysDay(sysDay);
			calendar.add(Calendar.DAY_OF_MONTH, 1);
		}				
		return StaticVar.STATUS_SUCCESS;
	};
	
	
	public List querySysDayYear(Map<String,String> m){
		String sql = "select distinct year(d.day) as y,'' as ystatus from sys_day d order by d.day desc";
		List l = this.jdbcDao.query(sql,null, null);
		
		return l;
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDayService#querySysDay(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySysDay(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.ID as ID, " + //0   
			" t.DAY as DAY, " + //0  			
			" t.STATUS as STATUS " + //1  			
			
			" from SYS_DAY t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("ID"))){
				sql += " and t.ID like ? ";
				param.add("%" + m.get("ID").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("DAY"))){
				sql += " and t.DAY = ? ";
				param.add(m.get("DAY").toString().trim());
			}
			if(StringUtil.isNotEmpty(m.get("STATUS"))){
				sql += " and upper(t.STATUS) like upper(?) ";
				param.add("%" + m.get("STATUS").toString().trim() + "%");
			}
			if(StringUtil.isNotEmpty(m.get("YEAR"))){
				sql += " and YEAR(t.DAY) = ? ";
				param.add(m.get("YEAR").toString().trim());
			}
			if(StringUtil.isNotEmpty(m.get("MONTH"))){
				sql += " and MONTH(t.DAY) = ? ";
				param.add(m.get("MONTH").toString().trim());
			}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDayService#saveSysDay(cn.thd.pojo.se.SysDay)
	 */
	public void saveSysDay(SysDay obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDayService#updateSysDay(cn.thd.pojo.se.SysDay)
	 */
	public void updateSysDay(SysDay obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDayService#querySysDayById(java.lang.String)
	 */
	public SysDay querySysDayById(java.lang.String pk){
		return (SysDay)this.pubDao.findById(SysDay.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDayService#deleteSysDayById(java.lang.String)
	 */
	public void deleteSysDayById(java.lang.String pk){
		SysDay obj = this.querySysDayById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除系统日历对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSysDayByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSysDayById(id);
						
						
					}
				}
			}
		}
	};
	
	
	public String changetypeOfDay(String ids){
		if(MyStringUtils.isNotEmpty(ids)){
			
			String[] idsArray = ids.split(",");
			for(String id : idsArray){
				if(MyStringUtils.isNotEmpty(id)){
					SysDay d = this.querySysDayById(id);
					if(d!=null){
						if(StaticVar.DAYSTATUS_REST.equals(d.getStatus())){
							d.setStatus(StaticVar.DAYSTATUS_WORK);
						}else{
							d.setStatus(StaticVar.DAYSTATUS_REST);
						}
						this.updateSysDay(d);
					}
				}
			}
			
			return StaticVar.STATUS_SUCCESS;
		}else{
			throw new RuntimeException("请指定日志ID");
		}
	};
	
	
	
	public String backup(String className){
		String hql = "from " + className;
		List l = this.pubDao.findByHql(hql);
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		String str = gson.toJson(l);
		System.out.println(str);
		
		
		List r = gson.fromJson(str,List.class);
		
		System.out.println(r);
		
		return str;
	};
	
	public SeAttach uploadFile(File file,String path,String fileName,String fkey,String fid){
		String fix = MyFileUtils.getFix(fileName);
		
		Calendar c = Calendar.getInstance();
		Date d = new Date();
		String localFileName = 
				MyDateUtils.toString(d,"yyyy-MM-dd-hh-mm-ss")+"--"+
				(int)(Math.random() * 10000)+"."+
				fix ;
		SeAttach sa = new SeAttach();
		MyFileUtils.copyFile(file.getAbsolutePath(), path + File.separator + localFileName );
		
		sa.setAttachName(fileName);
		sa.setAttachFix(fix);
		sa.setAttachPath("attached" + File.separator + "commonUpload" + File.separator +  localFileName);
		sa.setAttachSize(file.length());
		sa.setFkey(fkey);
		sa.setFid(fid);
		sa.setIsValid(StaticVar.ISVALID_VALID);
		sa.setCreateTime(new Date());
		
		this.pubDao.save(sa);
		System.out.println("-------------------" + localFileName);
		return sa;
	};
	
	public String deleteAttachByKeyAndId(String key,String id ){
		try {
			String sql = "update se_attach set is_valid = ? where  fkey = ? and fid = ? ";
			List params = new ArrayList();
			params.add(StaticVar.ISVALID_INVALID);
			params.add(key);
			params.add(id);
			this.pubDao.executeSql(sql,params.toArray());
			return StaticVar.STATUS_SUCCESS;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return e.getMessage();
		}
	};
	
	public SeAttach queryAttachByKeyAndId(String key,String id){
		try {
			String sql = "select attach_id from se_attach where fkey = ? and fid = ? and is_valid = ? ";
			List params = new ArrayList();
			params.add(key);
			params.add(id);
			params.add(StaticVar.ISVALID_VALID);
			List r = this.jdbcDao.query(sql, params.toArray(),null);
			if(MyListUtils.isEmpty(r)){
				return null;
			}
			
			Object obj = r.get(0);
			Map m = (Map)obj;
			String attachId = m.get("attach_id").toString();
			SeAttach attach = (SeAttach)this.pubDao.findById(SeAttach.class, attachId);
			return attach;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
		
		
	};
	
	public void downloadFile(String id,HttpServletResponse res,HttpServletRequest req){
		SeAttach attach = (SeAttach)this.findById(SeAttach.class, id);
		if(attach != null){
			 String path = req.getRealPath(attach.getAttachPath());  
			 System.out.println(path);
	        String filename = attach.getAttachName();  
	        
	            
	        InputStream in = null;  
	        OutputStream out = null;  
	          
	         
	        try {  
	        	res.setHeader("content-disposition", "attachment;filename=" + URLEncoder.encode(filename, "UTF-8"));  
	  	      
	            in = new FileInputStream(path);  
	            int len = 0;  
	             byte[] buffer = new byte[1024];  
	             out = res.getOutputStream();  
	            while((len = in.read(buffer)) > 0) {  
	                out.write(buffer,0,len);  
	            }  
	              
	        }catch(Exception e) {  
	            throw new RuntimeException(e);  
	        }finally {  
	            if(in != null) {  
	                try {  
	                    in.close();  
	                }catch(Exception e) {  
	                    throw new RuntimeException(e);  
	                }  
	            }  
	        }  
		}
	};
	
	public List queryCommonFileList(String key,String id){
		String sql = " select "+
				" attach_id as attachId,"+
				" attach_name as attachName,"+ 
				" attach_path as attachPath, "+ 
				" attach_size as attachSize "+ 
				" from se_attach where is_valid = ? ";
		List params = new ArrayList();
		params.add(StaticVar.ISVALID_VALID);
		if(MyStringUtils.isNotEmpty(key)){
			sql += " and fkey = ? ";
			params.add(key);
		}
		if(MyStringUtils.isNotEmpty(id)){
			sql += " and fid = ? ";
			params.add(id);
		}
		
		return this.jdbcDao.query(sql, params.toArray(), null);
	};
	
	public String deleteCommonAttach(String attachId){
		try {
			SeAttach attach = (SeAttach)this.pubDao.findById(SeAttach.class, attachId);
			if(attach == null){
				throw new RuntimeException("未找到该附件");
			}
			attach.setIsValid(StaticVar.ISVALID_INVALID);
			this.pubDao.update(attach);
			return StaticVar.STATUS_SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			return e.getMessage();
		}
		
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicStandardDocService#querySysDicStandardDoc(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySysDicStandardDoc(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.DOC_CODE as DOC_CODE, " + //0  文档CODE 
			" t.DOC_NAME as DOC_NAME, " + //0 标准文档名称 			
			" t.DOC_PHASES as DOC_PHASES, " + //1 所属项目阶段 			
			" t.DOC_DESC as DOC_DESC, " + //2 标准文档说明 			
			" t.DOC_BLANK_TEMPLATE as DOC_BLANK_TEMPLATE, " + //3 标准文档模板 			
			" t.DOC_EXAMPLE as DOC_EXAMPLE, " + //4 标准文档样例 			
			" t.IS_DELETE as IS_DELETE " + //5 是否删除 			
			
			" from SYS_DIC_STANDARD_DOC t  where  t.IS_DELETE = ? ";
		param.add(StaticVar.ISDELETE_UNDELETE);
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("DOC_CODE"))){
				sql += " and t.DOC_CODE like ? ";
				param.add("%" + m.get("DOC_CODE").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("DOC_NAME"))){
					sql += " and upper(t.DOC_NAME) like upper(?) ";
					param.add("%" + m.get("DOC_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("DOC_PHASES"))){
					sql += " and upper(t.DOC_PHASES) like upper(?) ";
					param.add("%" + m.get("DOC_PHASES").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("DOC_DESC"))){
					sql += " and upper(t.DOC_DESC) like upper(?) ";
					param.add("%" + m.get("DOC_DESC").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("DOC_BLANK_TEMPLATE"))){
					sql += " and upper(t.DOC_BLANK_TEMPLATE) like upper(?) ";
					param.add("%" + m.get("DOC_BLANK_TEMPLATE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("DOC_EXAMPLE"))){
					sql += " and upper(t.DOC_EXAMPLE) like upper(?) ";
					param.add("%" + m.get("DOC_EXAMPLE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_DELETE"))){
					sql += " and upper(t.IS_DELETE) like upper(?) ";
					param.add("%" + m.get("IS_DELETE").toString().trim() + "%");
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicStandardDocService#saveSysDicStandardDoc(cn.thd.pojo.common.SysDicStandardDoc)
	 */
	public void saveSysDicStandardDoc(SysDicStandardDoc obj) {
		obj.setIsDelete(StaticVar.ISDELETE_UNDELETE);
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicStandardDocService#updateSysDicStandardDoc(cn.thd.pojo.common.SysDicStandardDoc)
	 */
	public void updateSysDicStandardDoc(SysDicStandardDoc obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicStandardDocService#querySysDicStandardDocById(java.lang.String)
	 */
	public SysDicStandardDoc querySysDicStandardDocById(java.lang.String pk){
		return (SysDicStandardDoc)this.pubDao.findById(SysDicStandardDoc.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicStandardDocService#deleteSysDicStandardDocById(java.lang.String)
	 */
	public void deleteSysDicStandardDocById(java.lang.String pk){
		SysDicStandardDoc obj = this.querySysDicStandardDocById(pk);
		obj.setIsDelete(StaticVar.ISDELETE_DELETED);
		this.pubDao.update(obj);
	};
	
	
	/**
	 * 批量删除标准文档字典对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSysDicStandardDocByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSysDicStandardDocById(id);
						
						
					}
				}
			}
		}
	};
	
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicProcessService#querySysDicProcess(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySysDicProcess(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.PROCESS_ID as PROCESS_ID, " + //0  l流程ID 
			" t.PROCESS_KEY as PROCESS_KEY, " + //0 流程KEY 			
			" t.PROCESS_NAME as PROCESS_NAME, " + //1 流程名称 			
			" t.PROCESS_DEF_ID as PROCESS_DEF_ID, " + //2 流程定义ID			
			" t.IS_DELETE as IS_DELETE " + //3 是否删除 			
			
			" from SYS_DIC_PROCESS t  where  t.IS_DELETE = ? ";
		param.add(StaticVar.ISDELETE_UNDELETE);
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("PROCESS_ID"))){
				sql += " and t.PROCESS_ID like ? ";
				param.add("%" + m.get("PROCESS_ID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("PROCESS_KEY"))){
					sql += " and upper(t.PROCESS_KEY) like upper(?) ";
					param.add("%" + m.get("PROCESS_KEY").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("PROCESS_NAME"))){
					sql += " and upper(t.PROCESS_NAME) like upper(?) ";
					param.add("%" + m.get("PROCESS_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("PROCESS_DEPLOY_ID"))){
					sql += " and upper(t.PROCESS_DEPLOY_ID) like upper(?) ";
					param.add("%" + m.get("PROCESS_DEPLOY_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_DELETE"))){
					sql += " and upper(t.IS_DELETE) like upper(?) ";
					param.add("%" + m.get("IS_DELETE").toString().trim() + "%");
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicProcessService#saveSysDicProcess(cn.thd.pojo.common.SysDicProcess)
	 */
	public void saveSysDicProcess(SysDicProcess obj) {
		obj.setIsDelete(StaticVar.ISDELETE_UNDELETE);
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicProcessService#updateSysDicProcess(cn.thd.pojo.common.SysDicProcess)
	 */
	public void updateSysDicProcess(SysDicProcess obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicProcessService#querySysDicProcessById(java.lang.String)
	 */
	public SysDicProcess querySysDicProcessById(java.lang.String pk){
		return (SysDicProcess)this.pubDao.findById(SysDicProcess.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicProcessService#deleteSysDicProcessById(java.lang.String)
	 */
	public void deleteSysDicProcessById(java.lang.String pk){
		SysDicProcess obj = this.querySysDicProcessById(pk);
		obj.setIsDelete(StaticVar.ISDELETE_DELETED);
		this.pubDao.update(obj);
	};
	
	
	/**
	 * 批量删除流程信息对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSysDicProcessByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSysDicProcessById(id);
						
						
					}
				}
			}
		}
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicProcessStepService#querySysDicProcessStep(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySysDicProcessStep(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.STEP_ID as STEP_ID, " + //0  步骤ID 
			" t.PROCESS_ID as PROCESS_ID, " + //0 所属流程ID 			
			" t.STEP_CODE as STEP_CODE, " + //1 步骤CODE 			
			" t.STEP_NAME as STEP_NAME, " + //2 步骤名称 			
			" t.STEP_ORDER as STEP_ORDER, " + //3 步骤序号 			
			" t.IS_FIRST_STEP as IS_FIRST_STEP, " + //4 是否第一步骤 			
			" t.IS_LAST_STEP as IS_LAST_STEP, " + //5 是否最后一个步骤 			
			" t.IS_DELETE as IS_DELETE " + //6 是否删除 			
			
			" from SYS_DIC_PROCESS_STEP t  where t.IS_DELETE = ? ";
		param.add(StaticVar.ISDELETE_UNDELETE);
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("STEP_ID"))){
				sql += " and t.STEP_ID like ? ";
				param.add("%" + m.get("STEP_ID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("PROCESS_ID"))){
					sql += " and upper(t.PROCESS_ID) like upper(?) ";
					param.add("%" + m.get("PROCESS_ID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("STEP_CODE"))){
					sql += " and upper(t.STEP_CODE) like upper(?) ";
					param.add("%" + m.get("STEP_CODE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("STEP_NAME"))){
					sql += " and upper(t.STEP_NAME) like upper(?) ";
					param.add("%" + m.get("STEP_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("STEP_ORDER"))){
					sql += " and t.STEP_ORDER = ? ";
					param.add(m.get("STEP_ORDER").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("IS_FIRST_STEP"))){
					sql += " and upper(t.IS_FIRST_STEP) like upper(?) ";
					param.add("%" + m.get("IS_FIRST_STEP").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_LAST_STEP"))){
					sql += " and upper(t.IS_LAST_STEP) like upper(?) ";
					param.add("%" + m.get("IS_LAST_STEP").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_DELETE"))){
					sql += " and upper(t.IS_DELETE) like upper(?) ";
					param.add("%" + m.get("IS_DELETE").toString().trim() + "%");
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicProcessStepService#saveSysDicProcessStep(cn.thd.pojo.common.SysDicProcessStep)
	 */
	public void saveSysDicProcessStep(SysDicProcessStep obj) {
		obj.setIsDelete(StaticVar.ISDELETE_UNDELETE);
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicProcessStepService#updateSysDicProcessStep(cn.thd.pojo.common.SysDicProcessStep)
	 */
	public void updateSysDicProcessStep(SysDicProcessStep obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicProcessStepService#querySysDicProcessStepById(java.lang.String)
	 */
	public SysDicProcessStep querySysDicProcessStepById(java.lang.String pk){
		return (SysDicProcessStep)this.pubDao.findById(SysDicProcessStep.class,pk);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicProcessStepService#querySysDicProcessStepById(java.lang.String)
	 */
	public SysDicProcessStep querySysDicProcessStepByStepCode(java.lang.String stepCode){
		return (SysDicProcessStep)this.pubDao.getByProerties(SysDicProcessStep.class, "stepCode", stepCode);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicProcessStepService#deleteSysDicProcessStepById(java.lang.String)
	 */
	public void deleteSysDicProcessStepById(java.lang.String pk){
		SysDicProcessStep obj = this.querySysDicProcessStepById(pk);
		obj.setIsDelete(StaticVar.ISDELETE_DELETED);
		this.pubDao.update(obj);
	};
	
	
	/**
	 * 批量删除流程信息对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSysDicProcessStepByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
						deleteSysDicProcessStepById(id);
					}
				}
			}
		}
	};
	
	/**
	 * 同步流程
	 * @param deployId 流程定义ID
	 */
	public String syncProcess(String procDefId){
		System.out.println(procDefId);
		List params = new ArrayList();
        params.add(procDefId.trim());
        params.add(StaticVar.ISDELETE_UNDELETE);
		String existResultSql = "select count(1) as ct from sys_dic_process t where t.process_def_id = ? and t.is_delete = ?";
		List<Map<String,Object>> resultCount = jdbcDao.query(existResultSql, params.toArray(),null);
		if(Integer.parseInt(resultCount.get(0).get("ct").toString()) > 0){
			throw new RuntimeException( "该流程已被同步,不能再次同步");
		}
		
		String sql = "select " +
      		" id_ as id," +
      		" version_ as rev," +
      		" category_ as cate," +
      		" name_ as procname," +
      		" key_ as prockey " +
      		" from act_re_procdef where id_ = ?";
		params.clear();
		params.add(procDefId.trim());
        List<Map<String,Object>> l = jdbcDao.query(sql, params.toArray(), null);
        if(!ListUtil.isNotEmpty(l)){
        	return "对不起没有找到该流程";
        }
        
        if(l.size() > 1 ){
        	return "找到了多个流程";
        }
      
        Map<String,Object> procDef = l.get(0);
        
        SysDicProcess process = new SysDicProcess();
        process.setProcessKey(procDef.get("prockey") == null ? "" : procDef.get("prockey").toString());
        process.setProcessDefId(procDefId);
        process.setProcessName(procDef.get("procname") == null ? "" : procDef.get("procname").toString());
        
        this.saveSysDicProcess(process);
        
        //System.out.println(1/0);
		BpmnModel model = repositoryService.getBpmnModel(procDefId);  
		if(model != null) { 
			Collection<FlowElement> flowElements = model.getMainProcess().getFlowElements();  
			for(FlowElement e : flowElements) {  
				System.out.println("flowelement id:" + e.getId() + "  name:" + e.getName() + "   class:" + e.getClass().toString()); 
				if("org.activiti.bpmn.model.UserTask".equals(e.getClass().getName())){
					SysDicProcessStep step = new SysDicProcessStep();
					
					step.setProcessId(process.getProcessId());
					step.setStepCode(e.getId());
					step.setStepName(e.getName());
					this.saveSysDicProcessStep(step);
				}
			}
		}
		System.out.println(l);
		return StaticVar.STATUS_SUCCESS;
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicFunctionService#querySysDicFunction(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySysDicFunction(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.FUN_ID as FUN_ID, " + //0  功能 
			" t.FUN_NAME as FUN_NAME, " + //0 功能主键 			
			" t.FUN_URL as FUN_URL, " + //1 功能名称 			
			" t.FUN_DESC as FUN_DESC, " + //2 功能URL 			
			" t.IS_VALID as IS_VALID, " + //3 功能描述 			
			" t.IS_DELETE as IS_DELETE " + //4 是否有效 			
			
			" from SYS_DIC_FUNCTION t  where t.IS_DELETE = ? ";
		param.add(StaticVar.ISDELETE_UNDELETE);
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("FUN_ID"))){
				sql += " and t.FUN_ID like ? ";
				param.add("%" + m.get("FUN_ID").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("FUN_NAME"))){
					sql += " and upper(t.FUN_NAME) like upper(?) ";
					param.add("%" + m.get("FUN_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("FUN_URL"))){
					sql += " and upper(t.FUN_URL) like upper(?) ";
					param.add("%" + m.get("FUN_URL").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("FUN_DESC"))){
					sql += " and upper(t.FUN_DESC) like upper(?) ";
					param.add("%" + m.get("FUN_DESC").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_VALID"))){
					sql += " and upper(t.IS_VALID) like upper(?) ";
					param.add("%" + m.get("IS_VALID").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_DELETE"))){
					sql += " and upper(t.IS_DELETE) like upper(?) ";
					param.add("%" + m.get("IS_DELETE").toString().trim() + "%");
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicFunctionService#saveSysDicFunction(cn.thd.pojo.common.SysDicFunction)
	 */
	public void saveSysDicFunction(SysDicFunction obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicFunctionService#updateSysDicFunction(cn.thd.pojo.common.SysDicFunction)
	 */
	public void updateSysDicFunction(SysDicFunction obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicFunctionService#querySysDicFunctionById(java.lang.String)
	 */
	public SysDicFunction querySysDicFunctionById(java.lang.String pk){
		return (SysDicFunction)this.pubDao.findById(SysDicFunction.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.common.SysDicFunctionService#deleteSysDicFunctionById(java.lang.String)
	 */
	public void deleteSysDicFunctionById(java.lang.String pk){
		SysDicFunction obj = this.querySysDicFunctionById(pk);
		obj.setIsDelete(StaticVar.ISDELETE_DELETED);
		this.pubDao.update(obj);
	};
	
	
	/**
	 * 批量删除功能字典对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSysDicFunctionByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
						deleteSysDicFunctionById(id);
					}
				}
			}
		}
	};
	
	
	public List querySelectedFun(String id,String classify){
		String sql = " SELECT "
				+ " SDF.FUN_NAME AS FUN_NAME, "
				+ " SDF.FUN_ID AS FUN_ID, "
				+ " SMF.RELA_ID AS RELA_ID, "
				+ " SMF.RELA_SORT AS RELA_SORT "
				+ " FROM "
				+ " SE_MAP_FUN SMF LEFT JOIN SYS_DIC_FUNCTION SDF ON SMF.FUN_ID = SDF.FUN_ID AND SDF.IS_DELETE = ? "
				+ " WHERE SMF.TAB_ID = ? AND SMF.RELA_TAB = ? AND SDF.IS_VALID = ? AND SDF.IS_DELETE = ?";
		List<String> param = new ArrayList<String>();
		param.add(StaticVar.ISDELETE_UNDELETE);
		param.add(id);
		param.add(classify);
		param.add(StaticVar.ISVALID_VALID);
		param.add(StaticVar.ISDELETE_UNDELETE);
		List l = this.jdbcDao.query(sql, param.toArray(),null);
		return l;
	};
	
	public void saveSelectedFun(String id,String classify,List funs){
		String sql = " delete from se_map_fun where tab_id = ? and rela_tab = ? ";
		List<String> param = new ArrayList<String>();
		param.add(id);
		param.add(classify);
		this.pubDao.executeSql(sql, param.toArray());
		
		if(MyListUtils.isNotEmpty(funs)){
			for(Object obj : funs){
				Map m = (Map)obj;
				SeMapFun smf = new SeMapFun();
				smf.setFunId(m.get("FUN_ID").toString());
				smf.setTabId(id);
				smf.setRelaTab(classify);
				smf.setRelaSort(m.get("RELA_SORT") == null ? "0" : m.get("RELA_SORT").toString());
				this.pubDao.save(smf);
			}
		}
	}
	
	
	public List queryFunByTabidAndClassify(String classify , String tabId){
		String sql = " SELECT "
				+ " F.FUN_ID,"
				+ " F.FUN_NAME,"
				+ " F.FUN_URL,"
				+ " M.RELA_SORT,"
				+ " M.RELA_TAB,"
				+ " M.TAB_ID "
				+ " FROM SYS_DIC_FUNCTION F LEFT JOIN SE_MAP_FUN M ON F.FUN_ID = M.FUN_ID "
				+ " WHERE "
				+ " M.RELA_TAB = ? AND M.TAB_ID = ? AND F.IS_VALID = ? AND F.IS_DELETE = ? ORDER BY M.RELA_SORT";
		List<String> param = new ArrayList<String>();
		param.add(classify);
		param.add(tabId);
		param.add(StaticVar.ISVALID_VALID);
		param.add(StaticVar.ISDELETE_UNDELETE);
		return this.jdbcDao.query(sql, param.toArray(), null);
	};
}
