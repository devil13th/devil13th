package cn.thd.service.process;

import java.util.List;
import java.util.Map;

import cn.thd.bean.ProcessMethodBean;
import cn.thd.bean.ProcessNextStepBean;
import cn.thd.bean.ProcessStartInfo;
import cn.thd.bean.StaticVar;
import cn.thd.dto.DataTableBean;
import cn.thd.pojo.common.SysDicProcess;
import cn.thd.pojo.common.SysDicProcessStep;
import cn.thd.pojo.process.SeProcPerformer;
import cn.thd.pojo.process.SeProcTask;
import cn.thd.pojo.process.SeWorkList;

import com.thd.core.service.PubService;
import com.thd.util.Page;
/**
 * file autogenerated by ThirdteenDevils's CodeGenUtil 
 */
public interface SeProcessService extends PubService {
	
	// ------------------------------------  以下为公共方法 统一入口---------------------------------//
	/**
	 * 公共方法-开启流程
	 * Method Description : ########
	 * @param processStartInfo 流程启动信息
	 * @return processStartInfo 流程启动信息
	 */
	public ProcessMethodBean startJob(ProcessStartInfo processStartInfo)throws Exception;
	/**
	 * 公共方法-流程扭转
	 * Method Description : ########
	 * @param processNextStepBean 流程扭转信息
	 * @return processNextStepBean 流程扭转信息
	 */
	public ProcessMethodBean nextStep(ProcessMethodBean processMethodBean)throws Exception;
	/**
	 * 公共方法-关闭流程
	 * Method Description : ########
	 * @param processNextStepBean 流程扭转信息
	 * @return processNextStepBean 流程扭转信息
	 */
	public ProcessMethodBean closeProcess(ProcessMethodBean processMethodBean)throws Exception;
	/**
	 * 开启流程后置方法
	 * Method Description : ########
	 * @param processMethodBean
	 * @return
	 * @throws Exception
	 */
	public ProcessMethodBean afterStartProcess(ProcessMethodBean processMethodBean) throws Exception;
	/**
	 * 流程扭转后端验证
	 * Method Description : ########
	 * @param processMethodBean
	 * @return
	 * @throws Exception
	 */
	public ProcessMethodBean validate(ProcessMethodBean processMethodBean);
	/**
	 * 设置流程变量
	 * Method Description : ########
	 * @param processMethodBean
	 * @return
	 * @throws Exception
	 */
	public ProcessMethodBean setProcInstVar(ProcessMethodBean processMethodBean); 
	/**
	 * 流程扭转前置方法
	 * Method Description : ########
	 * @param processMethodBean
	 * @return
	 * @throws Exception
	 */
	public ProcessMethodBean beforeCompleteTask(ProcessMethodBean processMethodBean); 
	/**
	 * 流程扭转后置方法
	 * Method Description : ########
	 * @param processMethodBean
	 * @return
	 * @throws Exception
	 */
	public ProcessMethodBean afterCompleteTask(ProcessMethodBean processMethodBean); 
	/**
	 * 关闭流程前置方法
	 * Method Description : ########
	 * @param processMethodBean
	 * @return
	 * @throws Exception
	 */
	public ProcessMethodBean beforeCloseProcess(ProcessMethodBean processMethodBean); 
	/**
	 * 关闭流程后置方法
	 * Method Description : ########
	 * @param processMethodBean
	 * @return
	 * @throws Exception
	 */
	public ProcessMethodBean afterCloseProcess(ProcessMethodBean processMethodBean); 
	
	/**
	 * 判断某个代办某人是否有权限
	 * Method Description : ########
	 * @param processMethodBean
	 * @return processMethodBean
	 */
	public ProcessMethodBean hasTaskPerformAuth(ProcessMethodBean processMethodBean);
	
	/**
	 * 处理processMethodBean 根据"i"开头的参数初始化"d"开头的参数
	 * Method Description : ########
	 * @param processMethodBean
	 */
	public void dealProcessMethodBean(ProcessMethodBean processMethodBean);
	/**
	 * 根据流程KEY查询流程字典对象
	 * Method Description : ########
	 * @param processKey 流程KEY
	 * @return 流程字典对象
	 */
	public SysDicProcess querySysDicProcessByProcessKey(String processKey);
	/**
	 * 根据步骤CODE查询步骤字典对象
	 * Method Description : ########
	 * @param stepCode 步骤CODE
	 * @return 步骤字典对象
	 */
	public SysDicProcessStep querySysDicProcessStepByStepCode(String stepCode);
	
	/**
	 * 根据业务主键和步骤CODE查询代办
	 * Method Description : ########
	 * @param jobno 业务主键
	 * @param stepCode 步骤CODE
	 * @return taskId
	 */
	public String queryTaskIdByBusinessKeyAndStepId(String jobno,String stepCode);
	
	// ------------------------------------  task process ---------------------------------//
	
	
	
	
	
	
	
	
	
	/**
	 * 开启任务流程
	 * Method Description : ########
	 * @param processStartInfo 流程启动信息
	 * @return processStartInfo 流程启动信息
	 */
	public ProcessStartInfo startTaskProcess(ProcessStartInfo processStartInfo)throws Exception;
	
	/**
	 * 查询执行人信息列表
	 * @param m 查询条件
	 * @param p 分页信息
	 * @return
	 */
	public List querySeProcPerformer(Map<String,String> m , Page p);
	/**
	 * 保存执行人信息
	 * @param obj 执行人信息对象
	 */
	public void saveSeProcPerformer(SeProcPerformer obj) ;
	/**
	 * 更新执行人信息
	 * @param obj 执行人信息对象
	 */
	public void updateSeProcPerformer(SeProcPerformer obj);
	/**
	 * 根据主键查询执行人信息对象
	 * @param pk 主键
	 */
	public SeProcPerformer querySeProcPerformerById(java.lang.String pk);
	/**
	 * 删除执行人信息对象
	 * @param pk 主键
	 */
	public void deleteSeProcPerformerById(java.lang.String pk);
	/**
	 * 批量删除执行人信息对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeProcPerformerByIds(String ids);
	
	
	/**
	 * 查询系统取号列表
	 * @param m 查询条件
	 * @param p 分页信息
	 * @return
	 */
	public List querySeWorkList(Map<String,String> m , Page p);
	/**
	 * 保存系统取号
	 * @param obj 系统取号对象
	 */
	public void saveSeWorkList(SeWorkList obj) ;
	/**
	 * 更新系统取号
	 * @param obj 系统取号对象
	 */
	public void updateSeWorkList(SeWorkList obj);
	/**
	 * 根据主键查询系统取号对象
	 * @param pk 主键
	 */
	public SeWorkList querySeWorkListById(java.lang.String pk);
	/**
	 * 根据主键查询系统取号对象
	 * @param jobno gongzuokongzhihao(主键)
	 */
	public SeWorkList querySeWorkListByJobno(java.lang.String jobno);
	/**
	 * 删除系统取号对象
	 * @param pk 主键
	 */
	public void deleteSeWorkListById(java.lang.String pk);
	/**
	 * 批量删除系统取号对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeWorkListByIds(String ids);
	
	/**
	 * 公共派工
	 * @param jobno 工作编号
	 * @param mark 标记
	 * @param assigners 人员  user:人员id  role:角色
	 */
	public void saveSeProcPerformers(String jobno , String mark , List<Map<String,String>> assigners);
	
	/**
	 * 查询指派的人员
	 * @param jobno 工作控制号
	 * @param mark 标记
	 * @return
	 */
	public Map<String,String> queryPerformersByJobnoAndMark(String jobno,String mark);
	
	/**
	 * 查询待办
	 * Method Description : ########
	 * @param key 关键字
	 * @param user 用户
	 * @return
	 */
	public List queryTodoList(Map m,String user,Page p);
	
	/**
	 * 查询流程
	 * Method Description : ########
	 * @return
	 */
	public List queryProcessList(Map m,Page p);

	
	/**
	 * 查询我的待办
	 * Method Description : ########
	 * @param user
	 * @param p
	 * @return
	 */
	public DataTableBean queryMyTodo(DataTableBean dtb);
	
	/**
	 * 矩阵任务开启工作快捷方法
	 * @param processStartInfo 开启流程基础信息
	 * @param taskId 任务ID
	 * @return
	 */
	public String startTaskProcessForTraceTask(ProcessStartInfo processStartInfo,String taskId);
	/**
	 * 查询历史任务轨迹
	 * @param processInstanceId 流程实例ID
	 * @return
	 */
	public List queryHistoryTask(String processInstanceId);
	/**
	 * 查询当前待办
	 * @param processInstanceId 流程实例ID
	 * @return
	 */
	public List queryCurrentTask(String processInstanceId);
	
	/**
	 * 删除/取消流程实例
	 * Method Description : ########
	 * @param jobno 工作编号
	 * @return
	 */
	public String cancelProcessInstance(String jobno);
	/**
	 * 挂起流程实例
	 * Method Description : ########
	 * @param jobno 工作编号
	 * @return
	 */
	public String suspendsProcessInstance(String jobno);
	/**
	 * 激活某流程实例
	 * Method Description : ########
	 * @param jobno  工作编号
	 * @return
	 */
	public String activateProcessInstance(String jobno);
	
	
	/**
	 * 签收并完成工作
	 * Method Description : ########
	 * @param taskId 待办ID
	 * @param stepOperator 操作人
	 * @param m 流程变量
	 * @return
	 */
	public String claimAndComplateTask(String taskId,String stepOperator,Map m);
	
	/**
	 * 某人是否有某代办的操作权限
	 * Method Description : ########
	 * @param taskId 待办ID
	 * @param userId 用户ID
	 * @return
	 */
	public boolean cando(String taskId,String userId);
	// =================================  业务服务  ===================================
	
	//--------------------------  任务流程相关服务  ---------------------------//
	/**
	 * 查询任务流程信息列表
	 * @param m 查询条件
	 * @param p 分页信息
	 * @return
	 */
	public List querySeProcTask(Map<String,String> m , Page p);
	/**
	 * 保存任务流程信息
	 * @param obj 任务流程信息对象
	 */
	public void saveSeProcTask(SeProcTask obj) ;
	/**
	 * 更新任务流程信息(连带保存TaskProcess流程的流程变量)
	 * @param obj 任务流程信息对象
	 */
	public void updateSeProcTask(SeProcTask obj);
	/**
	 * 更新任务流程信息(仅仅更新业务数据(带有任务人员)对象)
	 * @param obj 任务流程信息对象
	 */
	public void updateSeProcTaskForBusiness(SeProcTask obj);
	/**
	 * 更新任务流程信息
	 * @param obj 任务流程信息对象
	 */
	public void updateSeProcTaskOnly(SeProcTask obj);
	/**
	 * 根据主键查询任务流程信息对象
	 * @param pk 主键
	 */
	public SeProcTask querySeProcTaskById(java.lang.String pk);
	/**
	 * 删除任务流程信息对象
	 * @param pk 主键
	 */
	public void deleteSeProcTaskById(java.lang.String pk);
	/**
	 * 批量删除任务流程信息对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeProcTaskByIds(String ids);
	
	/**
	 * 查询待办的候选人
	 * Method Description : ########
	 * @param taskId 待办ID
	 * @return
	 */
	public String queryTaskCandidate(String taskId);
	/**
	 * 保存待办的候选人
	 * Method Description : ########
	 * @param taskId 任务ID
	 * @param userIds 候选人ID  多个ID用","隔开
	 * @return
	 */
	public String saveTaskCandidate(String taskId,String userIds);

}
