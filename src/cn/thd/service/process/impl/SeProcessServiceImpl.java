package cn.thd.service.process.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.activiti.engine.repository.ProcessDefinition;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.IdentityLink;
import org.activiti.engine.task.Task;
import org.springframework.stereotype.Service;
import org.springframework.web.context.ContextLoader;
import org.springframework.web.context.WebApplicationContext;

import cn.thd.bean.ProcessCfg;
import cn.thd.bean.ProcessMethodBean;
import cn.thd.bean.ProcessNextStepBean;
import cn.thd.bean.ProcessStartInfo;
import cn.thd.bean.ProcessStaticVar;
import cn.thd.bean.StaticVar;
import cn.thd.dto.DataTableBean;
import cn.thd.pojo.common.SysDicProcess;
import cn.thd.pojo.common.SysDicProcessStep;
import cn.thd.pojo.process.SeProcPerformer;
import cn.thd.pojo.process.SeProcTask;
import cn.thd.pojo.process.SeWorkList;
import cn.thd.pojo.se.SeRequirementTrace;
import cn.thd.pojo.se.SeTraceTask;
import cn.thd.service.common.CommonService;
import cn.thd.service.process.ProcessMethodService;
import cn.thd.service.process.SeProcessService;
import cn.thd.service.se.SeService;
import cn.thd.service.sys.SysService;

import com.thd.core.dao.JdbcDao;
import com.thd.core.dao.PubDao;
import com.thd.core.service.PubServiceImpl;
import com.thd.util.MyActivitiUtil;
import com.thd.util.MyDateUtils;
import com.thd.util.MyListUtils;
import com.thd.util.MyStringUtils;
import com.thd.util.Page;
import com.thd.util.StringUtil;
/**
 * file autogenerated by ThirdteenDevils's CodeGenUtil 
 */
@Service("seProcessService")
public class SeProcessServiceImpl extends PubServiceImpl implements SeProcessService {
	@Resource 
	private PubDao pubDao;
	@Resource
	private JdbcDao jdbcDao;
	@Resource
	private MyActivitiUtil myActivitiUtil;
	@Resource
	private SysService sysService;
	@Resource
	private SeService seService;
	@Resource
	private CommonService commonService;
	
	
	
	public ProcessMethodBean startJob(ProcessStartInfo processStartInfo) throws Exception{
		
		if(processStartInfo == null){
			throw new Exception("获取不到流程开启信息");
		}
		if(MyStringUtils.isEmpty(processStartInfo.getiProcKey())){
			throw new Exception("请选择流程");
		}
		if(MyStringUtils.isEmpty(processStartInfo.getiStartUser())){
			throw new Exception("请选择流程开启人");
		}
		if(MyStringUtils.isEmpty(processStartInfo.getiJobnoKey())){
			throw new Exception("未找到创建工作编号标记");
		}
		
		String jobno = this.sysService.createNo(processStartInfo.getiJobnoKey());
		ProcessInstance procIns = this.myActivitiUtil.runtimeService.startProcessInstanceByKey(processStartInfo.getiProcKey(), jobno, processStartInfo.getiProcVar());
		String procInsId = procIns.getProcessInstanceId();
		Task task = this.myActivitiUtil.getTaskService().createTaskQuery().processInstanceId(procInsId).singleResult();
		processStartInfo.setoJobno(jobno);
		processStartInfo.setoTaskId(task.getId());
		processStartInfo.setProcInsId(procInsId);
		
		
		SeWorkList wl = new SeWorkList();
		wl.setJobno(jobno);
		wl.setIsDelete(StaticVar.ISDELETE_UNDELETE);
		wl.setJobStatus(StaticVar.PROCESSSTATUS_NORMAL);
		wl.setProcInsId(procInsId);
		wl.setStartTime(new Date());
		wl.setStartUser(processStartInfo.getiStartUser());
		wl.setWorkName("新建工作" + MyDateUtils.toString(new Date(), "yyyy-MM-dd HH:mm:ss"));
		wl.setWorkType(processStartInfo.getiProcKey());
		wl.setCreateTime(new Date());
		wl.setUpdateTime(new Date());
		this.pubDao.save(wl);
		
		//开启流程后置方法
		ProcessMethodBean pmb = new ProcessMethodBean();
		
		pmb.setStatus(StaticVar.STATUS_SUCCESS);
		pmb.setJobno(jobno);
		pmb.setStepCode(task.getTaskDefinitionKey());
		pmb.setTaskId(task.getId());
		pmb.setOperator(processStartInfo.getiStartUser());
		this.dealProcessMethodBean(pmb);
		this.afterStartProcess(pmb);
		
		return pmb;
		
	};
	
	
	
	public ProcessMethodBean nextStep(ProcessMethodBean processMethodBean)throws Exception{
		SeWorkList swl = this.querySeWorkListById(processMethodBean.getJobno());
		WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext();
		Object obj = null;
		
		if(StringUtil.isNotEmpty(ProcessCfg.getInstance().get(ProcessStaticVar.WORKPROCESS).getProcessMethodObjectName())){
			obj = wac.getBean(ProcessCfg.getInstance().get(ProcessStaticVar.WORKPROCESS).getProcessMethodObjectName());
		}
		
		try{
			if(obj != null){
				ProcessMethodService pm = (ProcessMethodService)obj;
				pm.beforeCompleteTask(processMethodBean);
			}
		}catch(Exception e){
			e.printStackTrace();
			processMethodBean.setStatus(StaticVar.STATUS_FAILURE);
			processMethodBean.setMessage(e.getMessage());
			return processMethodBean;
		}
		
		System.out.println(" ------------------ >>> 流程扭转前置方法 start ------------------- ");
		//各个步骤扭转的前置方法   例如结束portal任务
		/*switch(processNextStepBean.getStepCode()){
			case ProcessStaticVar.WORKPROCESS_ASSIGN :
				ProcessCfg pc = ProcessCfg.getInstance();
				//System.out.println(pc);
				//System.out.println(ProcessCfg.getInstance().get(ProcessStaticVar.WORKPROCESS));
				//System.out.println(ProcessCfg.getInstance().get(ProcessStaticVar.WORKPROCESS).getStep(ProcessStaticVar.WORKPROCESS_ASSIGN));
			break;
			default: break;
		}*/
		
		//步骤扭转公共前置方法
		
		System.out.println(" ------------------ >>> 流程扭转前置方法 end ------------------- ");
		
		
		
		System.out.println(" ------------------ <<< 流程扭转 start ------------------- ");
		//流程扭转
		this.myActivitiUtil.claimAndComplateTask(processMethodBean.getTaskId(), processMethodBean.getOperator(),null);
		
		System.out.println(" ------------------ <<< 流程扭转 end ------------------- ");
		
		
		System.out.println(" ------------------ >>> 流程扭转后置方法 start ------------------- ");
		//各个步骤扭转的后置方法
		/*switch(processNextStepBean.getStepCode()){
			case ProcessStaticVar.WORKPROCESS_ASSIGN :
			break;
			
			default: break;
		}*/
		
		try{
			if(obj != null){
				ProcessMethodService pm = (ProcessMethodService)obj;
				pm.afterCompleteTask(processMethodBean);
				processMethodBean.setStatus(StaticVar.STATUS_SUCCESS);
			}
		}catch(Exception e){
			e.printStackTrace();
			processMethodBean.setStatus(StaticVar.STATUS_FAILURE);
			processMethodBean.setMessage(e.getMessage());
			return processMethodBean;
		}
		
		//公共扭转后置方法  例如代办发送邮件
		
		
		System.out.println(" ------------------ >>> 流程扭转后置方法 end ------------------- ");
		
		processMethodBean.setStatus(StaticVar.STATUS_SUCCESS);
		return processMethodBean;
	};
	
	
	
	public ProcessMethodBean afterStartProcess(ProcessMethodBean processMethodBean) throws Exception {
		WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext();
		Object obj = wac.getBean(processMethodBean.getProcessService());
		ProcessMethodService processService = (ProcessMethodService)obj;
		return processService.afterStartProcess(processMethodBean);
	}



	public ProcessMethodBean validate(ProcessMethodBean processMethodBean) {
		WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext();
		Object obj = wac.getBean(processMethodBean.getProcessService());
		ProcessMethodService processService = (ProcessMethodService)obj;
		return processService.validate(processMethodBean);
	}



	public ProcessMethodBean setProcInstVar(ProcessMethodBean processMethodBean) {
		WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext();
		Object obj = wac.getBean(processMethodBean.getProcessService());
		ProcessMethodService processService = (ProcessMethodService)obj;
		return processService.setProcInstVar(processMethodBean);
	}



	public ProcessMethodBean beforeCompleteTask(ProcessMethodBean processMethodBean) {
		WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext();
		Object obj = wac.getBean(processMethodBean.getProcessService());
		ProcessMethodService processService = (ProcessMethodService)obj;
		return processService.beforeCompleteTask(processMethodBean);
	}



	public ProcessMethodBean afterCompleteTask(ProcessMethodBean processMethodBean) {
		WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext();
		Object obj = wac.getBean(processMethodBean.getProcessService());
		ProcessMethodService processService = (ProcessMethodService)obj;
		return processService.afterCompleteTask(processMethodBean);
	}
	
	
	
	
	@Override
	public ProcessMethodBean closeProcess(ProcessMethodBean processMethodBean)
			throws Exception {
		this.beforeCloseProcess(processMethodBean);
		this.nextStep(processMethodBean);
		this.afterCloseProcess(processMethodBean);
		return processMethodBean;
	}



	@Override
	public ProcessMethodBean beforeCloseProcess(
			ProcessMethodBean processMethodBean) {
		WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext();
		Object obj = wac.getBean(processMethodBean.getProcessService());
		ProcessMethodService processService = (ProcessMethodService)obj;
		return processService.beforeCloseProcess(processMethodBean);
	}



	@Override
	public ProcessMethodBean afterCloseProcess(
			ProcessMethodBean processMethodBean) {
		WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext();
		Object obj = wac.getBean(processMethodBean.getProcessService());
		ProcessMethodService processService = (ProcessMethodService)obj;
		return processService.afterCloseProcess(processMethodBean);
	}

	public ProcessMethodBean hasTaskPerformAuth(ProcessMethodBean processMethodBean){
		WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext();
		Object obj = wac.getBean(processMethodBean.getProcessService());
		ProcessMethodService processService = (ProcessMethodService)obj;
		processService.hasTaskPerformAuth(processMethodBean);
		return processMethodBean;
	};

	public void dealProcessMethodBean(ProcessMethodBean processMethodBean){
		if(MyStringUtils.isEmpty(processMethodBean.getJobno()) || MyStringUtils.isEmpty(processMethodBean.getStepCode())){
			return ;
		}
		
		//processMethodBean如果未被初始化则进行初始化工作
		if(MyStringUtils.isEmpty(processMethodBean.getBeInited()) || !processMethodBean.INITED.equals(processMethodBean.getBeInited())){
			
			processMethodBean.setBeInited(ProcessMethodBean.INITED);
			
			String taskId = this.queryTaskIdByBusinessKeyAndStepId(processMethodBean.getJobno(), processMethodBean.getStepCode());
			processMethodBean.setTaskId(taskId);
			
			ProcessInstance processInstance = myActivitiUtil.getRuntimeService().createProcessInstanceQuery().processInstanceBusinessKey(processMethodBean.getJobno()).singleResult();
			if(processInstance != null){
				processMethodBean.setProcessInstanceId(processInstance.getProcessInstanceId());
			}
			
			SysDicProcessStep step = this.commonService.querySysDicProcessStepByStepCode(processMethodBean.getStepCode());
			processMethodBean.setStepId(step.getStepId());
			
			processMethodBean.setProcessId(step.getProcessId());
			SysDicProcess process = this.commonService.querySysDicProcessById(step.getProcessId());
			processMethodBean.setProcessCode(process.getProcessKey());
			
			processMethodBean.setProcessService(process.getProcessService());
			
			WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext();
			Object obj = wac.getBean(processMethodBean.getProcessService());
			ProcessMethodService processService = (ProcessMethodService)obj;
			processService.hasTaskPerformAuth(processMethodBean);
		}else{
			throw new RuntimeException(" ProcessMethodBean is not be init");
		}
	};
	
	
	public SysDicProcess querySysDicProcessByProcessKey(String processKey){
		return (SysDicProcess)this.pubDao.getByProerties(SysDicProcess.class, "processKey", processKey);
	}
	
	public SysDicProcessStep querySysDicProcessStepByStepCode(String stepCode){
		return (SysDicProcessStep)this.pubDao.getByProerties(SysDicProcessStep.class, "stepCode",stepCode);
	}
	
	
	public String queryTaskIdByBusinessKeyAndStepId(String jobno,String stepCode){
		String sql = 
				" SELECT "
				+ " TASK.ID_ AS TASKID,"
				+ " PI.BUSINESS_KEY_ AS JOBNO,"
				+ " STEP.STEP_CODE  "
				+ " FROM "
				+ " ACT_RU_TASK TASK LEFT JOIN ACT_HI_PROCINST PI ON TASK.PROC_INST_ID_ = PI.PROC_INST_ID_ LEFT "
				+ " JOIN SYS_DIC_PROCESS_STEP STEP ON TASK.TASK_DEF_KEY_ = STEP.STEP_CODE AND STEP.IS_DELETE = ? "
				+ " WHERE 1=1 AND PI.BUSINESS_KEY_ = ? AND STEP.STEP_CODE = ? ";
				
		List<Map<String,Object>> list = this.jdbcDao.query(sql, new String[]{StaticVar.ISDELETE_UNDELETE,jobno,stepCode}, null);
		return list==null||list.isEmpty()?null:list.get(0).get("TASKID").toString();
	};

	public ProcessStartInfo startTaskProcess(ProcessStartInfo processStartInfo)throws Exception{
		this.startJob(processStartInfo);
		SeProcTask spt = new SeProcTask();
		spt.setJobno(processStartInfo.getoJobno());
		spt.setAssigner(processStartInfo.getiStartUser());
		this.pubDao.save(spt);
		return processStartInfo;
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProcTaskService#querySeProcTaskById(java.lang.String)
	 */
	public SeProcTask querySeProcTaskById(java.lang.String pk){
		SeProcTask t =  (SeProcTask)this.pubDao.findById(SeProcTask.class,pk);
		Map<String,String> performer = this.queryPerformersByJobnoAndMark(t.getJobno(), "performer");
		Map<String,String> auditers = this.queryPerformersByJobnoAndMark(t.getJobno(), "auditer");
		t.setPerformer(MyListUtils.stringToList(performer.get("userIds"), ","));
		t.setPerformerNames(performer.get("userNames"));
		t.setAuditer(MyListUtils.stringToList(auditers.get("userIds"),","));
		t.setAuditerNames(auditers.get("userNames"));
		return t;
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProcTaskService#updateSeProcTask(cn.thd.pojo.process.SeProcTask)
	 */
	public void updateSeProcTask(SeProcTask obj){
		//this.pubDao.update(obj);
		try{
			this.pubDao.update(obj, obj.getJobno(), null);
			
			ProcessInstance pi = this.myActivitiUtil.runtimeService.createProcessInstanceQuery().processInstanceBusinessKey(obj.getJobno()).singleResult();
			
			
			if(MyListUtils.isNotEmpty(obj.getPerformer())){
				List<String> performers = obj.getPerformer();
				List<Map<String,String>> users = new ArrayList<Map<String,String>>();
				//this.saveSeProcPerformers(obj.getJobno(), "performer", users);
				
				for(String performer : performers){
					Map<String,String> m = new HashMap<String,String>();
					m.put("user", performer);
					m.put("role", "");
					users.add(m);
				}
				this.saveSeProcPerformers(obj.getJobno(), "performer", users);
				
				//设置流程变量
				Map m = new HashMap();
				m.put("performer", MyListUtils.listToString(obj.getPerformer(), ","));
				this.myActivitiUtil.runtimeService.setVariables(pi.getProcessInstanceId(), m);
			}
			if(MyListUtils.isNotEmpty(obj.getAuditer())){
				List<String> auditers = obj.getAuditer();
				List<Map<String,String>> users = new ArrayList<Map<String,String>>();
				//this.saveSeProcPerformers(obj.getJobno(), "auditer", users);
				
				for(String auditer : auditers){
					Map<String,String> m = new HashMap<String,String>();
					m.put("user", auditer);
					m.put("role", "");
					users.add(m);
				}
				this.saveSeProcPerformers(obj.getJobno(), "auditer", users);
				
				Map m = new HashMap();
				m.put("auditer", MyListUtils.listToString(obj.getAuditer(), ","));
				this.myActivitiUtil.runtimeService.setVariables(pi.getProcessInstanceId(), m);
			}
			
			SeWorkList wl = this.querySeWorkListById(obj.getJobno());
			wl.setWorkName(obj.getTaskName());
			wl.setProjectId(obj.getProjectId());
			this.pubDao.update(wl);
		}catch(Exception e){
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	};
	
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProcTaskService#updateSeProcTaskForBusiness(cn.thd.pojo.process.SeProcTask)
	 */
	public void updateSeProcTaskForBusiness(SeProcTask obj){
		try{
			this.pubDao.update(obj, obj.getJobno(), null);
			if(MyListUtils.isNotEmpty(obj.getPerformer())){
				List<String> performers = obj.getPerformer();
				List<Map<String,String>> users = new ArrayList<Map<String,String>>();
				for(String performer : performers){
					Map<String,String> m = new HashMap<String,String>();
					m.put("user", performer);
					m.put("role", "");
					users.add(m);
				}
				this.saveSeProcPerformers(obj.getJobno(), "performer", users);
			}else{
				this.saveSeProcPerformers(obj.getJobno(), "performer", null);
			}
			if(MyListUtils.isNotEmpty(obj.getAuditer())){
				List<String> auditers = obj.getAuditer();
				List<Map<String,String>> users = new ArrayList<Map<String,String>>();
				for(String auditer : auditers){
					Map<String,String> m = new HashMap<String,String>();
					m.put("user", auditer);
					m.put("role", "");
					users.add(m);
				}
				this.saveSeProcPerformers(obj.getJobno(), "auditer", users);
			}else{
				this.saveSeProcPerformers(obj.getJobno(), "auditer", null);
			}
			
			SeWorkList wl = this.querySeWorkListById(obj.getJobno());
			wl.setWorkName(obj.getTaskName());
			wl.setProjectId(obj.getProjectId());
			this.pubDao.update(wl);
		}catch(Exception e){
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	};
	
	public void updateSeProcTaskOnly(SeProcTask obj){
		try{
			this.pubDao.update(obj,obj.getJobno(),null);
		}catch(Exception e){
			throw new RuntimeException(e);
		}
	};
	
	public void saveSeProcPerformers(String jobno , String mark , List<Map<String,String>> assigners) {
		if(MyStringUtils.isEmpty(jobno)){
			throw new RuntimeException("Jobno Can Not Be Null ");
		}
		if(MyStringUtils.isEmpty(mark)){
			throw new RuntimeException("Mark Can Not Be Null ");
		}
		String sql = " delete from se_proc_performer where jobno = ? and mark = ? ";
		List params = new ArrayList();
		params.add(jobno);
		params.add(mark);
		this.pubDao.executeSql(sql, params.toArray());
		if(MyListUtils.isNotEmpty(assigners)){
			for(Map<String,String> assigner : assigners){
				SeProcPerformer seProcPerformer = new SeProcPerformer();
				seProcPerformer.setJobno(jobno);
				seProcPerformer.setMark(mark);
				seProcPerformer.setUserId(assigner.get("user"));
				seProcPerformer.setAssignerRole(assigner.get("role"));
				this.pubDao.save(seProcPerformer);
			}
		}
	};
	
	public Map<String,String> queryPerformersByJobnoAndMark(String jobno,String mark){
		String sql = "select ass.user_id as userId,ass.assigner_role as assignerRole,u.user_name as userName from se_proc_performer ass left join se_user u on ass.user_id = u.user_id where jobno = ? and mark = ?";
		List params = new ArrayList();
		params.add(jobno);
		params.add(mark);
		List r =  this.jdbcDao.query(sql, params.toArray(), null);
		
		Map m = new HashMap();
		m.put("userIds", MyListUtils.listMapToString(r, "userId", ","));
		m.put("userNames", MyListUtils.listMapToString(r, "userName", ","));
		return m;
	};
	
	public List queryTodoList(Map m,String user,Page p){
		//System.out.println(m.get("bkey"));
		String sql = 
				" select distinct"+
				" t.BUSSINESSKEY, "+
				" t.TASKID, "+
				" t.EXECUTIONID, "+
				" t.PROCINSID, "+
				" t.PROCDEFID, "+
				" t.TASKNAME, "+
				" t.TASKCREATETIME, "+
				" t.TASKDEFKEY, "+
				" t.FORMKEY, "+
				" t.ASSIGNTYPE, "+
				" t.TASKUSERID, "+
				" t.STEPCODE, "+
				" u.USER_NAME as USERNAME, "+
				" wl.WORK_NAME as WORKNAME, "+ 
				" wl.START_TIME as STARTTIME,"+
				" wl.CREATE_TIME as CREATETIME," +
				" pro.PROJECT_ID as PROJECTID, "+
				" pro.PRO_NAME as PROJECTNAME "+
				" from view_todo_list t" + 
				" left join se_work_list wl on t.BUSSINESSKEY = wl.jobno "+ 
				" left join se_project_info pro on wl.project_id = pro.project_id " + 
				" left join se_user u on t.TASKUSERID = u.user_id where 1=1";
		List params = new ArrayList();
		if(m != null){
			if(m.get("key") != null){
				if(MyStringUtils.isNotEmpty(m.get("key").toString())){
					sql += " and ( "
							+ " upper(BUSSINESSKEY) like upper(?) or "
							+ " upper(TASKNAME) like upper(?) or "
							+ " upper(wl.work_name) like upper(?) or "
							+ " upper(u.USER_NAME) like upper(?) "
							+ " )";
					params.add("%" + m.get("key").toString().trim()+ "%");
					params.add("%" + m.get("key").toString().trim()+ "%");
					params.add("%" + m.get("key").toString().trim()+ "%");
					params.add("%" + m.get("key").toString().trim()+ "%");
				}
			}
			
			
			String assignee  = m.get("assignee") == null ? "" : m.get("assignee").toString();
			String todoType = m.get("todoType") == null ? "" : m.get("todoType").toString();
			if(MyStringUtils.isNotEmpty(todoType)){
				sql += " and wl.jobno in (select jobno from view_proc_user where proc_role = 'assigner' and user_id = ? )";
				params.add(assignee);
			}else{
				if(MyStringUtils.isNotEmpty(assignee)){
					sql += " and TASKUSERID = ? ";
					params.add(assignee);
				}
			}
			
			if(m.get("projectId") != null){
				String projectId = m.get("projectId").toString();
				if(MyStringUtils.isNotEmpty(projectId)){
					sql += " and pro.PROJECT_ID = ? ";
					params.add(m.get("projectId"));
				}
			}
			//排序
			if(StringUtil.isNotEmpty((String)m.get("sort"))){
				sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
			}else{
				sql+=" order by wl.create_time desc " ;
			}
		}
		
		
		
				
		//sql += " order by TASKCREATETIME desc";
		return this.jdbcDao.query(sql, params.toArray(), p);
	};
	
	
	
	public List queryProcessList(Map m,Page p){
		//System.out.println(m.get("bkey"));
		String sql = 
				" select "+
				" wl.jobno as jobno, "+
				" wl.work_type as workType, "+
				" wl.work_name as workName, "+
				" wl.project_id as projectId, "+
				" wl.job_status as jobStatus, "+
				" u.user_name as startUser, "+
				" task.assigner as assigner, "+
				" task.task_id as taskId, "+
				" task.task_name as taskName, "+
				" cs.currentStepName as currentStepName, "+
				" cp.performers as performer, "+
				" pins.PROC_INST_ID_  as processInstanceId, "+
				" pins.START_TIME_ as startTime, "+
				" pins.END_TIME_ as endTime "+
				 
				" FROM "+
				" se_work_list wl  "+
				" left join se_proc_task task on wl.jobno = task.jobno  "+
				" left join act_hi_procinst pins on wl.proc_ins_id = pins.PROC_INST_ID_  "+ 
				" left join se_user u on wl.start_user = u.user_id  "+ 
				" left join ("+ 
				"   select task.PROC_INST_ID_ as procInstId,Cast(GROUP_CONCAT(task.NAME_) as CHAR(1000)) AS currentStepName "+ 
				"   FROM act_ru_task task  "+ 
				"   group by task.PROC_INST_ID_"+ 
				" ) cs on cs.procInstId = pins.PROC_INST_ID_ "+ 
				
				" left join( "+ 
				" 	select art1.proc_inst_id_ as procinstid,cast(group_concat(u1.user_name)as char(1000))as performers "+ 
				" 	from act_ru_identitylink arilk left join se_user u1 on arilk.user_id_ = u1.user_id and arilk.type_ = 'candidate' "+ 
				"   left join act_ru_task art1 on art1.id_ = arilk.task_id_ "+ 
				" 	group by art1.proc_inst_id_ "+ 
				" )cp on cp.procinstid = pins.proc_inst_id_ "+ 
				
				
				" where 1=1";
		List params = new ArrayList();
		if(m != null){
			if(m.get("key") != null){
				if(MyStringUtils.isNotEmpty(m.get("key").toString())){
					sql += " and ( "
							+ " upper(wl.jobno) like upper(?) or "
							+ " upper(wl.work_type) like upper(?) or "
							+ " upper(wl.work_name) like upper(?)  "
							+ " )";
					params.add("%" + m.get("key").toString().trim()+ "%");
					params.add("%" + m.get("key").toString().trim()+ "%");
					params.add("%" + m.get("key").toString().trim()+ "%");
				}
			}
			
			if(m.get("jobStatus") != null  ){
				if(MyStringUtils.isNotEmpty(m.get("jobStatus").toString())){
					sql += " and wl.job_status = ? ";
					params.add(m.get("jobStatus"));
				}
			}
			if(m.get("assigner") != null  ){
				if(MyStringUtils.isNotEmpty(m.get("assigner").toString())){
					sql += " and task.assigner = ? ";
					params.add(m.get("assigner"));
				}
			}
			if(m.get("performer") != null  ){
				if(MyStringUtils.isNotEmpty(m.get("performer").toString())){
					sql += 
					" and exists( "+
					"		select "+
					"		lk.user_id_ "+
					"		from act_ru_identitylink lk left join act_ru_task art on lk.task_id_ = art.id_ "+
					"		where "+
					"		lk.type_ = 'candidate' "+
					"		and art.proc_inst_id_ = wl.proc_ins_id "+
					"		and user_id_ = ? "+
					"	)";
					
					params.add(m.get("performer"));
				}
			}
			if(m.get("projectId") != null){
				String projectId = m.get("projectId").toString();
				if(MyStringUtils.isNotEmpty(projectId)){
					sql += " and wl.PROJECT_ID = ? ";
					params.add(m.get("projectId"));
				}
			}
			//排序
			if(StringUtil.isNotEmpty((String)m.get("sort"))){
				sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
			}else{
				sql+=" order by wl.create_time desc " ;
			}
		}
		
		
		
		System.out.println(sql);
		//sql += " order by TASKCREATETIME desc";
		return this.jdbcDao.query(sql, params.toArray(), p);
	};
	
	
	public DataTableBean queryMyTodo(DataTableBean dtb){
		Page p = new Page();
		p.setCurrentPage(dtb.getCurrentPage());
		p.setPageSize(dtb.getPageSize());
		
		List r = this.queryTodoList(dtb.getConditions(), null, p);
		dtb.setData(r);
		dtb.setRecordsTotal(p.getListSize());
		dtb.setRecordsFiltered(p.getListSize());
		return dtb;
	};
	
	
	public String startTaskProcessForTraceTask(ProcessStartInfo processStartInfo,String taskId){
		try {
			processStartInfo = this.startTaskProcess(processStartInfo);
			SeProcTask processTask = (SeProcTask)this.findById(SeProcTask.class, processStartInfo.getoJobno());
			SeTraceTask traceTask = (SeTraceTask)this.findById(SeTraceTask.class, taskId);
			
			processTask.setAssigner(processStartInfo.getiStartUser());
			processTask.setJobno(processStartInfo.getoJobno());
			processTask.setTaskName(traceTask.getTaskTitle());
			processTask.setTaskRequire(traceTask.getTaskRequire());
			processTask.setTaskId(traceTask.getTaskId());
			try{
				SeRequirementTrace trace =  (SeRequirementTrace)this.commonService.findById(SeRequirementTrace.class, traceTask.getTraceId());
				processTask.setProjectId(trace.getProjectId());
			}catch(Exception e){
				e.printStackTrace();
			}
			
			List performers = this.commonService.queryMapUser("TASK",taskId);
			List performersIds = new ArrayList();
			
			
			List<String> users = new ArrayList<String>();
			if(MyListUtils.isNotEmpty(performers)){
				for(Object obj : performers){
					Map m = (Map)obj;
					String uid = m.get("USER_ID").toString();
					users.add(uid);
				}
			}
			processTask.setPerformer(users);
			this.updateSeProcTask(processTask);
			
			return StaticVar.STATUS_SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			return e.getMessage();
		}
	};
	
	
	public List queryHistoryTask(String processInstanceId){
		String sql = 
				" select "+
				" taskhis.ID_ as taskHisId, "+
				" taskhis.NAME_ as taskName, "+
				" taskhis.TASK_DEF_KEY_ as taskKey, "+
				" taskhis.FORM_KEY_ as formKey, "+
				" taskhis.START_TIME_ as startTime, "+
				" taskhis.END_TIME_ as endTime, "+
				" taskhis.ASSIGNEE_ as assignee, "+
				" u.user_name as assigneeName, "+
				" pins.BUSINESS_KEY_ as businessKey, "+
				" procdef.KEY_ as procDefKey, "+
				" pins.BUSINESS_KEY_ as bkey "+
				" from "+
				" act_hi_taskinst taskhis "+
				" left join act_hi_procinst pins on taskhis.PROC_INST_ID_ = pins.PROC_INST_ID_ "+
				" left join act_re_procdef procdef on pins.PROC_DEF_ID_ = procdef.ID_ "+
				" left join se_user u on taskhis.ASSIGNEE_ = u.user_id ";
		sql += " where pins.PROC_INST_ID_ = ? order by taskhis.START_TIME_ ";
		List params = new ArrayList();
		params.add(processInstanceId);
		return this.jdbcDao.query(sql, params.toArray(), null);
	}
	
	
	public List queryCurrentTask(String processInstanceId){
		String sql = 
				" select "+ 
				" task.ID_ as taskId, "+ 
				" task.NAME_ as taskName, "+ 
				" task.TASK_DEF_KEY_ as taskKey, "+ 
				" task.CREATE_TIME_ as startTime, "+
				" task.FORM_KEY_ as formKey, "+
				" pins.BUSINESS_KEY_ as businessKey, "+ 
				" pins.PROC_INST_ID_ as procInstId, "+ 
				" procdef.KEY_ as procDefKey, "+ 
				" t.GROUP_USER as groupUser  "+ 
				" from act_ru_task task  "+ 
				" left join act_hi_procinst pins on pins.PROC_INST_ID_ = task.PROC_INST_ID_ "+ 
				" left join act_re_procdef procdef on pins.PROC_DEF_ID_ = procdef.ID_ "+ 
				" left join  "+ 
				" ( "+ 
				" select lk.TASK_ID_ as TASK_ID_,GROUP_CONCAT(u.user_name) as GROUP_USER from act_ru_identitylink lk left join se_user u on lk.USER_ID_ = u.user_id  "+ 
				"  where lk.TYPE_ = 'candidate' group by lk.TASK_ID_ "+ 
				" ) t on task.ID_ = t.TASK_ID_ ";
		sql += " where pins.PROC_INST_ID_ = ? ";
		List params = new ArrayList();
		params.add(processInstanceId);
		return this.jdbcDao.query(sql, params.toArray(), null);
	}
	
	
	//====================================  辅助方法 ====================================//
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProcPerformerService#querySeProcPerformer(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeProcPerformer(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.主键 as 主键, " + //0   
			" t.工作编号 as 工作编号, " + //0  			
			" t.执行步骤 as 执行步骤, " + //1  			
			" t.人员 as 人员, " + //2  			
			" t.角色 as 角色 " + //3  			
			
			" from SE_PROC_PERFORMER t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("主键"))){
				sql += " and t.主键 like ? ";
				param.add("%" + m.get("主键").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("工作编号"))){
					sql += " and upper(t.工作编号) like upper(?) ";
					param.add("%" + m.get("工作编号").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("执行步骤"))){
					sql += " and upper(t.执行步骤) like upper(?) ";
					param.add("%" + m.get("执行步骤").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("人员"))){
					sql += " and upper(t.人员) like upper(?) ";
					param.add("%" + m.get("人员").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("角色"))){
					sql += " and upper(t.角色) like upper(?) ";
					param.add("%" + m.get("角色").toString().trim() + "%");
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProcPerformerService#saveSeProcPerformer(cn.thd.pojo.se.SeProcPerformer)
	 */
	public void saveSeProcPerformer(SeProcPerformer obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProcPerformerService#updateSeProcPerformer(cn.thd.pojo.se.SeProcPerformer)
	 */
	public void updateSeProcPerformer(SeProcPerformer obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProcPerformerService#querySeProcPerformerById(java.lang.String)
	 */
	public SeProcPerformer querySeProcPerformerById(java.lang.String pk){
		return (SeProcPerformer)this.pubDao.findById(SeProcPerformer.class,pk);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProcPerformerService#deleteSeProcPerformerById(java.lang.String)
	 */
	public void deleteSeProcPerformerById(java.lang.String pk){
		SeProcPerformer obj = this.querySeProcPerformerById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除执行人信息对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeProcPerformerByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeProcPerformerById(id);
						
						
					}
				}
			}
		}
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeWorkListService#querySeWorkList(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeWorkList(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.JOBNO as JOBNO, " + //0   
			" t.WORK_TYPE as WORK_TYPE, " + //0  			
			" t.WORK_NAME as WORK_NAME, " + //1  			
			" t.START_USER as START_USER, " + //2  			
			" t.START_TIME as START_TIME, " + //3  			
			" t.CURRENT_STEP as CURRENT_STEP, " + //4  			
			" t.JOB_STATUS as JOB_STATUS, " + //5  			
			" t.IS_DELETE as IS_DELETE, " + //6  			
			" t.CREATE_TIME as CREATE_TIME, " + //7  			
			" t.UPDATE_TIME as UPDATE_TIME " + //8  			
			
			" from SE_WORK_LIST t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("JOBNO"))){
				sql += " and t.JOBNO like ? ";
				param.add("%" + m.get("JOBNO").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("WORK_TYPE"))){
					sql += " and upper(t.WORK_TYPE) like upper(?) ";
					param.add("%" + m.get("WORK_TYPE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("WORK_NAME"))){
					sql += " and upper(t.WORK_NAME) like upper(?) ";
					param.add("%" + m.get("WORK_NAME").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("START_USER"))){
					sql += " and upper(t.START_USER) like upper(?) ";
					param.add("%" + m.get("START_USER").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("START_TIME"))){
					sql += " and t.START_TIME = ? ";
					param.add(m.get("START_TIME").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("CURRENT_STEP"))){
					sql += " and upper(t.CURRENT_STEP) like upper(?) ";
					param.add("%" + m.get("CURRENT_STEP").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("JOB_STATUS"))){
					sql += " and upper(t.JOB_STATUS) like upper(?) ";
					param.add("%" + m.get("JOB_STATUS").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("IS_DELETE"))){
					sql += " and upper(t.IS_DELETE) like upper(?) ";
					param.add("%" + m.get("IS_DELETE").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("CREATE_TIME"))){
					sql += " and t.CREATE_TIME = ? ";
					param.add(m.get("CREATE_TIME").toString().trim());
				}
				if(StringUtil.isNotEmpty(m.get("UPDATE_TIME"))){
					sql += " and t.UPDATE_TIME = ? ";
					param.add(m.get("UPDATE_TIME").toString().trim());
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeWorkListService#saveSeWorkList(cn.thd.pojo.se.SeWorkList)
	 */
	public void saveSeWorkList(SeWorkList obj) {
		this.pubDao.save(obj);
	};
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeWorkListService#updateSeWorkList(cn.thd.pojo.se.SeWorkList)
	 */
	public void updateSeWorkList(SeWorkList obj){
		this.pubDao.update(obj);
	};

	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeWorkListService#querySeWorkListById(java.lang.String)
	 */
	public SeWorkList querySeWorkListById(java.lang.String pk){
		return (SeWorkList)this.pubDao.findById(SeWorkList.class,pk);
	};
	
	public SeWorkList querySeWorkListByJobno(java.lang.String jobno){
		return (SeWorkList)this.pubDao.findById(SeWorkList.class,jobno);
	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeWorkListService#deleteSeWorkListById(java.lang.String)
	 */
	public void deleteSeWorkListById(java.lang.String pk){
		SeWorkList obj = this.querySeWorkListById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除系统取号对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeWorkListByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeWorkListById(id);
						
						
					}
				}
			}
		}
	};
	
	
	
	
	
	
	
	
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProcTaskService#querySeProcTask(java.util.Map, com.ccse.hr.util.Page)
	 */
	public List querySeProcTask(Map<String,String> m , Page p){
		List<String> param = new ArrayList<String>();
		
		String sql = "select "+
			" t.JOBNO as JOBNO, " + //0   
			" t.ASSIGNER as ASSIGNER, " + //0  			
			" t.PERFORM_INFO as PERFORM_INFO, " + //1  			
			" t.AUDIT_INFO as AUDIT_INFO, " + //2  			
			" t.BACKLOG_ID as BACKLOG_ID " + //3  			
			
			" from SE_PROC_TASK t  where 1=1 ";
		
		if(m!=null){
			if(StringUtil.isNotEmpty(m.get("JOBNO"))){
				sql += " and t.JOBNO like ? ";
				param.add("%" + m.get("JOBNO").toString().trim() + "%");
			}
				if(StringUtil.isNotEmpty(m.get("ASSIGNER"))){
					sql += " and upper(t.ASSIGNER) like upper(?) ";
					param.add("%" + m.get("ASSIGNER").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("PERFORM_INFO"))){
					sql += " and upper(t.PERFORM_INFO) like upper(?) ";
					param.add("%" + m.get("PERFORM_INFO").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("AUDIT_INFO"))){
					sql += " and upper(t.AUDIT_INFO) like upper(?) ";
					param.add("%" + m.get("AUDIT_INFO").toString().trim() + "%");
				}
				if(StringUtil.isNotEmpty(m.get("BACKLOG_ID"))){
					sql += " and upper(t.BACKLOG_ID) like upper(?) ";
					param.add("%" + m.get("BACKLOG_ID").toString().trim() + "%");
				}
			
		}
		
		
		//排序
		if(StringUtil.isNotEmpty((String)m.get("sort"))){
			sql+=" order by " + m.get("sort").toString().toUpperCase() + " " +m.get("order").toString().toUpperCase();
		}
		
		
		System.out.println(sql);
		List l = this.pubDao.findBySqlToMap(sql,param.toArray(), p);	
		return l;

	};
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProcTaskService#saveSeProcTask(cn.thd.pojo.process.SeProcTask)
	 */
	public void saveSeProcTask(SeProcTask obj) {
		this.pubDao.save(obj);
	};
	

	
	
	/*
	 * (non-Javadoc)
	 * @see cn.thd.service.se.SeProcTaskService#deleteSeProcTaskById(java.lang.String)
	 */
	public void deleteSeProcTaskById(java.lang.String pk){
		SeProcTask obj = this.querySeProcTaskById(pk);
		this.pubDao.delete(obj);
	};
	
	
	/**
	 * 批量删除任务流程信息对象
	 * @param ids 主键,多个主键用","隔开
	 */
	public void deleteSeProcTaskByIds(String ids){
		if(ids!=null && !ids.trim().equals("")){
			String[] idArray = ids.split(",");
			if(idArray.length > 0){
				for(String id : idArray){
					if(id!=null &&  !id.trim().equals("")){
							deleteSeProcTaskById(id);
						
						
					}
				}
			}
		}
	};
	
	
	public String cancelProcessInstance(String jobno){
		try{
			SeWorkList wl = this.querySeWorkListById(jobno);
			String procInsId = wl.getProcInsId();
			myActivitiUtil.cancelProcessInstance(procInsId, "");
			wl.setJobStatus(StaticVar.PROCESSSTATUS_DELETE);
			this.pubDao.update(wl);
			return StaticVar.STATUS_SUCCESS;
		}catch(Exception e){
			return e.getMessage();
		}
	}
	
	public String suspendsProcessInstance(String jobno){
		try{
			SeWorkList wl = this.querySeWorkListById(jobno);
			String procInsId = wl.getProcInsId();
			myActivitiUtil.suspendsProcessInstance(procInsId);
			wl.setJobStatus(StaticVar.PROCESSSTATUS_SUSPENSION);
			this.pubDao.update(wl);
			return StaticVar.STATUS_SUCCESS;
		}catch(Exception e){
			return e.getMessage();
		}
	};
	
	public String activateProcessInstance(String jobno){
		try{
			SeWorkList wl = this.querySeWorkListById(jobno);
			String procInsId = wl.getProcInsId();
			myActivitiUtil.activateProcessInstance(procInsId);
			wl.setJobStatus(StaticVar.PROCESSSTATUS_NORMAL);
			this.pubDao.update(wl);
			return StaticVar.STATUS_SUCCESS;
		}catch(Exception e){
			return e.getMessage();
		}
	};
	
	public String claimAndComplateTask(String taskId,String stepOperator,Map m){
		try{
			Task t = this.myActivitiUtil.getTaskService().createTaskQuery().taskId(taskId).singleResult();
			if(MyStringUtils.isEmpty(taskId)){
				throw new Exception("未找到TaskId");
			}
			if(MyStringUtils.isEmpty(stepOperator)){
				throw new Exception("未找到当前操作人");
			}
			
			ProcessInstance pi = this.myActivitiUtil.runtimeService.createProcessInstanceQuery().processInstanceId(t.getProcessInstanceId()).singleResult();
			String jobno = pi.getBusinessKey();
			String processInstanceId = t.getProcessInstanceId();
			this.myActivitiUtil.claimAndComplateTask(taskId, stepOperator, null);
			
			pi = this.myActivitiUtil.runtimeService.createProcessInstanceQuery().processInstanceId(t.getProcessInstanceId()).singleResult();
			if(pi == null){
				SeWorkList wl = this.querySeWorkListById(jobno);
				wl.setJobStatus(StaticVar.PROCESSSTATUS_FINISH);
			}
			return StaticVar.STATUS_SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return e.getMessage();
		}
	};
	
	public boolean cando(String taskId,String userId){
		if(MyStringUtils.isEmpty(taskId) || MyStringUtils.isEmpty(userId)){
			return false;
		}
		Task t = this.myActivitiUtil.getTaskService().createTaskQuery().taskId(taskId).singleResult();
		ProcessInstance pi = this.myActivitiUtil.getRuntimeService().createProcessInstanceQuery().processInstanceId(t.getProcessInstanceId()).singleResult();
		SeWorkList wl = this.querySeWorkListById(pi.getBusinessKey());
		Map  authMap = seService.queryAuth(userId, wl.getProjectId());
		if("YES".equals(authMap.get("PROCESS")) || "YES".equals(authMap.get("PROCESS"))){
			return true;
		}
		
		return this.myActivitiUtil.canDo(taskId, userId);
	};
	
	
	
	public String queryTaskCandidate(String taskId){
		List<IdentityLink> candidates = this.myActivitiUtil.queryCandidateForTask(taskId);
		String candidateUsers = "";
		for(IdentityLink il : candidates){
			candidateUsers += ("," + il.getUserId()); 
		}
		if(MyStringUtils.isNotEmpty(candidateUsers)){
			candidateUsers = candidateUsers.substring(1,candidateUsers.length());
		}
		return candidateUsers;
	};
	
	public String saveTaskCandidate(String taskId,String userIds){
		if(MyStringUtils.isEmpty(taskId)){
			throw new RuntimeException("taskId can not be found!");
		}
		List<IdentityLink> candidates = this.myActivitiUtil.queryCandidateForTask(taskId);
		for(IdentityLink il : candidates){
			this.myActivitiUtil.deleteCandidateUserFromTask(taskId, il.getUserId()); 
		}
		if(MyStringUtils.isNotEmpty(userIds)){
			String[] userIdsArray = userIds.split(",");
			for(String userId : userIdsArray){
				this.myActivitiUtil.addCandidateUserToTask(taskId, userId);
			}
		}
		return StaticVar.STATUS_SUCCESS;
	};
	
	
}
